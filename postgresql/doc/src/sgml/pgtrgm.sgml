<!-- doc/src/sgml/pgtrgm.sgml -->

<sect1 id="pgtrgm" xreflabel="pg_trgm">
 <title>pg_trgm</title>

 <indexterm zone="pgtrgm">
  <primary>pg_trgm</primary>
 </indexterm>

 <!--
<para>
  The <filename>pg_trgm</filename> module provides functions and operators
  for determining the similarity of
  alphanumeric text based on trigram matching, as
  well as index operator classes that support fast searching for similar
  strings.
 </para>
-->
<para>
<filename>pg_trgm</filename>模块提供函数和操作符测定字母数字文本基于三元模型匹配的相似性，
还有支持快速搜索相似字符串的索引操作符类。
</para>

 <sect2>
  <!--
  <title>Trigram (or Trigraph) Concepts</title>
  -->
  <title>三元模型概念</title>

  <!--
<para>
   A trigram is a group of three consecutive characters taken
   from a string.  We can measure the similarity of two strings by
   counting the number of trigrams they share.  This simple idea
   turns out to be very effective for measuring the similarity of
   words in many natural languages.
  </para>
-->
<para>
三元模型是一组从一个字符串中获得的三个连续的字符。
我们可以通过计数两个字符串共享的三元模型的数量来测量它们的相似性。
这个简单的想法证明在测量许多自然语言词汇的相似性时是非常有效的。
</para>

  <note>
   <!--
<para>
    <filename>pg_trgm</filename> ignores non-word characters
    (non-alphanumerics) when extracting trigrams from a string.
    Each word is considered to have two spaces
    prefixed and one space suffixed when determining the set
    of trigrams contained in the string.
    For example, the set of trigrams in the string
    <quote><literal>cat</literal></quote> is
    <quote><literal>  c</literal></quote>,
    <quote><literal> ca</literal></quote>,
    <quote><literal>cat</literal></quote>, and
    <quote><literal>at </literal></quote>.
    The set of trigrams in the string
    <quote><literal>foo|bar</literal></quote> is
    <quote><literal>  f</literal></quote>,
    <quote><literal> fo</literal></quote>,
    <quote><literal>foo</literal></quote>,
    <quote><literal>oo </literal></quote>,
    <quote><literal>  b</literal></quote>,
    <quote><literal> ba</literal></quote>,
    <quote><literal>bar</literal></quote>, and
    <quote><literal>ar </literal></quote>.
   </para>
-->
<para>
<filename>pg_trgm</filename>从一个字符串提取三元模型时忽略非文字字符（非字母）。
当确定包含在字符串中的三元模型集合时，每个单词被认为有两个空格前缀和一个空格后缀。
例如，字符串<quote><literal>cat</literal></quote>中的三元模型的集合是
<quote><literal>  c</literal></quote>，<quote><literal> ca</literal></quote>，
<quote><literal>cat</literal></quote>和<quote><literal>at </literal></quote>。
字符串<quote><literal>foo|bar</literal></quote>中的三元模型的集合是
<quote><literal>  f</literal></quote>，<quote><literal> fo</literal></quote>，
<quote><literal>foo</literal></quote>，<quote><literal>oo </literal></quote>，
<quote><literal>  b</literal></quote>，<quote><literal> ba</literal></quote>，
<quote><literal>bar</literal></quote>和<quote><literal>ar </literal></quote>。
</para>
  </note>
 </sect2>

 <sect2>
 <!-- 
 <title>Functions and Operators</title>
 -->
  <title>函数和操作符</title>

  <!--
<para>
   The functions provided by the <filename>pg_trgm</filename> module
   are shown in <xref linkend="pgtrgm-func-table">, the operators
   in <xref linkend="pgtrgm-op-table">.
  </para>
-->
<para>
<filename>pg_trgm</filename>模块提供的函数在<xref linkend="pgtrgm-func-table">
中显示，提供的操作符在<xref linkend="pgtrgm-op-table">中显示。
</para>

  <table id="pgtrgm-func-table">
   <!--
   <title><filename>pg_trgm</filename> Functions</title>
   -->
   <title><filename>pg_trgm</filename> 函数</title>
   <tgroup cols="3">
    <thead>
     <row>
      <!-- 
  <entry>Function</entry>
      <entry>Returns</entry>
      <entry>Description</entry>
  -->
  <entry>函数</entry>
      <entry>返回</entry>
      <entry>描述</entry>
     </row>
    </thead>

    <tbody>
     <row>
      <entry><function>similarity(text, text)</function><indexterm><primary>similarity</primary></indexterm></entry>
      <entry><type>real</type></entry>
      <entry>
       <!--
   Returns a number that indicates how similar the two arguments are.
       The range of the result is zero (indicating that the two strings are
       completely dissimilar) to one (indicating that the two strings are
       identical).
   -->
   返回一个数字表明两个参数是多么相似。结果的范围是0（表明两个字符串完全不相似）
   到1（表明两个字符串是完全相同的）。
      </entry>
     </row>
     <row>
      <entry><function>show_trgm(text)</function><indexterm><primary>show_trgm</primary></indexterm></entry>
      <entry><type>text[]</type></entry>
      <entry>
       <!-- 
   Returns an array of all the trigrams in the given string.
       (In practice this is seldom useful except for debugging.)
   -->
   返回一个给定字符串中所有三元模型的数组。（实际上这个除了调试之外很少有用。）
      </entry>
     </row>
     <row>
      <entry><function>show_limit()</function><indexterm><primary>show_limit</primary></indexterm></entry>
      <entry><type>real</type></entry>
      <entry>
       <!--
   Returns the current similarity threshold used by the <literal>%</>
       operator.  This sets the minimum similarity between
       two words for them to be considered similar enough to
       be misspellings of each other, for example.
   -->
   返回<literal>%</>操作符使用的当前相似性阈值。例如，这个设置两个单词间的最小相似性，
   这两个单词被认为足够相似以致相互之间拼写错误。
      </entry>
     </row>
     <row>
      <entry><function>set_limit(real)</function><indexterm><primary>set_limit</primary></indexterm></entry>
      <entry><type>real</type></entry>
      <entry>
       <!-- 
   Sets the current similarity threshold that is used by the <literal>%</>
       operator.  The threshold must be between 0 and 1 (default is 0.3).
       Returns the same value passed in.
   -->
   设置<literal>%</>操作符使用的当前相似性阈值。该阈值必须在0和1之间（缺省是0.3）。
   返回传递进来的相同的值。
      </entry>
     </row>
    </tbody>
   </tgroup>
  </table>

  <table id="pgtrgm-op-table">
   <!-- 
   <title><filename>pg_trgm</filename> Operators</title>
   -->
   <title><filename>pg_trgm</filename> 操作符</title>
   <tgroup cols="3">
    <thead>
     <row>
      <!--
  <entry>Operator</entry>
      <entry>Returns</entry>
      <entry>Description</entry>
  -->
  <entry>操作符</entry>
      <entry>返回</entry>
      <entry>描述</entry>
     </row>
    </thead>

    <tbody>
     <row>
      <entry><type>text</> <literal>%</literal> <type>text</></entry>
      <entry><type>boolean</type></entry>
      <entry>
       <!-- 
   Returns <literal>true</> if its arguments have a similarity that is
       greater than the current similarity threshold set by
       <function>set_limit</>.
   -->
   如果它的参数的相似性高于<function>set_limit</>设置的当前相似性阈值则返回<literal>true</>。
      </entry>
     </row>
     <row>
      <entry><type>text</> <literal>&lt;-&gt;</literal> <type>text</></entry>
      <entry><type>real</type></entry>
      <entry>
       <!-- 
   Returns the <quote>distance</> between the arguments, that is
       one minus the <function>similarity()</> value.
   -->
   返回参数之间的<quote>距离</>，这是1减去<function>similarity()</>值。
      </entry>
     </row>
    </tbody>
   </tgroup>
  </table>
 </sect2>

 <sect2>
  <!--
  <title>Index Support</title>
  -->
  <title>索引支持</title>

  <!--
<para>
   The <filename>pg_trgm</filename> module provides GiST and GIN index
   operator classes that allow you to create an index over a text column for
   the purpose of very fast similarity searches.  These index types support
   the above-described similarity operators, and additionally support
   trigram-based index searches for <literal>LIKE</>, <literal>ILIKE</>,
   <literal>~</> and <literal>~*</> queries.  (These indexes do not
   support equality nor simple comparison operators, so you may need a
   regular B-tree index too.)
  </para>
-->
<para>
<filename>pg_trgm</filename>模块提供GiST和GIN索引操作符类，
该操作符类允许你为了非常快速的相似性搜索在文本字段上创建一个索引。
这些索引类型支持上面描述的相似性操作符，并且额外支持基于三元模型的索引搜索：
<literal>LIKE</>， <literal>ILIKE</>，<literal>~</> 和 <literal>~*</>查询。
（这些索引并不支持相等也不支持简单的比较操作符，所以你可能也需要一个普通的B-tree索引。）
</para>

<para>
   <!--
   Example:
   -->
   示例：

<programlisting>
CREATE TABLE test_trgm (t text);
CREATE INDEX trgm_idx ON test_trgm USING gist (t gist_trgm_ops);
</programlisting>
<!-- or -->
或
<programlisting>
CREATE INDEX trgm_idx ON test_trgm USING gin (t gin_trgm_ops);
</programlisting>
  </para>

<para>
   <!--
   At this point, you will have an index on the <structfield>t</> column that
   you can use for similarity searching.  A typical query is
   -->
   在这一点，你将有一个在<structfield>t</>列上的索引，你可以用它来做相似性搜索。
   一个典型的查询是：
<programlisting>
SELECT t, similarity(t, '<replaceable>word</>') AS sml
  FROM test_trgm
  WHERE t % '<replaceable>word</>'
  ORDER BY sml DESC, t;
</programlisting>
   <!-- 
   This will return all values in the text column that are sufficiently
   similar to <replaceable>word</>, sorted from best match to worst.  The
   index will be used to make this a fast operation even over very large data
   sets. 
   -->
   这将返回文本列上与<replaceable>word</>足够相似的所有值，从最佳匹配到最坏匹配排序。
   该索引将用来做一个快速操作，即使是在非常大的数据集上面。
  </para>

<para>
   <!--
   A variant of the above query is
   -->
   上面查询的一个变体是：
<programlisting>
SELECT t, t &lt;-&gt; '<replaceable>word</>' AS dist
  FROM test_trgm
  ORDER BY dist LIMIT 10;
</programlisting>
   <!-- 
   This can be implemented quite efficiently by GiST indexes, but not
   by GIN indexes.  It will usually beat the first formulation when only
   a small number of the closest matches is wanted.
   -->
   这个可以通过GiST索引更有效的实现，而不是GIN索引。当只想要少量最靠近的匹配时，
   通常会使用第一个公式。
  </para>

<para>
   <!-- 
   Beginning in <productname>PostgreSQL</> 9.1, these index types also support
   index searches for <literal>LIKE</> and <literal>ILIKE</>, for example 
   -->
   从<productname>PostgreSQL</> 9.1开始，这些索引类型也支持
   <literal>LIKE</>和<literal>ILIKE</>索引搜索，例如
<programlisting>
SELECT * FROM test_trgm WHERE t LIKE '%foo%bar';
</programlisting>
   <!-- 
   The index search works by extracting trigrams from the search string
   and then looking these up in the index.  The more trigrams in the search
   string, the more effective the index search is.  Unlike B-tree based
   searches, the search string need not be left-anchored.
   -->
   该索引搜索通过从搜索字符串中提取三元模型然后在索引中查找这些三元模型来工作。
   搜索字符串中的三元模型越多，索引搜索越有效率。不像基于B-tree的搜索，
   搜索字符串不需要是左边固定的。
  </para>

<para>
   <!-- 
   Beginning in <productname>PostgreSQL</> 9.3, these index types also support
   index searches for regular-expression matches
   (<literal>~</> and <literal>~*</> operators), for example
   -->
   从<productname>PostgreSQL</> 9.3开始，这些索引类型也支持正则表达式匹配的索引搜索
   （<literal>~</>和<literal>~*</>操作符），例如
<programlisting>
SELECT * FROM test_trgm WHERE t ~ '(foo|bar)';
</programlisting>
   <!-- 
   The index search works by extracting trigrams from the regular expression
   and then looking these up in the index.  The more trigrams that can be
   extracted from the regular expression, the more effective the index search
   is.  Unlike B-tree based searches, the search string need not be
   left-anchored. 
   -->
   该索引搜索通过从正则表达式中提取三元模型然后在索引中查找这些三元模型来工作。
   从正则表达式中提取出来的三元模型越多，索引搜索越有效率。不像基于B-tree的搜索，
   搜索字符串不需要是左边固定的。
  </para>

  <!--
<para>
   For both <literal>LIKE</> and regular-expression searches, keep in mind
   that a pattern with no extractable trigrams will degenerate to a full-index
   scan.
  </para>
-->
<para>
对于<literal>LIKE</>和正则表达式搜索，请记住，没有可提取的三元模型将降级为全文索引搜索。
</para>

  <!--
<para>
   The choice between GiST and GIN indexing depends on the relative
   performance characteristics of GiST and GIN, which are discussed elsewhere.
   As a rule of thumb, a GIN index is faster to search than a GiST index, but
   slower to build or update; so GIN is better suited for static data and GiST
   for often-updated data.
  </para>
-->
<para>
选择GiST还是GIN索引取决于GiST和GIN的相对性能特征，这个在别的地方讨论。
一般来说，GIN索引比GiST索引搜索起来要快，但是在建立或更新时要慢；
索引GIN更适合于静态数据而GiST适合于经常更新的数据。
</para>
 </sect2>

 <sect2>
  <!--
  <title>Text Search Integration</title>
  -->
  <title>文本搜索集成</title>

  <!--
<para>
   Trigram matching is a very useful tool when used in conjunction
   with a full text index.  In particular it can help to recognize
   misspelled input words that will not be matched directly by the
   full text search mechanism.
  </para>
-->
<para>
三元模型匹配在用于与全文本索引相协调时是一个非常有用的工具。
尤其是它可以帮助识别错误拼写的输入单词，这样的单词将不能直接通过全文本搜索机制匹配。
</para>

<para>
   <!--
   The first step is to generate an auxiliary table containing all
   the unique words in the documents:
   -->
   第一步是要生成一个包含文档中的所有唯一词的辅助表：

<programlisting>
CREATE TABLE words AS SELECT word FROM
        ts_stat('SELECT to_tsvector(''simple'', bodytext) FROM documents');
</programlisting>

   <!--
   where <structname>documents</> is a table that has a text field
   <structfield>bodytext</> that we wish to search.  The reason for using
   the <literal>simple</> configuration with the <function>to_tsvector</>
   function, instead of using a language-specific configuration,
   is that we want a list of the original (unstemmed) words.
   -->
   这里的<structname>documents</>是含有我们希望搜索的文本字段<structfield>bodytext</>的表。
   使用<literal>simple</>配置<function>to_tsvector</>函数的原因，
   不是使用一个语言特定的配置，是我们想要一个原始（未修改）词的列表。
  </para>

<para>
   <!--
   Next, create a trigram index on the word column:
   -->
   下一步，在该词的列上创建一个三元模型索引：

<programlisting>
CREATE INDEX words_idx ON words USING gin(word gin_trgm_ops);
</programlisting>

   <!--
   Now, a <command>SELECT</command> query similar to the previous example can
   be used to suggest spellings for misspelled words in user search terms.
   A useful extra test is to require that the selected words are also of
   similar length to the misspelled word.
   -->
   现在，一个类似于之前示例的<command>SELECT</command>
   查询可以用来在用户搜索词中建议错误拼写的词的拼写。
   需要一个有用的额外的文本，选中的词和错误拼写的词有相似的长度。
  </para>

  <note>
   <!--
<para>
    Since the <structname>words</> table has been generated as a separate,
    static table, it will need to be periodically regenerated so that
    it remains reasonably up-to-date with the document collection.
    Keeping it exactly current is usually unnecessary.
   </para>
-->
<para>
因为<structname>words</>表是作为一个单独的、静态表生成的，它需要定期的重新生成，
这样它才能与文档集合保持合理的更新。通常不需要使它恰好是当前的。
</para>
  </note>
 </sect2>

 <sect2>
  <!--
  <title>References</title>
  -->
  <title>参考文献</title>

  <!--
<para>
   GiST Development Site
   <ulink url="http://www.sai.msu.su/~megera/postgres/gist/"></ulink>
  </para>
-->
<para>
GiST开发网站
<ulink url="http://www.sai.msu.su/~megera/postgres/gist/"></ulink>
</para>
  <!--
<para>
   Tsearch2 Development Site
   <ulink url="http://www.sai.msu.su/~megera/postgres/gist/tsearch/V2/"></ulink>
  </para>
-->
<para>
Tsearch2开发网站
<ulink url="http://www.sai.msu.su/~megera/postgres/gist/tsearch/V2/"></ulink>
</para>
 </sect2>

 <sect2>
  <!--
  <title>Authors</title>
  -->
  <title>作者</title>
  
<para>
   Oleg Bartunov <email>oleg@sai.msu.su</email>, Moscow, Moscow University, Russia
  </para>

<para>
   Teodor Sigaev <email>teodor@sigaev.ru</email>, Moscow, Delta-Soft Ltd.,Russia
  </para>

  <!--
<para>
   Documentation: Christopher Kings-Lynne
  </para>
-->
<para>
文档：Christopher Kings-Lynne
</para>
  <!--
<para>
   This module is sponsored by Delta-Soft Ltd., Moscow, Russia.
  </para>
-->
<para>
这个模块是由Delta-Soft Ltd., Moscow, Russia赞助的。
</para>
 </sect2>

</sect1>
