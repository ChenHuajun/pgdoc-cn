<!-- doc/src/sgml/xplang.sgml -->

 <chapter id="xplang">
 <!--
  <title>Procedural Languages</title>
-->
  <title>过程语言</title>
  
  <indexterm zone="xplang">
   <primary>procedural language</primary>
  </indexterm>

  <!--
<para>
   <productname>PostgreSQL</productname> allows user-defined functions
   to be written in other languages besides SQL and C.  These other
   languages are generically called <firstterm>procedural
   languages</firstterm> (<acronym>PL</>s).  For a function
   written in a procedural language, the database server has
   no built-in knowledge about how to interpret the function's source
   text. Instead, the task is passed to a special handler that knows
   the details of the language.  The handler could either do all the
   work of parsing, syntax analysis, execution, etc. itself, or it
   could serve as <quote>glue</quote> between
   <productname>PostgreSQL</productname> and an existing implementation
   of a programming language.  The handler itself is a
   C language function compiled into a shared object and
   loaded on demand, just like any other C function.
  </para>
-->
<para>
   <productname>PostgreSQL</productname>允许用户定义的函数使用SQL和C之外的语言编写。
   通常这些额外的语言叫<firstterm>过程语言</firstterm>(<acronym>PL</>s)。
   如果用一种过程语言书写了一个函数，
   那么数据库服务器没有任何内建的办法解析该函数的源文本。
   实际上这些任务都传递给一个知道如何处理这些细节的处理器处理。
   这个处理器既可以自己做所有的分析,语法分析，执行等工作，
   也可以充当<productname>PostgreSQL</productname>和一种现有的编程语言实现之间的<quote>胶水</quote>。
   处理器本身是一个 C 语言函数，它被编译成共享对象并且在需要的时候加载，
   就像其它 C 函数一样。
</para>

  <!--
<para>
   There are currently four procedural languages available in the
   standard <productname>PostgreSQL</productname> distribution:
   <application>PL/pgSQL</application> (<xref linkend="plpgsql">),
   <application>PL/Tcl</application> (<xref linkend="pltcl">),
   <application>PL/Perl</application> (<xref linkend="plperl">), and
   <application>PL/Python</application> (<xref linkend="plpython">).
   There are additional procedural languages available that are not
   included in the core distribution. <xref linkend="external-projects">
   has information about finding them. In addition other languages can
   be defined by users; the basics of developing a new procedural
   language are covered in <xref linkend="plhandler">.
  </para>
-->
<para>
   目前在标准的<productname>PostgreSQL</productname>发布里有四种过程语言可用：
   <application>PL/pgSQL</application> (<xref linkend="plpgsql">),
   <application>PL/Tcl</application> (<xref linkend="pltcl">),
   <application>PL/Perl</application> (<xref linkend="plperl">)和
   <application>PL/Python</application> (<xref linkend="plpython">)。
   还有几种额外的过程语言没有包含在核心发布里。<xref linkend="external-projects">里面有如何找到它们的信息。
   用户可以定义其它语言。开发一种新的过程语言的基本信息在<xref linkend="plhandler">里介绍。
</para>

  <sect1 id="xplang-install">
  <!--
   <title>Installing Procedural Languages</title>
   -->
   <title>安装过程语言</title>

   <!--
<para>
    A procedural language must be <quote>installed</quote> into each
    database where it is to be used.  But procedural languages installed in
    the database <literal>template1</> are automatically available in all
    subsequently created databases, since their entries in
    <literal>template1</> will be copied by <command>CREATE DATABASE</>.
    So the database administrator can
    decide which languages are available in which databases and can make
    some languages available by default if he chooses.
   </para>
-->
<para>
   如果你要使用某种过程语言，那么你必须把它<quote>安装</quote>到要使用它的数据库里。
   不过那些安装到数据库<literal>template1</>里的过程语言会自动在随后创建的数据库中安装。
   因为<literal>template1</>中的目录通过<command>CREATE DATABASE</>进行拷贝，
   因此数据库管理员可以决定哪个数据库可以使用哪种语言，
   以及决定缺省时可以使用哪些语言。
</para>

   
<para>
    <!--
    For the languages supplied with the standard distribution, it is
    only necessary to execute <command>CREATE EXTENSION</>
    <replaceable>language_name</> to install the language into the
    current database.  Alternatively, the program <xref
    linkend="app-createlang"> can be used to do this from the shell
    command line.  For example, to install the language
    <application>PL/Perl</application> into the database
    <literal>template1</>, use:
-->
对于那些随着标准版本发布的语言，
只需要使用<command>CREATE EXTENSION</>
    <replaceable>language_name</>把语言安装到当前数据库中即可。
另外，也可以使用<xref linkend="app-createlang">程序在shell命令行上安装语言。
比如，要将<application>PL/Perl</application>安装到<literal>template1</>数据库中，可以使用：

<programlisting>
createlang plperl template1
</programlisting>
    <!--
    The manual procedure described below is only recommended for
    installing languages that have not been packaged as extensions.
    -->
推荐下面描述的手工程序来安装没有作为扩展包装的定制语言。
   </para>

   <procedure>
    <title>
<!--
     Manual Procedural Language Installation
 -->
 手工安装过程语言
    </title>

    <!--
<para>
     A procedural language is installed in a database in five steps,
     which must be carried out by a database superuser.  In most cases
     the required SQL commands should be packaged as the installation script
     of an <quote>extension</>, so that <command>CREATE EXTENSION</> can be
     used to execute them.
    </para>
-->
<para>
    一个过程语言是按五个步骤安装到数据库里面去的，
这些任务必须由数据库超级用户执行。
在大多数情况下所需的SQL命令应该被打包成<quote>扩展</>的安装脚本，
因此<command>CREATE EXTENSION</>可以用于执行它们。
</para>

    <step performance="required" id="xplang-install-cr1">
     <!--
<para>
      The shared object for the language handler must be compiled and
      installed into an appropriate library directory.  This works in the same
      way as building and installing modules with regular user-defined C
      functions does; see <xref linkend="dfunc">.  Often, the language
      handler will depend on an external library that provides the actual
      programming language engine; if so, that must be installed as well.
     </para>
-->
<para>
    必须编译和安装该语言处理器的共享对象并安装到一个合适的库目录中。
方法和安装用户定义的 C 函数的方法(<xref linkend="dfunc">)一样。通常，
语言处理器需要外部库提供实际的引擎；如果是这样，
那么这些库也必须安装。
</para>
    </step>

    <step performance="required" id="xplang-install-cr2">
     
<para>
      <!--
      The handler must be declared with the command
  -->
  处理器必须使用下面的命令声明
  
<synopsis>
CREATE FUNCTION <replaceable>handler_function_name</replaceable>()
    RETURNS language_handler
    AS '<replaceable>path-to-shared-object</replaceable>'
    LANGUAGE C;
</synopsis>
     <!--
      The special return type of <type>language_handler</type> tells
      the database system that this function does not return one of
      the defined <acronym>SQL</acronym> data types and is not directly usable
      in <acronym>SQL</acronym> statements.
  -->
  <type>language_handler</type>的返回类型告诉数据库系统该函数并不返回任何已定义的<acronym>SQL</acronym>数据类型，
  并且不能在<acronym>SQL</acronym>语句中被直接使用。
     </para>

 </step>

    <step performance="optional" id="xplang-install-cr3">
     
<para>
     <!--
      Optionally, the language handler can provide an <quote>inline</>
      handler function that executes anonymous code blocks
      (<xref linkend="sql-do"> commands)
      written in this language.  If an inline handler function
      is provided by the language, declare it with a command like
  -->
  可选步骤，语言处理器可以提供一个<quote>内置</>函数，
  这个函数执行使用这种语言编写的匿名代码块（<xref linkend="sql-do">命令）。
  如果通过该语言提供一个内置处理函数，那么用下面的命令声明：
<synopsis>
CREATE FUNCTION <replaceable>inline_function_name</replaceable>(internal)
    RETURNS void
    AS '<replaceable>path-to-shared-object</replaceable>'
    LANGUAGE C;
</synopsis>
     </para>

    </step>

    <step performance="optional" id="xplang-install-cr4">
     
<para>
     <!--
      Optionally, the language handler can provide a <quote>validator</>
      function that checks a function definition for correctness without
      actually executing it.  The validator function is called by
      <command>CREATE FUNCTION</> if it exists.  If a validator function
      is provided by the language, declare it with a command like
  -->
  可选步骤，语言处理器可以提供一个<quote>验证器</>函数，
  这个函数为没有实际执行它的正确性而检查函数定义。
  如果存在的话，通过<command>CREATE FUNCTION</>调用验证函数。
  如果通过这种语言提供了验证函数，那么用下面的命令声明 
<synopsis>
CREATE FUNCTION <replaceable>validator_function_name</replaceable>(oid)
    RETURNS void
    AS '<replaceable>path-to-shared-object</replaceable>'
    LANGUAGE C STRICT;
</synopsis>
     </para>

    </step>    

    <step performance="required" id="xplang-install-cr5">
     
<para>
     <!--
      Finally, the PL must be declared with the command
  -->
  最后，PL必须通过下面的命令声明
<synopsis>
CREATE <optional>TRUSTED</optional> <optional>PROCEDURAL</optional> LANGUAGE <replaceable>language-name</replaceable>
    HANDLER <replaceable>handler_function_name</replaceable>
    <optional>INLINE <replaceable>inline_function_name</replaceable></optional>
    <optional>VALIDATOR <replaceable>validator_function_name</replaceable></optional> ;
</synopsis>
      <!--
      The optional key word <literal>TRUSTED</literal> specifies that
      the language does not grant access to data that the user would
      not otherwise have.  Trusted languages are designed for ordinary
      database users (those without superuser privilege) and allows them
      to safely create functions and trigger
      procedures. Since PL functions are executed inside the database
      server, the <literal>TRUSTED</literal> flag should only be given
      for languages that do not allow access to database server
      internals or the file system. The languages
      <application>PL/pgSQL</application>,
      <application>PL/Tcl</application>, and
      <application>PL/Perl</application>
      are considered trusted; the languages
      <application>PL/TclU</application>,
      <application>PL/PerlU</application>, and
      <application>PL/PythonU</application>
      are designed to provide unlimited functionality and should
      <emphasis>not</emphasis> be marked trusted.
  -->
  可选关键字<literal>TRUSTED</literal>指明该语言不授予访问用户不拥有的数据的权限，
  为一个没有超级用户权限的普通数据库用户设计可信任语言，
  并且允许他们安全地使用这种语言创建函数和触发器过程。
  因为 PL 函数在数据库服务器中执行，
  所以<literal>TRUSTED</literal>标志应该只是用于那些不允许访问数据库服务器内部或文件系统的语言。
  <application>PL/pgSQL</application>,
      <application>PL/Tcl</application>和
      <application>PL/Perl</application>语言都是可信的。<application>PL/TclU</application>,
      <application>PL/PerlU</application>和
      <application>PL/PythonU</application> 
  都被设计成提供无限的功能，因此<emphasis>不应该</emphasis>标记为可信。
  
     </para>
    </step>
   </procedure>

   <!--
<para>
    <xref linkend="xplang-install-example"> shows how the manual
    installation procedure would work with the language
    <application>PL/Perl</application>.
   </para>
-->
<para>
   <xref linkend="xplang-install-example">显示了如何手工安装<application>PL/Perl</application>语言。
</para>

   <example id="xplang-install-example">
   <!--
    <title>Manual Installation of <application>PL/Perl</application></title>
-->
<title>手工安装<application>PL/Perl</application></title>

    
<para>
      <!--
      The following command tells the database server where to find the
      shared object for the <application>PL/Perl</application> language's call
      handler function:
      -->
  下面的命令告诉数据库服务器哪里才能找到用于<application>PL/Perl</application>语言的调用处理器函数的共享对象。
<programlisting>
CREATE FUNCTION plperl_call_handler() RETURNS language_handler AS
    '$libdir/plperl' LANGUAGE C;
</programlisting>
     </para>

     
<para>
    <!--
      <application>PL/Perl</application> has an inline handler function
      and a validator function, so we declare those too:
    -->
    <application>PL/Perl</application>有一个内置处理函数和验证函数，因此我们也要声明它们:
<programlisting>
CREATE FUNCTION plperl_inline_handler(internal) RETURNS void AS
    '$libdir/plperl' LANGUAGE C;

CREATE FUNCTION plperl_validator(oid) RETURNS void AS
    '$libdir/plperl' LANGUAGE C STRICT;
</programlisting>
     </para>


     
<para>
     <!--
      The command:
  -->
  命令：
<programlisting>
CREATE TRUSTED PROCEDURAL LANGUAGE plperl
    HANDLER plperl_call_handler
    INLINE plperl_inline_handler
    VALIDATOR plperl_validator;
</programlisting>
    <!--
      then defines that the previously declared functions
      should be invoked for functions and trigger procedures where the
      language attribute is <literal>plperl</literal>.
 -->
 声明了前面所定义的函数应该被那些调用语言属性是<literal>plperl</literal>的
 函数或触发器过程使用。
     </para>

  </example>

   <!--
<para>
    In a default <productname>PostgreSQL</productname> installation,
    the handler for the <application>PL/pgSQL</application> language
    is built and installed into the <quote>library</quote>
    directory; furthermore, the <application>PL/pgSQL</application> language
    itself is installed in all databases.
    If <application>Tcl</> support is configured in, the handlers for
    <application>PL/Tcl</> and <application>PL/TclU</> are built and installed
    in the library directory, but the language itself is not installed in any
    database by default.
    Likewise, the <application>PL/Perl</> and <application>PL/PerlU</>
    handlers are built and installed if Perl support is configured, and the
    <application>PL/PythonU</> handler is installed if Python support is
    configured, but these languages are not installed by default.
   </para>
-->
<para>
   在缺省的<productname>PostgreSQL</productname>安装里，
   <application>PL/pgSQL</application>语言的处理器是制作并安装到<quote>library</quote>目录中去的。
   进一步来说，<application>PL/pgSQL</application>语言自身安装到所有数据库中，
   如果配置了<application>Tcl</>支持，那么<application>PL/Tcl</>和<application>PL/TclU</>
   的处理器也都被编译并安装到同一个库目录中。
   但是语言自身缺省不安装到任何数据库中，类似的，
   如果配置了Perl支持，则<application>PL/Perl</>和<application>PL/PerlU</>的处理器也都编译并且安装。
   并且如果配置了Python支持，则安装<application>PL/PythonU</>处理器。
   但是这些语言缺省不安装。
</para>

  </sect1>

</chapter>
