<!-- doc/src/sgml/uuid-ossp.sgml -->

<sect1 id="uuid-ossp" xreflabel="uuid-ossp">
 <title>uuid-ossp</title>

 <indexterm zone="uuid-ossp">
  <primary>uuid-ossp</primary>
 </indexterm>

 <para>
   <filename>uuid-ossp</>模块提供了一些函数用来生成通用唯一识别码(UUID)，
  它支持几种 UUID 产生的标准算法。同时它还提供了一些函数用来产生某些特定
  的UUID常量。
 </para>

 <para>
   这个模块依赖于 OSSP UUID 库，
   <ulink url="http://www.ossp.org/pkg/lib/uuid/"></ulink>. 
 </para>

 <sect2>
  <title><literal>uuid-ossp</literal> 函数</title>

  <para>
   <xref linkend="uuid-ossp-functions"> 中的函数用来产生 UUID。
   相关标准 ITU-T Rec. X.667, ISO/IEC 9834-8:2005 和 RFC
   4122 定义了四种生成 UUID 的算法, 分别在版本
     1, 3, 4 和5中定义(没用版本2算法)每个算法适合于不同种类的应用使用。
  </para>

  <table id="uuid-ossp-functions">
   <title>UUID 生成函数</title>
   <tgroup cols="2">
    <thead>
     <row>
      <entry>函数</entry>
      <entry>描述</entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry><function>uuid_generate_v1()</function><indexterm><primary>uuid_generate_v1</primary></indexterm></entry>
      <entry>
<para>
  这个函数生成版本1的 UUID。它的算法使用了计算机的MAC地址和时间戳。注意这种
         UUID 泄露了生成它的计算机标识和生成它的时间，所以它可能不太适合对安全性要求较高的应用。
       </para>
      </entry>
     </row>
     <row>
      <entry><function>uuid_generate_v1mc()</function><indexterm><primary>uuid_generate_v1mc</primary></indexterm></entry>
      <entry>
<para>
  这个函数生成一个版本1的 UUID，但是使用一个随机多播 MAC
          地址而不是计算机的真实的 MAC 地址。
       </para>
      </entry>
     </row>
     <row>
      <entry><function>uuid_generate_v3(namespace uuid, name text)</function><indexterm><primary>uuid_generate_v3</primary></indexterm></entry>
      <entry>
<para>
  这个函数使用给定的输入名字(name)在给定的命名空间(namespace)
        中生成一个版本3的 UUID。给定的命名空间应该是调用表
        <xref linkend="uuid-ossp-constants"> 中的函数
        <function>uuid_ns_*()</>返回的常量。(理论上他可能是任何UUID)
        参数 name 是一个选定命名空间(namespace)中的标识符。
       </para>

       <para>
        例如:

<programlisting>
SELECT uuid_generate_v3(uuid_ns_url(), 'http://www.postgresql.org');
</programlisting>

        参数 name会被使用 MD5 算法做哈希，所以从产生的 UUID 中不可能反向获得明文。
        利用这个方法生成的 UUID 不需要随机算法不依赖任何运行相关的环境因素，因此生成过程是可重复的。
       </para>
      </entry>
     </row>
     <row>
      <entry><literal>uuid_generate_v4()</literal></entry>
      <entry>
       <para>
 这个函数生成一个版本4的 UUID，它完全依靠随机数。
       </para>
      </entry>
     </row>
     <row>
      <entry><literal>uuid_generate_v5(namespace uuid, name text)</literal></entry>
      <entry>
       <para>
 这个函数生成一个版本5的 UUID，它个工作过程类似于版本3的
         UUID，但是它使用的 SHA-1 的哈希算法。因为 SHA-1 算法被认为比 MD5
         算法更安全，所有应该尽量使用版本 5 而不版本 3。
       </para>
      </entry>
     </row>
    </tbody>
   </tgroup>
  </table>

  <table id="uuid-ossp-constants">
   <title>返回 UUID 常量的函数</title>
   <tgroup cols="2">
    <tbody>
     <row>
      <entry><literal>uuid_nil()</literal></entry>
      <entry>
       <para>
        一个 <quote>nil</> UUID 常量, 它不应该看作一个真正的 UUID。
       </para>
      </entry>
     </row>
     <row>
      <entry><literal>uuid_ns_dns()</literal></entry>
      <entry>
       <para>
 代表 DNS 命令空间的 UUID 常量。
       </para>
      </entry>
     </row>
     <row>
      <entry><literal>uuid_ns_url()</literal></entry>
      <entry>
<para>
  代表 URL 命名空间的 UUID 常量。
       </para>
      </entry>
     </row>
     <row>
      <entry><literal>uuid_ns_oid()</literal></entry>
      <entry>
       <para>
 代表 ISO 对象标识符(OID)命名空间的 UUID 常量。(它是 ASN.1 的 OID，和 <productname>PostgreSQL</> 用的 OID 没有关系）。
       </para>
      </entry>
     </row>
     <row>
      <entry><literal>uuid_ns_x500()</literal></entry>
      <entry>
<para>
  代表 X.500 识别名字(DN)命名空间的 UUID 常量
       </para>
      </entry>
     </row>
    </tbody>
   </tgroup>
  </table>
 </sect2>

 <sect2>
  <title>作者</title>

  <para>
   Peter Eisentraut <email>peter_e@gmx.net</email>
  </para>

 </sect2>

</sect1>
