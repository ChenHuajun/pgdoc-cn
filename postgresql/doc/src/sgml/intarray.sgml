<!-- doc/src/sgml/intarray.sgml -->

<sect1 id="intarray" xreflabel="intarray">
 <title>intarray</title>

 <indexterm zone="intarray">
  <primary>intarray</primary>
 </indexterm>

 <!--
<para>
  The <filename>intarray</> module provides a number of useful functions
  and operators for manipulating null-free arrays of integers.
  There is also support for indexed searches using some of the operators.
 </para>
-->
<para>
<filename>intarray</>模块为操作整数的null-free数组提供一些有用的函数和操作符。
也支持使用其中的一些操作符执行索引搜索。
</para>

 <!--
<para>
  All of these operations will throw an error if a supplied array contains any
  NULL elements.
 </para>
-->
<para>
如果提供的数组包含任何空元素，那么所有这些操作符都将抛出一个错误。
</para>

 <!--
<para>
  Many of these operations are only sensible for one-dimensional arrays.
  Although they will accept input arrays of more dimensions, the data is
  treated as though it were a linear array in storage order.
 </para>
-->
<para>
这些操作符中的一些只对一维数组敏感。尽管他们将接受多个维数的输入数组，
数据被按照存储的顺序当做一维数组。
</para>

 <sect2>
  <!--
  <title><filename>intarray</> Functions and Operators</title>
  -->
  <title><filename>intarray</> 函数和操作符</title>

  <!--
<para>
   The functions provided by the <filename>intarray</filename> module
   are shown in <xref linkend="intarray-func-table">, the operators
   in <xref linkend="intarray-op-table">.
  </para>
-->
<para>
<filename>intarray</filename>模块提供的函数显示在<xref linkend="intarray-func-table">里，
操作符显示在<xref linkend="intarray-op-table">里。
</para>

  <table id="intarray-func-table">
   <!-- 
   <title><filename>intarray</> Functions</title>
   -->
   <title><filename>intarray</> 函数</title>

   <tgroup cols="5">
    <thead>
     <row>
      <!-- 
  <entry>Function</entry>
      <entry>Return Type</entry>
      <entry>Description</entry>
      <entry>Example</entry>
      <entry>Result</entry> 
  -->
  <entry>函数</entry>
      <entry>返回类型</entry>
      <entry>描述</entry>
      <entry>示例</entry>
      <entry>结果</entry>
     </row>
    </thead>

    <tbody>
     <row>
      <entry><function>icount(int[])</function><indexterm><primary>icount</primary></indexterm></entry>
      <entry><type>int</type></entry>
      <!--
  <entry>number of elements in array</entry>
  -->
  <entry>数组中元素的个数</entry>
      <entry><literal>icount('{1,2,3}'::int[])</literal></entry>
      <entry><literal>3</literal></entry>
     </row>

     <row>
      <entry><function>sort(int[], text dir)</function><indexterm><primary>sort</primary></indexterm></entry>
      <entry><type>int[]</type></entry>
      <!--
  <entry>sort array &mdash; <parameter>dir</> must be <literal>asc</> or <literal>desc</></entry>
  -->
  <entry>给数组排序 &mdash; <parameter>dir</> 必须为 <literal>asc</> 或 <literal>desc</></entry>
      <entry><literal>sort('{1,2,3}'::int[], 'desc')</literal></entry>
      <entry><literal>{3,2,1}</literal></entry>
     </row>

     <row>
      <entry><function>sort(int[])</function></entry>
      <entry><type>int[]</type></entry>
      <!--
  <entry>sort in ascending order</entry>
  -->
  <entry>以升序顺序排序</entry>
      <entry><literal>sort(array[11,77,44])</literal></entry>
      <entry><literal>{11,44,77}</literal></entry>
     </row>

     <row>
      <entry><function>sort_asc(int[])</function><indexterm><primary>sort_asc</primary></indexterm></entry>
      <entry><type>int[]</type></entry>
      <!--
  <entry>sort in ascending order</entry>
  -->
  <entry>以升序顺序排序</entry>
      <entry><literal></literal></entry>
      <entry><literal></literal></entry>
     </row>

     <row>
      <entry><function>sort_desc(int[])</function><indexterm><primary>sort_desc</primary></indexterm></entry>
      <entry><type>int[]</type></entry>
      <!--
  <entry>sort in descending order</entry>
  -->
  <entry>以降序顺序排序</entry>
      <entry><literal></literal></entry>
      <entry><literal></literal></entry>
     </row>

     <row>
      <entry><function>uniq(int[])</function><indexterm><primary>uniq</primary></indexterm></entry>
      <entry><type>int[]</type></entry>
      <!--
  <entry>remove adjacent duplicates</entry>
  -->
  <entry>删除相邻的重复</entry>
      <entry><literal>uniq(sort('{1,2,3,2,1}'::int[]))</literal></entry>
      <entry><literal>{1,2,3}</literal></entry>
     </row>

     <row>
      <entry><function>idx(int[], int item)</function><indexterm><primary>idx</primary></indexterm></entry>
      <entry><type>int</type></entry>
      <!-- 
  <entry>index of first element matching <parameter>item</> (0 if none)</entry> 
  -->
  <entry>匹配<parameter>item</>的第一个元素中的索引 (如果没有则为0)</entry>
      <entry><literal>idx(array[11,22,33,22,11], 22)</literal></entry>
      <entry><literal>2</literal></entry>
     </row>

     <row>
      <entry><function>subarray(int[], int start, int len)</function><indexterm><primary>subarray</primary></indexterm></entry>
      <entry><type>int[]</type></entry>
      <!--
  <entry>portion of array starting at position <parameter>start</>, <parameter>len</> elements</entry>
  -->
  <entry>在 <parameter>start</> 位置开始的, <parameter>len</> 个元素的数组的一部分</entry>
      <entry><literal>subarray('{1,2,3,2,1}'::int[], 2, 3)</literal></entry>
      <entry><literal>{2,3,2}</literal></entry>
     </row>

     <row>
      <entry><function>subarray(int[], int start)</function></entry>
      <entry><type>int[]</type></entry>
      <!--
  <entry>portion of array starting at position <parameter>start</></entry>
  -->
  <entry>在 <parameter>start</> 位置开始的数组的一部分</entry>
      <entry><literal>subarray('{1,2,3,2,1}'::int[], 2)</literal></entry>
      <entry><literal>{2,3,2,1}</literal></entry>
     </row>

     <row>
      <entry><function>intset(int)</function><indexterm><primary>intset</primary></indexterm></entry>
      <entry><type>int[]</type></entry>
      <!-- 
  <entry>make single-element array</entry> 
  -->
  <entry>制作单个元素的数组</entry>
      <entry><literal>intset(42)</literal></entry>
      <entry><literal>{42}</literal></entry>
     </row>

    </tbody>
   </tgroup>
  </table>

  <table id="intarray-op-table">
   <!--
   <title><filename>intarray</> Operators</title>
   -->
   <title><filename>intarray</> 操作符</title>

   <tgroup cols="3">
    <thead>
     <row>
      <!--
  <entry>Operator</entry>
      <entry>Returns</entry>
      <entry>Description</entry>
  -->
  <entry>操作符</entry>
      <entry>返回</entry>
      <entry>描述</entry>
     </row>
    </thead>

    <tbody>
     <row>
      <entry><literal>int[] &amp;&amp; int[]</literal></entry>
      <entry><type>boolean</type></entry>
      <!--
  <entry>overlap &mdash; <literal>true</> if arrays have at least one common element</entry>
  -->
  <entry>重复 &mdash; 如果数组至少有一个共同元素则为<literal>true</> </entry>
     </row>
     <row>
      <entry><literal>int[] @&gt; int[]</literal></entry>
      <entry><type>boolean</type></entry>
      <!-- 
  <entry>contains &mdash; <literal>true</> if left array contains right array</entry>
  -->
  <entry>包含 &mdash; 如果左边的数组包含右边的数组则为<literal>true</> </entry>
     </row>
     <row>
      <entry><literal>int[] &lt;@ int[]</literal></entry>
      <entry><type>boolean</type></entry>
      <!--
  <entry>contained &mdash; <literal>true</> if left array is contained in right array</entry>
  -->
  <entry>包含于 &mdash; 如果左边的数组包含于右边的数组则为<literal>true</> </entry>
     </row>
     <row>
      <entry><literal># int[]</literal></entry>
      <entry><type>int</type></entry>
      <!-- 
  <entry>number of elements in array</entry>
  -->
  <entry>数组中元素的个数</entry>
     </row>
     <row>
      <entry><literal>int[] # int</literal></entry>
      <entry><type>int</type></entry>
      <!--
  <entry>index (same as <function>idx</> function)</entry>
  -->
  <entry>索引 (和<function>idx</> 函数相同)</entry>
     </row>
     <row>
      <entry><literal>int[] + int</literal></entry>
      <entry><type>int[]</type></entry>
      <!-- 
  <entry>push element onto array (add it to end of array)</entry>
  -->
  <entry>将元素推入数组中(将元素添加到数组的末尾)</entry>
     </row>
     <row>
      <entry><literal>int[] + int[]  </literal></entry>
      <entry><type>int[]</type></entry>
      <!--
  <entry>array concatenation (right array added to the end of left one)</entry>
  -->
  <entry>数组串联(右边的数组添加到左边的数组的后面)</entry>
     </row>
     <row>
      <entry><literal>int[] - int</literal></entry>
      <entry><type>int[]</type></entry>
      <!-- 
  <entry>remove entries matching right argument from array</entry>
  -->
  <entry>删除匹配右边数组中元素的项</entry>
     </row>
     <row>
      <entry><literal>int[] - int[]</literal></entry>
      <entry><type>int[]</type></entry>
      <!--
  <entry>remove elements of right array from left</entry>
  -->
  <entry>从左边数组中删除右边数组中的元素</entry>
     </row>
     <row>
      <entry><literal>int[] | int</literal></entry>
      <entry><type>int[]</type></entry>
      <!-- 
  <entry>union of arguments</entry>
  -->
  <entry>参数的并集</entry>
     </row>
     <row>
      <entry><literal>int[] | int[]</literal></entry>
      <entry><type>int[]</type></entry>
      <!--
  <entry>union of arrays</entry>
  -->
  <entry>数组的并集</entry>
     </row>
     <row>
      <entry><literal>int[] &amp; int[]</literal></entry>
      <entry><type>int[]</type></entry>
      <!--
  <entry>intersection of arrays</entry>
  -->
  <entry>数组的交集</entry>
     </row>
     <row>
      <entry><literal>int[] @@ query_int</literal></entry>
      <entry><type>boolean</type></entry>
      <!--
  <entry><literal>true</> if array satisfies query (see below)</entry>
  -->
  <entry>如果数组满足查询则为<literal>true</> (见下文)</entry>
     </row>
     <row>
      <entry><literal>query_int ~~ int[]</literal></entry>
      <entry><type>boolean</type></entry>
      <!-- 
  <entry><literal>true</> if array satisfies query (commutator of <literal>@@</>)</entry>
  -->
  <entry>如果数组满足查询则为<literal>true</> (<literal>@@</>的交换子)</entry>
     </row>
    </tbody>
   </tgroup>
  </table>

  <!--
<para>
   (Before PostgreSQL 8.2, the containment operators <literal>@&gt;</> and
   <literal>&lt;@</> were respectively called <literal>@</> and <literal>~</>.
   These names are still available, but are deprecated and will eventually be
   retired.  Notice that the old names are reversed from the convention
   formerly followed by the core geometric data types!)
  </para>
-->
<para>
（PostgreSQL 8.2之前，包含操作符<literal>@&gt;</>和<literal>&lt;@</>
分别称为<literal>@</> 和 <literal>~</>。这些名字仍然可以使用，但是已经废弃了并且最终会被撤销。
请注意，旧的名字从大会移除，之前跟随着核心几何数据类型！）
</para>

  <!--
<para>
   The operators <literal>&amp;&amp;</>, <literal>@&gt;</> and
   <literal>&lt;@</> are equivalent to <productname>PostgreSQL</>'s built-in
   operators of the same names, except that they work only on integer arrays
   that do not contain nulls, while the built-in operators work for any array
   type.  This restriction makes them faster than the built-in operators
   in many cases.
  </para>
-->
<para>
操作符<literal>&amp;&amp;</>, <literal>@&gt;</> 和 <literal>&lt;@</>等同于
<productname>PostgreSQL</>同名的内建操作符，除了它们只工作于整数数组不包含空值，
而内建操作符工作于任意数组类型。这个限制使它们在任何情况下都比内建操作符快的多。
</para>

  <!--
<para>
   The <literal>@@</> and <literal>~~</> operators test whether an array
   satisfies a <firstterm>query</>, which is expressed as a value of a
   specialized data type <type>query_int</>.  A <firstterm>query</>
   consists of integer values that are checked against the elements of
   the array, possibly combined using the operators <literal>&amp;</>
   (AND), <literal>|</> (OR), and <literal>!</> (NOT).  Parentheses
   can be used as needed.  For example,
   the query <literal>1&amp;(2|3)</> matches arrays that contain 1
   and also contain either 2 or 3.
  </para>
-->
<para>
<literal>@@</> 和 <literal>~~</>操作符测试一个数组是否满足一个<firstterm>query</>，
该查询表示为一个专门的数据类型<type>query_int</>的值。<firstterm>query</>
由针对数组元素检查的整数值组成，可能混合使用操作符<literal>&amp;</>
(与), <literal>|</> (或), 和 <literal>!</> (非)。在需要时可以使用括号。
例如，查询<literal>1&amp;(2|3)</>匹配包含1也包含2或3的数组。
</para>
 </sect2>

 <sect2>
  <!--
  <title>Index Support</title>
  -->
  <title>索引支持</title>

  <!--
<para>
   <filename>intarray</> provides index support for the
   <literal>&amp;&amp;</>, <literal>@&gt;</>, <literal>&lt;@</>,
   and <literal>@@</> operators, as well as regular array equality.
  </para>
-->
<para>
<filename>intarray</>为<literal>&amp;&amp;</>, <literal>@&gt;</>, <literal>&lt;@</>,
和 <literal>@@</>操作符还有普通数组相等提供索引支持，
</para>

  <!--
<para>
   Two GiST index operator classes are provided:
   <literal>gist__int_ops</> (used by default) is suitable for
   small- to medium-size data sets, while
   <literal>gist__intbig_ops</> uses a larger signature and is more
   suitable for indexing large data sets (i.e., columns containing
   a large number of distinct array values).
   The implementation uses an RD-tree data structure with
   built-in lossy compression.
  </para>
-->
<para>
提供两个GiST索引操作符类：<literal>gist__int_ops</>（缺省使用）
适合于小到中等的数据集，而<literal>gist__intbig_ops</>
使用一个大的签名并且更适合于索引大的数据集（也就是，
包含大量不同数组值的字段）。该实现使用一个RD树数据结构和内建的有损压缩。
</para>

  <!--
<para>
   There is also a non-default GIN operator class
   <literal>gin__int_ops</> supporting the same operators.
  </para>
-->
<para>
还有一个非缺省的GIN操作符类<literal>gin__int_ops</>支持相同的操作符。
</para>

  <!--
<para>
   The choice between GiST and GIN indexing depends on the relative
   performance characteristics of GiST and GIN, which are discussed elsewhere.
   As a rule of thumb, a GIN index is faster to search than a GiST index, but
   slower to build or update; so GIN is better suited for static data and GiST
   for often-updated data.
  </para>
-->
<para>
GiST和GIN索引的选择取决于GiST和GIN相关的性能特性，这个在别的地方讨论。
一般来说，GIN索引比GiST索引搜索起来更快一些，而建立或更新要慢一些；
所以GIN更适合于静态数据，而GiST更适合于经常更新的数据。
</para>
 </sect2>

 <sect2>
  <!--
  <title>Example</title>
  -->
  <title>示例</title>

<programlisting>
-- <!-- a message can be in one or more <quote>sections</> -->一个message可以在一个或多个<quote>sections</>中
CREATE TABLE message (mid INT PRIMARY KEY, sections INT[], ...);

-- <!-- create specialized index -->创建专门的索引
CREATE INDEX message_rdtree_idx ON message USING GIST (sections gist__int_ops);

-- <!-- select messages in section 1 OR 2 - OVERLAP operator -->在section 1或2中选择message -OVERLAP操作符
SELECT message.mid FROM message WHERE message.sections &amp;&amp; '{1,2}';

-- <!-- select messages in sections 1 AND 2 - CONTAINS operator -->在section 1和2中选择message -CONTAINS操作符
SELECT message.mid FROM message WHERE message.sections @&gt; '{1,2}';

-- <!-- the same, using QUERY operator -->相同的，使用QUERY操作符
SELECT message.mid FROM message WHERE message.sections @@ '1&amp;2'::query_int;
</programlisting>
 </sect2>

 <sect2>
  <!--
  <title>Benchmark</title>
  -->
  <title>基准</title>

  <!--
<para>
   The source directory <filename>contrib/intarray/bench</> contains a
   benchmark test suite.  To run:
  </para>
-->
<para>
源目录<filename>contrib/intarray/bench</>包含一个基准测试套件。运行：
</para>

<programlisting>
cd .../bench
createdb TEST
psql TEST &lt; ../_int.sql
./create_test.pl | psql TEST
./bench.pl
</programlisting>

  <!--
<para>
   The <filename>bench.pl</> script has numerous options, which
   are displayed when it is run without any arguments.
  </para>
-->
<para>
<filename>bench.pl</>脚本有许多选项，当它不带任何参数的运行时显示。
</para>
 </sect2>

 <sect2>
  <!--
  <title>Authors</title>
  -->
  <title>作者</title>

  <!--
<para>
   All work was done by Teodor Sigaev (<email>teodor@sigaev.ru</email>) and
   Oleg Bartunov (<email>oleg@sai.msu.su</email>). See
   <ulink url="http://www.sai.msu.su/~megera/postgres/gist/"></ulink> for
   additional information. Andrey Oktyabrski did a great work on adding new
   functions and operations.
  </para>
-->
<para>
所有工作都是Teodor Sigaev (<email>teodor@sigaev.ru</email>)和
Oleg Bartunov (<email>oleg@sai.msu.su</email>)完成的。参阅
<ulink url="http://www.sai.msu.su/~megera/postgres/gist/"></ulink>获取额外的信息。
Andrey Oktyabrski在添加新的函数和操作符上做了一个伟大的工作。
</para>
 </sect2>

</sect1>
