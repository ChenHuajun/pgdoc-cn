<!-- doc/src/sgml/rowtypes.sgml -->

<sect1 id="rowtypes">
 <!-- <title>Composite Types</title> -->
<title>复合类型</title>
 <indexterm>
  <primary>composite type</primary>
 </indexterm>

 <indexterm>
  <primary>row type</primary>
 </indexterm>

 <!--
<para>
  A <firstterm>composite type</> represents the structure of a row or record;
  it is essentially just a list of field names and their data types.
  <productname>PostgreSQL</productname> allows  composite types to be
  used in many of the same ways that simple types can be used.  For example, a
  column of a table can be declared to be of a composite type.
 </para>
-->
<para>
<firstterm>复合类型</>表示一行或者一条记录的结构；
它实际上只是一个字段名和它们的数据类型的列表。<productname>PostgreSQL</productname>
允许像简单数据类型那样使用复合类型。比如，一个表的某个字段可以声明为一个复合类型。
</para>

 <sect2>
  <!-- <title>Declaration of Composite Types</title> -->
<title>声明复合类型</title>

<para>
 <!--
  Here are two simple examples of defining composite types:
  -->
下面是两个定义复合类型的简单例子：  
<programlisting>
CREATE TYPE complex AS (
    r       double precision,
    i       double precision
);

CREATE TYPE inventory_item AS (
    name            text,
    supplier_id     integer,
    price           numeric
);
</programlisting>
<!--
  The syntax is comparable to <command>CREATE TABLE</>, except that only
  field names and types can be specified; no constraints (such as <literal>NOT
  NULL</>) can presently be included.  Note that the <literal>AS</> keyword
  is essential; without it, the system will think a different kind
  of <command>CREATE TYPE</> command is meant, and you will get odd syntax
  errors.
-->  
语法类似于<command>CREATE TABLE</>，只是这里只可以声明字段名字和类型；
目前不能声明约束(比如<literal>NOT NULL</>)。请注意<literal>AS</>关键字是很重要的；
没有它，系统会认为这是一个不同的<command>CREATE TYPE</>命令，
因此你会看到奇怪的语法错误。
 </para>

<para>
 <!--
  Having defined the types, we can use them to create tables:
-->
定义了类型，我们就可以用它创建表：
<programlisting>
CREATE TABLE on_hand (
    item      inventory_item,
    count     integer
);

INSERT INTO on_hand VALUES (ROW('fuzzy dice', 42, 1.99), 1000);
</programlisting>

<!--   or functions: -->
或者函数：
<programlisting>
CREATE FUNCTION price_extension(inventory_item, integer) RETURNS numeric
AS 'SELECT $1.price * $2' LANGUAGE SQL;

SELECT price_extension(item, 10) FROM on_hand;
</programlisting>

 </para>

<para>
 <!--
  Whenever you create a table, a composite type is also automatically
  created, with the same name as the table, to represent the table's
  row type.  For example, had we said:
-->
在你创建表的时候，也会自动创建一个复合类型，名字与表名字相同，
表示该表的行类型。比如，如果我们说过:
<programlisting>
CREATE TABLE inventory_item (
    name            text,
    supplier_id     integer REFERENCES suppliers,
    price           numeric CHECK (price &gt; 0)
);
</programlisting>
<!-- 
  then the same <literal>inventory_item</> composite type shown above would
  come into being as a
  byproduct, and could be used just as above.  Note however an important
  restriction of the current implementation: since no constraints are
  associated with a composite type, the constraints shown in the table
  definition <emphasis>do not apply</> to values of the composite type
  outside the table.  (A partial workaround is to use domain
  types as members of composite types.)
-->  
那么，和前面相同的<literal>inventory_item</>复合类型也会作为副产品创建，
并且可以和上面一样使用。不过，需要注意当前实现的一个重要限制：
因为现在还没有对复合类型实现约束，所以在表定义中显示的约束<emphasis>并不适用</>
于表之外的复合类型值。（一个部分绕开的办法是使用域类型作为复合类型的成员。）
 </para>

 </sect2>

 <sect2>
  <!-- <title>Composite Value Input</title> -->
<title>复合类型值输入</title>
  <indexterm>
   <primary>composite type</primary>
   <secondary>constant</secondary>
  </indexterm>
  
<para>
<!--
   To write a composite value as a literal constant, enclose the field
   values within parentheses and separate them by commas.  You can put double
   quotes around any field value, and must do so if it contains commas or
   parentheses.  (More details appear below.)  Thus, the general format of a
   composite constant is the following:
-->
要以文本常量书写复合类型值，在圆括弧里包围字段值并且用逗号分隔他们。
你可以在任何字段值周围放上双引号，如果值本身包含逗号或者圆括弧，
你必须用双引号括起(更多细节见下面)。因此，复合类型常量的一般格式如下：
<synopsis>
'( <replaceable>val1</replaceable> , <replaceable>val2</replaceable> , ... )'
</synopsis>
  <!-- 
  An example is: 
  -->
一个例子是:  
<programlisting>
'("fuzzy dice",42,1.99)'
</programlisting>
<!-- 
   which would be a valid value of the <literal>inventory_item</> type
   defined above.  To make a field be NULL, write no characters at all
   in its position in the list.  For example, this constant specifies
   a NULL third field: 
-->
如果<literal>inventory_item</>类型在前面已经定义了，那么这是一个合法的数值。
要让一个字段值是 NULL ，那么在列表里它的位置上不要写任何字符。比如，
下面这个常量在第三个字段声明一个 NULL ：
<programlisting>
'("fuzzy dice",42,)'
</programlisting>
   <!-- 
   If you want an empty string rather than NULL, write double quotes: 
   -->
   如果你想要一个空字符串，而不是 NULL ，写一对双引号：
<programlisting>
'("",42,)'
</programlisting>
   <!-- 
   Here the first field is a non-NULL empty string, the third is NULL. 
   -->
   这里的第一个字段是一个非 NULL 的空字符串，第三个字段是 NULL 
  </para>

  <!--
<para>
   (These constants are actually only a special case of
   the generic type constants discussed in <xref
   linkend="sql-syntax-constants-generic">.  The constant is initially
   treated as a string and passed to the composite-type input conversion
   routine.  An explicit type specification might be necessary.)
  </para>
-->
<para>
(这些常量实际上只是我们在<xref linkend="sql-syntax-constants-generic">
讨论的一般类型常量的一个特殊例子。这些常量一开始只是当作字符串，
然后传递给复合类型输入转换器。一个明确的类型声明可能是必须的。)
</para>

<para>
<!--
  The <literal>ROW</literal> expression syntax can also be used to
  construct composite values.  In most cases this is considerably
  simpler to use than the string-literal syntax since you don't have
  to worry about multiple layers of quoting.  We already used this
  method above:
-->
我们也可以用<literal>ROW</literal>表达式语法来构造复合类型值。
在大多数场合下，这种方法都比用字符串文本的语法更简单，因为你不用操心多重引号。
我们已经在上面使用了这种方法了：  
<programlisting>
ROW('fuzzy dice', 42, 1.99)
ROW('', 42, NULL)
</programlisting>
<!-- 
  The ROW keyword is actually optional as long as you have more than one
  field in the expression, so these can simplify to: 
-->
只要你在表达式里有超过一个字段，那么关键字 ROW 就实际上是可选的，
所以可以简化为:
<programlisting>
('fuzzy dice', 42, 1.99)
('', 42, NULL)
</programlisting>
<!-- 
  The <literal>ROW</> expression syntax is discussed in more detail in <xref
  linkend="sql-syntax-row-constructors">. 
-->
<literal>ROW</>表达式语法在<xref linkend="sql-syntax-row-constructors">里有更详细的讨论。
 </para>

 </sect2>

 <sect2>
  <!-- <title>Accessing Composite Types</title> -->
<title>访问复合类型</title>
<para>
<!-- 
  To access a field of a composite column, one writes a dot and the field
  name, much like selecting a field from a table name.  In fact, it's so
  much like selecting from a table name that you often have to use parentheses
  to keep from confusing the parser.  For example, you might try to select
  some subfields from our <literal>on_hand</> example table with something
  like: 
-->
要访问复合类型字段的一个域，我们写出一个点以及域的名字，
非常类似从一个表名字里选出一个字段。实际上，因为实在太像从表名字中选取字段，
所以我们经常需要用圆括弧来避免分析器混淆。比如，你可能需要从<literal>on_hand</>
例子表中选取一些子域，像下面这样：
<programlisting>
SELECT item.name FROM on_hand WHERE item.price &gt; 9.99;
</programlisting>

<!-- 
  This will not work since the name <literal>item</> is taken to be a table
  name, not a column name of <literal>on_hand</>, per SQL syntax rules.
  You must write it like this: 
-->
这样将不能工作，因为根据 SQL 语法，<literal>item</>是从一个表名字选取的，
而不是一个字段名字。你必须像下面这样写：
<programlisting>
SELECT (item).name FROM on_hand WHERE (item).price &gt; 9.99;
</programlisting>

<!-- 
  or if you need to use the table name as well (for instance in a multitable
  query), like this: 
-->
或者如果你也需要使用表名字(比如，在一个多表查询里)，那么这么写：
<programlisting>
SELECT (on_hand.item).name FROM on_hand WHERE (on_hand.item).price &gt; 9.99;
</programlisting>

<!-- 
  Now the parenthesized object is correctly interpreted as a reference to
  the <literal>item</> column, and then the subfield can be selected from it. 
-->
现在圆括弧对象正确地解析为一个指向<literal>item</>字段的引用，然后就可以从中选取子域。
 </para>

 <!--
<para>
  Similar syntactic issues apply whenever you select a field from a composite
  value.  For instance, to select just one field from the result of a function
  that returns a composite value, you'd need to write something like:

<programlisting>
SELECT (my_func(...)).field FROM ...
</programlisting>

  Without the extra parentheses, this will generate a syntax error.
 </para>
-->
<para>
类似的语法问题适用于在任何地点从一个复合类型值中查询一个域。比如，
要从一个返回复合类型值的函数中只选取一个字段，你需要写像下面这样的东西：
<programlisting>
SELECT (my_func(...)).field FROM ...
</programlisting>
如果没有额外的圆括弧，会产生一个语法错误。
</para>
 </sect2>

 <sect2>
  <!-- <title>Modifying Composite Types</title> -->
<title>修改复合类型</title>
 <!--
<para>
  Here are some examples of the proper syntax for inserting and updating
  composite columns.
  First, inserting or updating a whole column:

<programlisting>
INSERT INTO mytab (complex_col) VALUES((1.1,2.2));

UPDATE mytab SET complex_col = ROW(1.1,2.2) WHERE ...;
</programlisting>

  The first example omits <literal>ROW</>, the second uses it; we
  could have done it either way.
 </para>
-->
<para>
下面是一些插入和更新复合类型字段的正确语法。首先，插入或者更新整个字段：
<programlisting>
INSERT INTO mytab (complex_col) VALUES((1.1,2.2));

UPDATE mytab SET complex_col = ROW(1.1,2.2) WHERE ...;
</programlisting>
第一个例子省略了<literal>ROW</>，第二个使用它；两种方法都行。
</para>

 <!--
<para>
  We can update an individual subfield of a composite column:

<programlisting>
UPDATE mytab SET complex_col.r = (complex_col).r + 1 WHERE ...;
</programlisting>

  Notice here that we don't need to (and indeed cannot)
  put parentheses around the column name appearing just after
  <literal>SET</>, but we do need parentheses when referencing the same
  column in the expression to the right of the equal sign.
 </para>
-->
<para>
我们可以更新一个复合字段的独立子域：
<programlisting>
UPDATE mytab SET complex_col.r = (complex_col).r + 1 WHERE ...;
</programlisting>
请注意，这里我们不需要(实际上是不能)在<literal>SET</>后面出现的字段名周围放上圆括弧，
但是我们在等号右边的表达式里引用同一个字段的时候却需要圆括弧。
</para>

 <!--
<para>
  And we can specify subfields as targets for <command>INSERT</>, too:

<programlisting>
INSERT INTO mytab (complex_col.r, complex_col.i) VALUES(1.1, 2.2);
</programlisting>

  Had we not supplied values for all the subfields of the column, the
  remaining subfields would have been filled with null values.
 </para>
-->
<para>
我们也可以声明子域是<command>INSERT</>的目标：
<programlisting>
INSERT INTO mytab (complex_col.r, complex_col.i) VALUES(1.1, 2.2);
</programlisting>
如果我们没有为字段的所有子域提供数值，那么剩下的子域将用 NULL 填充。
</para>
 </sect2>

 <sect2 id="rowtypes-io-syntax">
  <!-- <title>Composite Type Input and Output Syntax</title> -->
<title>复合类型输入和输出语法</title>
  <!--
<para>
   The external text representation of a composite value consists of items that
   are interpreted according to the I/O conversion rules for the individual
   field types, plus decoration that indicates the composite structure.
   The decoration consists of parentheses (<literal>(</> and <literal>)</>)
   around the whole value, plus commas (<literal>,</>) between adjacent
   items.  Whitespace outside the parentheses is ignored, but within the
   parentheses it is considered part of the field value, and might or might not be
   significant depending on the input conversion rules for the field data type.
   For example, in:
<programlisting>
'(  42)'
</programlisting>
   the whitespace will be ignored if the field type is integer, but not if
   it is text.
  </para>
-->
<para>
一个复合类型的文本表现形式包含那些根据独立的子域类型各自 I/O 转换规则解析的项，
加上一些表明这是复合结构的修饰。这些修饰由整个数值周围的圆括弧(<literal>(</> 和
 <literal>)</>)加上相邻域之间的逗号(<literal>,</>)组成。圆括弧外面的空白被忽略，
 但是在圆括弧里面，它被当作子域数值的一部分，根据对该子域数据类型的输入转换规则，
 这些空白可能有用，也可能没用。比如，在：
 <programlisting>
'(  42)'
</programlisting>
里，如果子域类型是整数，那么空白将被忽略，但是如果是文本，那么就不会忽略。
</para>

  <!--
<para>
   As shown previously, when writing a composite value you can write double
   quotes around any individual field value.
   You <emphasis>must</> do so if the field value would otherwise
   confuse the composite-value parser.  In particular, fields containing
   parentheses, commas, double quotes, or backslashes must be double-quoted.
   To put a double quote or backslash in a quoted composite field value,
   precede it with a backslash.  (Also, a pair of double quotes within a
   double-quoted field value is taken to represent a double quote character,
   analogously to the rules for single quotes in SQL literal strings.)
   Alternatively, you can avoid quoting and use backslash-escaping to
   protect all data characters
   that would otherwise be taken as composite syntax.
  </para>
-->
<para>
如前面显示的那样，在给一个复合类型写数值的时候，你可以在独立的子域数值周围用双引号包围。
如果子域数值会导致复合数值分析器产生歧义，那么你<emphasis>必须</>这么做。
特别是子域包含圆括弧、逗号、双引号或反斜杠的场合。要想在双引号括起来的复合字段值里面放双引号或反斜杠，
那么你需要在它前面放一个反斜杠。（同样，在一个双引号括起的子域数值里面的一对双引号表示一个双引号字符，
就像 SQL 字符串文本的单引号规则一样。）另外，
你可以避免引用和用反斜杠转义的方法保护所有可能会当作复合类型语法的数据字符。
</para>

  <!--
<para>
   A completely empty field value (no characters at all between the commas
   or parentheses) represents a NULL.  To write a value that is an empty
   string rather than NULL, write <literal>""</>.
  </para>
-->
<para>
一个完全空的子域数值(在逗号或者逗号与圆括弧之间没有字符)表示一个 NULL 。
要写一个空字符串，而不是一个 NULL ，写<literal>""</>。
</para>

  <!--
<para>
   The composite output routine will put double quotes around field values
   if they are empty strings or contain parentheses, commas,
   double quotes, backslashes, or white space.  (Doing so for white space
   is not essential, but aids legibility.)  Double quotes and backslashes
   embedded in field values will be doubled.
  </para>
-->
<para>
假如子域数值是空字符串或者包含圆括弧、逗号、双引号、反斜杠、空白，
复合类型输出程序会在子域数值周围放上双引号。（这么处理空白不是必须的，
但是可以增强易读性。）在一个子域数值里面嵌入的双引号和反斜杠将会写成两份。
</para>

 <note>

<para>
  <!--
   Remember that what you write in an SQL command will first be interpreted
   as a string literal, and then as a composite.  This doubles the number of
   backslashes you need (assuming escape string syntax is used).
   For example, to insert a <type>text</> field
   containing a double quote and a backslash in a composite
   value, you'd need to write:
 -->
 请注意你写的任何 SQL 命令都首先被当作字符串文本解析，然后才当作复合类型。
 这就加倍了你需要的反斜杠数目(假设使用转义字符串的语法)。比如，
 要插入一个包含双引号和一个反斜杠的<type>text</>子域到一个复合类型数值里，你需要写：
<programlisting>
INSERT ... VALUES (E'("\\"\\\\")');
</programlisting>
<!-- 
   The string-literal processor removes one level of backslashes, so that
   what arrives at the composite-value parser looks like
   <literal>("\"\\")</>.  In turn, the string
   fed to the <type>text</> data type's input routine
   becomes <literal>"\</>.  (If we were working
   with a data type whose input routine also treated backslashes specially,
   <type>bytea</> for example, we might need as many as eight backslashes
   in the command to get one backslash into the stored composite field.)
   Dollar quoting (see <xref linkend="sql-syntax-dollar-quoting">) can be
   used to avoid the need to double backslashes. 
-->
字符串文本处理器先去掉一层反斜杠，这样到达复合类型分析器的东西将变成<literal>("\"\\")</>。
接着，该字符串传递给<type>text</>数据类型的输入过程，变成 <literal>"\</>。
（如果我们使用的数据类型对反斜杠也有特殊待遇，比如<type>bytea</>，
那么我们可能需要在命令里放多达八个反斜杠以获取在存储的复合类型子域中有一个反斜杠。）
美元符界定(参阅<xref linkend="sql-syntax-dollar-quoting">)可以用于避免双份反斜杠的问题。   
  </para>

 </note>

 <tip>
  <!--
<para>
   The <literal>ROW</> constructor syntax is usually easier to work with
   than the composite-literal syntax when writing composite values in SQL
   commands.
   In <literal>ROW</>, individual field values are written the same way
   they would be written when not members of a composite.
  </para>
-->
<para>
在 SQL 命令里写复合类型值的时候，<literal>ROW</>构造器语法通常比复合文本语法更容易使用。
在<literal>ROW</>里，独立的子域数值的写法和并非作为复合类型的成员书写的方法一样。
</para>
 </tip>
 </sect2>

</sect1>
