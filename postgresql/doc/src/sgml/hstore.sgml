<!-- doc/src/sgml/hstore.sgml -->

<sect1 id="hstore" xreflabel="hstore">
 <title>hstore</title>

 <indexterm zone="hstore">
  <primary>hstore</primary>
 </indexterm>

 <!--
<para>
  This module implements the <type>hstore</> data type for storing sets of
  key/value pairs within a single <productname>PostgreSQL</> value.
  This can be useful in various scenarios, such as rows with many attributes
  that are rarely examined, or semi-structured data.  Keys and values are
  simply text strings.
 </para>
-->
<para>
这个模块实现了<type>hstore</>数据类型，在单个<productname>PostgreSQL</>值中存储一组键/值对。
这在不同的场景中是有用的，如很少检查带有许多属性的行，或半结构化的数据。
键和值是简单的文本字符串。
</para>

 <sect2>
  <!-- 
  <title><type>hstore</> External Representation</title> 
  -->
  <title><type>hstore</> 外部表示</title>

<para>
<!-- 
   The text representation of an <type>hstore</>, used for input and output,
   includes zero or more <replaceable>key</> <literal>=&gt;</>
   <replaceable>value</> pairs separated by commas. Some examples:
 -->
<type>hstore</>的文本表示用于输入和输出，包括零个或更多由逗号分开的
<replaceable>key</> <literal>=&gt;</> <replaceable>value</>对。一些例子：
 
<synopsis>
k =&gt; v
foo =&gt; bar, baz =&gt; whatever
"1-a" =&gt; "anything at all"
</synopsis>

<!-- 
   The order of the pairs is not significant (and may not be reproduced on
   output). Whitespace between pairs or around the <literal>=&gt;</> sign is
   ignored. Double-quote keys and values that include whitespace, commas,
   <literal>=</>s or <literal>&gt;</>s. To include a double quote or a
   backslash in a key or value, escape it with a backslash. 
-->
键/值对的顺序不重要（可能不在输出中复制）。忽略对和<literal>=&gt;</>符号周围的空格。
包含空格、逗号、<literal>=</>或<literal>&gt;</>的键和值要加双引号。
要在键或值中包含一个双引号或反斜杠，要用反斜杠转义。
  </para>


<para>
<!-- 
   Each key in an <type>hstore</> is unique. If you declare an <type>hstore</>
   with duplicate keys, only one will be stored in the <type>hstore</> and
   there is no guarantee as to which will be kept:
 -->
<type>hstore</>中的每个键都是唯一的。如果你用重复键声明一个<type>hstore</>，
将只有一个存储在<type>hstore</>中，并且不保证会保存哪一个：
 
<programlisting>
SELECT 'a=&gt;1,a=&gt;2'::hstore;
  hstore
----------
 "a"=&gt;"1"
</programlisting>
  </para>


<para>
   <!-- 
   A value (but not a key) can be an SQL <literal>NULL</>. For example: 
   -->
   一个值（不是一个键）可以是SQL <literal>NULL</>。如：

<programlisting>
key =&gt; NULL
</programlisting>

   <!-- 
   The <literal>NULL</> keyword is case-insensitive. Double-quote the
   <literal>NULL</> to treat it as the ordinary string <quote>NULL</quote>. 
   -->
   <literal>NULL</>关键字是大小写敏感的。要将<literal>NULL</>
   当做普通的字符串来对待就要给<literal>NULL</>加双引号。
  </para>


  <note>
  <!--
<para>
   Keep in mind that the <type>hstore</> text format, when used for input,
   applies <emphasis>before</> any required quoting or escaping. If you are
   passing an <type>hstore</> literal via a parameter, then no additional
   processing is needed. But if you're passing it as a quoted literal
   constant, then any single-quote characters and (depending on the setting of
   the <varname>standard_conforming_strings</> configuration parameter)
   backslash characters need to be escaped correctly. See
   <xref linkend="sql-syntax-strings"> for more on the handling of string
   constants.
  </para>
-->
<para>
记住<type>hstore</>文本格式，当用于输入时，在任何请求的引用或转义<emphasis>之前</>应用。
如果通过一个参数传递一个<type>hstore</>文本，那么不需要额外的处理。
但是如果作为引用的文本常量传递，那么任何单引号字符和（依赖于
<varname>standard_conforming_strings</>配置参数的设置）反斜杠字符需要正确的转义。
参阅<xref linkend="sql-syntax-strings">获取更多处理字符串常量的信息。
</para>
  </note>

  <!--
<para>
   On output, double quotes always surround keys and values, even when it's
   not strictly necessary.
  </para>
-->
<para>
在输出时，键和值总是包含在双引号中，即使并不严格需要也是这样。
</para>

 </sect2>

 <sect2>
  <!-- 
  <title><type>hstore</> Operators and Functions</title> 
  -->
  <title><type>hstore</> 操作符和函数</title>

  <!--
<para>
   The operators provided by the <literal>hstore</literal> module are
   shown in <xref linkend="hstore-op-table">, the functions
   in <xref linkend="hstore-func-table">.
  </para>
-->
<para>
<literal>hstore</literal>模块提供的操作符显示在<xref linkend="hstore-op-table">中，
函数在<xref linkend="hstore-func-table">中。
</para>

  <table id="hstore-op-table">
   <!-- 
   <title><type>hstore</> Operators</title> 
   -->
   <title><type>hstore</> 操作符</title>

   <tgroup cols="4">
    <thead>
     <row>
      <!-- 
  <entry>Operator</entry>
      <entry>Description</entry>
      <entry>Example</entry>
      <entry>Result</entry> 
  -->
  <entry>操作符</entry>
      <entry>描述</entry>
      <entry>示例</entry>
      <entry>结果</entry>
     </row>
    </thead>

    <tbody>
     <row>
      <entry><type>hstore</> <literal>-&gt;</> <type>text</></entry>
      <!-- 
  <entry>get value for key (<literal>NULL</> if not present)</entry> 
  -->
  <entry>获得键的值(如果不存在为<literal>NULL</>)</entry>
      <entry><literal>'a=&gt;x, b=&gt;y'::hstore -&gt; 'a'</literal></entry>
      <entry><literal>x</literal></entry>
     </row>

     <row>
      <entry><type>hstore</> <literal>-&gt;</> <type>text[]</></entry>
      <!-- 
  <entry>get values for keys (<literal>NULL</> if not present)</entry> 
  -->
  <entry>获得多个键的值(如果不存在为<literal>NULL</>)</entry>
      <entry><literal>'a=&gt;x, b=&gt;y, c=&gt;z'::hstore -&gt; ARRAY['c','a']</literal></entry>
      <entry><literal>{"z","x"}</literal></entry>
     </row>

     <row>
      <entry><type>hstore</> <literal>||</> <type>hstore</></entry>
      <!-- 
  <entry>concatenate <type>hstore</>s</entry> 
  -->
  <entry>连接 <type>hstore</></entry>
      <entry><literal>'a=&gt;b, c=&gt;d'::hstore || 'c=&gt;x, d=&gt;q'::hstore</literal></entry>
      <entry><literal>"a"=&gt;"b", "c"=&gt;"x", "d"=&gt;"q"</literal></entry>
     </row>

     <row>
      <entry><type>hstore</> <literal>?</> <type>text</></entry>
      <!-- 
  <entry>does <type>hstore</> contain key?</entry>
  -->
  <entry><type>hstore</> 包含键吗?</entry>
      <entry><literal>'a=&gt;1'::hstore ? 'a'</literal></entry>
      <entry><literal>t</literal></entry>
     </row>

     <row>
      <entry><type>hstore</> <literal>?&amp;</> <type>text[]</></entry>
      <!-- 
  <entry>does <type>hstore</> contain all specified keys?</entry> 
  -->
  <entry><type>hstore</> 包含所有指定的键?</entry>
      <entry><literal>'a=&gt;1,b=&gt;2'::hstore ?&amp; ARRAY['a','b']</literal></entry>
      <entry><literal>t</literal></entry>
     </row>

     <row>
      <entry><type>hstore</> <literal>?|</> <type>text[]</></entry>
      <!-- 
  <entry>does <type>hstore</> contain any of the specified keys?</entry> 
  -->
  <entry><type>hstore</> 包含任何指定的键?</entry>
      <entry><literal>'a=&gt;1,b=&gt;2'::hstore ?| ARRAY['b','c']</literal></entry>
      <entry><literal>t</literal></entry>
     </row>

     <row>
      <entry><type>hstore</> <literal>@&gt;</> <type>hstore</></entry>
      <!-- 
  <entry>does left operand contain right?</entry> 
  -->
  <entry>左操作符包含右操作符?</entry>
      <entry><literal>'a=&gt;b, b=&gt;1, c=&gt;NULL'::hstore @&gt; 'b=&gt;1'</literal></entry>
      <entry><literal>t</literal></entry>
     </row>

     <row>
      <entry><type>hstore</> <literal>&lt;@</> <type>hstore</></entry>
      <!-- 
  <entry>is left operand contained in right?</entry> 
  -->
  <entry>左操作符包含于右操作符?</entry>
      <entry><literal>'a=&gt;c'::hstore &lt;@ 'a=&gt;b, b=&gt;1, c=&gt;NULL'</literal></entry>
      <entry><literal>f</literal></entry>
     </row>

     <row>
      <entry><type>hstore</> <literal>-</> <type>text</></entry>
      <!-- 
  <entry>delete key from left operand</entry> 
  -->
  <entry>从左操作符中删除键</entry>
      <entry><literal>'a=&gt;1, b=&gt;2, c=&gt;3'::hstore - 'b'::text</literal></entry>
      <entry><literal>"a"=&gt;"1", "c"=&gt;"3"</literal></entry>
     </row>

     <row>
      <entry><type>hstore</> <literal>-</> <type>text[]</></entry>
      <!-- 
  <entry>delete keys from left operand</entry> 
  -->
  <entry>从左操作符中删除键</entry>
      <entry><literal>'a=&gt;1, b=&gt;2, c=&gt;3'::hstore - ARRAY['a','b']</literal></entry>
      <entry><literal>"c"=&gt;"3"</literal></entry>
     </row>

     <row>
      <entry><type>hstore</> <literal>-</> <type>hstore</></entry>
      <!-- 
  <entry>delete matching pairs from left operand</entry> 
  -->
  <entry>从左操作符中删除匹配对</entry>
      <entry><literal>'a=&gt;1, b=&gt;2, c=&gt;3'::hstore - 'a=&gt;4, b=&gt;2'::hstore</literal></entry>
      <entry><literal>"a"=&gt;"1", "c"=&gt;"3"</literal></entry>
     </row>

     <row>
      <entry><type>record</> <literal>#=</> <type>hstore</></entry>
      <!-- 
  <entry>replace fields in <type>record</> with matching values from <type>hstore</></entry>
      <entry>see Examples section</entry> 
  -->
  <entry>用<type>hstore</>里匹配的值替换<type>record</>里的字段</entry>
      <entry>查看示例章节</entry>
      <entry></entry>
     </row>

     <row>
      <entry><literal>%%</> <type>hstore</></entry>
      <!-- 
  <entry>convert <type>hstore</> to array of alternating keys and values</entry> 
  -->
  <entry>转换<type>hstore</>为替换键和值的数组</entry>
      <entry><literal>%% 'a=&gt;foo, b=&gt;bar'::hstore</literal></entry>
      <entry><literal>{a,foo,b,bar}</literal></entry>
     </row>

     <row>
      <entry><literal>%#</> <type>hstore</></entry>
      <!-- 
  <entry>convert <type>hstore</> to two-dimensional key/value array</entry>
  -->
  <entry>转换<type>hstore</>为两维键/值数组</entry>
      <entry><literal>%# 'a=&gt;foo, b=&gt;bar'::hstore</literal></entry>
      <entry><literal>{{a,foo},{b,bar}}</literal></entry>
     </row>

    </tbody>
   </tgroup>
  </table>

  <note>
  <!--
<para>
   Prior to PostgreSQL 8.2, the containment operators <literal>@&gt;</>
   and <literal>&lt;@</> were called <literal>@</> and <literal>~</>,
   respectively. These names are still available, but are deprecated and will
   eventually be removed. Notice that the old names are reversed from the
   convention formerly followed by the core geometric data types!
   </para>
-->
<para>
PostgreSQL 8.2之前，包含操作符<literal>@&gt;</>和<literal>&lt;@</>分别被称为<literal>@</>
和<literal>~</>。这些名字现在仍然可用，但是已经废弃了并且最终将会被移除。
请注意，旧的名字从大会移除，之前跟随着核心几何数据类型！
</para>
  </note>

  <table id="hstore-func-table">
   <!-- 
   <title><type>hstore</> Functions</title> 
   -->
   <title><type>hstore</> 函数</title>

   <tgroup cols="5">
    <thead>
     <row>
      <!-- 
  <entry>Function</entry>
      <entry>Return Type</entry>
      <entry>Description</entry>
      <entry>Example</entry>
      <entry>Result</entry> 
  -->
  <entry>函数</entry>
      <entry>返回类型</entry>
      <entry>描述</entry>
      <entry>示例</entry>
      <entry>结果</entry>
     </row>
    </thead>

    <tbody>
     <row>
      <entry><function>hstore(record)</function><indexterm><primary>hstore</primary></indexterm></entry>
      <entry><type>hstore</type></entry>
      <!-- 
  <entry>construct an <type>hstore</> from a record or row</entry> 
  -->
  <entry>从一个记录或行构造一个 <type>hstore</></entry>
      <entry><literal>hstore(ROW(1,2))</literal></entry>
      <entry><literal>f1=&gt;1,f2=&gt;2</literal></entry>
     </row>

     <row>
      <entry><function>hstore(text[])</function></entry>
      <entry><type>hstore</type></entry>
      <!-- 
  <entry>construct an <type>hstore</> from an array, which may be either
       a key/value array, or a two-dimensional array</entry> 
   -->
   <entry>从一个数组构造一个<type>hstore</>，可能是一个键/值数组，也可能是一个两维数组</entry>
      <entry><literal>hstore(ARRAY['a','1','b','2']) || hstore(ARRAY[['c','3'],['d','4']])</literal></entry>
      <entry><literal>a=&gt;1, b=&gt;2, c=&gt;3, d=&gt;4</literal></entry>
     </row>

     <row>
      <entry><function>hstore(text[], text[])</function></entry>
      <entry><type>hstore</type></entry>
      <!-- 
  <entry>construct an <type>hstore</> from separate key and value arrays</entry> 
  -->
  <entry>从一个单独的键和值数组构造一个<type>hstore</></entry>
      <entry><literal>hstore(ARRAY['a','b'], ARRAY['1','2'])</literal></entry>
      <entry><literal>"a"=&gt;"1","b"=&gt;"2"</literal></entry>
     </row>

     <row>
      <entry><function>hstore(text, text)</function></entry>
      <entry><type>hstore</type></entry>
      <!-- 
  <entry>make single-item <type>hstore</></entry> 
  -->
  <entry>制作单一项<type>hstore</></entry>
      <entry><literal>hstore('a', 'b')</literal></entry>
      <entry><literal>"a"=&gt;"b"</literal></entry>
     </row>

     <row>
      <entry><function>akeys(hstore)</function><indexterm><primary>akeys</primary></indexterm></entry>
      <entry><type>text[]</type></entry>
      <!-- 
  <entry>get <type>hstore</>'s keys as an array</entry> 
  -->
  <entry>获取<type>hstore</>的键作为一个数组</entry>
      <entry><literal>akeys('a=&gt;1,b=&gt;2')</literal></entry>
      <entry><literal>{a,b}</literal></entry>
     </row>

     <row>
      <entry><function>skeys(hstore)</function><indexterm><primary>skeys</primary></indexterm></entry>
      <entry><type>setof text</type></entry>
      <!-- 
  <entry>get <type>hstore</>'s keys as a set</entry> 
  -->
  <entry>获取<type>hstore</>的键作为一个集合</entry>
      <entry><literal>skeys('a=&gt;1,b=&gt;2')</literal></entry>
      <entry>
<programlisting>
a
b
</programlisting></entry>
     </row>

     <row>
      <entry><function>avals(hstore)</function><indexterm><primary>avals</primary></indexterm></entry>
      <entry><type>text[]</type></entry>
      <!-- 
  <entry>get <type>hstore</>'s values as an array</entry> 
  -->
  <entry>获取<type>hstore</>的值作为一个数组</entry>
      <entry><literal>avals('a=&gt;1,b=&gt;2')</literal></entry>
      <entry><literal>{1,2}</literal></entry>
     </row>

     <row>
      <entry><function>svals(hstore)</function><indexterm><primary>svals</primary></indexterm></entry>
      <entry><type>setof text</type></entry>
      <!-- 
  <entry>get <type>hstore</>'s values as a set</entry> 
  -->
  <entry>获取<type>hstore</>的值作为一个集合</entry>
      <entry><literal>svals('a=&gt;1,b=&gt;2')</literal></entry>
      <entry>
<programlisting>
1
2
</programlisting></entry>
     </row>

     <row>
      <entry><function>hstore_to_array(hstore)</function><indexterm><primary>hstore_to_array</primary></indexterm></entry>
      <entry><type>text[]</type></entry>
      <!-- 
  <entry>get <type>hstore</>'s keys and values as an array of alternating
       keys and values</entry> 
   -->
   <entry>获取<type>hstore</>的键和值作为一个键值交替的数组</entry>
      <entry><literal>hstore_to_array('a=&gt;1,b=&gt;2')</literal></entry>
      <entry><literal>{a,1,b,2}</literal></entry>
     </row>

     <row>
      <entry><function>hstore_to_matrix(hstore)</function><indexterm><primary>hstore_to_matrix</primary></indexterm></entry>
      <entry><type>text[]</type></entry>
      <!-- 
  <entry>get <type>hstore</>'s keys and values as a two-dimensional array</entry> 
  -->
  <entry>获取<type>hstore</>的键和值作为一个两维数组</entry>
      <entry><literal>hstore_to_matrix('a=&gt;1,b=&gt;2')</literal></entry>
      <entry><literal>{{a,1},{b,2}}</literal></entry>
     </row>

     <row>
      <entry><function>hstore_to_json(hstore)</function><indexterm><primary>hstore_to_json</primary></indexterm></entry>
      <entry><type>json</type></entry>
      <!-- 
  <entry>get <type>hstore</type> as a <type>json</type> value</entry> 
  -->
  <entry>获取<type>hstore</>作为一个<type>json</type>值</entry>
      <entry><literal>hstore_to_json('"a key"=&gt;1, b=&gt;t, c=&gt;null, d=&gt;12345, e=&gt;012345, f=&gt;1.234, g=&gt;2.345e+4')</literal></entry>
      <entry><literal>{"a key": "1", "b": "t", "c": null, "d": "12345", "e": "012345", "f": "1.234", "g": "2.345e+4"}</literal></entry>
     </row>

     <row>
      <entry><function>hstore_to_json_loose(hstore)</function><indexterm><primary>hstore_to_json_loose</primary></indexterm></entry>
      <entry><type>json</type></entry>
      <!-- 
  <entry>get <type>hstore</type> as a <type>json</type> value, but attempting to distinguish numerical and Boolean values so they are unquoted in the JSON</entry>
  -->
  <entry>获取<type>hstore</>作为一个<type>json</type>值，但是试图区分数值和布尔值，所以它们在JSON中没有引号</entry>
      <entry><literal>hstore_to_json_loose('"a key"=&gt;1, b=&gt;t, c=&gt;null, d=&gt;12345, e=&gt;012345, f=&gt;1.234, g=&gt;2.345e+4')</literal></entry>
      <entry><literal>{"a key": 1, "b": true, "c": null, "d": 12345, "e": "012345", "f": 1.234, "g": 2.345e+4}</literal></entry>
     </row>

     <row>
      <entry><function>slice(hstore, text[])</function><indexterm><primary>slice</primary></indexterm></entry>
      <entry><type>hstore</type></entry>
      <!-- 
  <entry>extract a subset of an <type>hstore</></entry> 
  -->
  <entry>提取<type>hstore</>的一个子集</entry>
      <entry><literal>slice('a=&gt;1,b=&gt;2,c=&gt;3'::hstore, ARRAY['b','c','x'])</literal></entry>
      <entry><literal>"b"=&gt;"2", "c"=&gt;"3"</literal></entry>
     </row>

     <row>
      <entry><function>each(hstore)</function><indexterm><primary>each</primary></indexterm></entry>
      <entry><type>setof(key text, value text)</type></entry>
      <!-- 
  <entry>get <type>hstore</>'s keys and values as a set</entry> 
  -->
  <entry>获取 <type>hstore</>的键和值作为一个集合</entry>
      <entry><literal>select * from each('a=&gt;1,b=&gt;2')</literal></entry>
      <entry>
<programlisting>
 key | value
-----+-------
 a   | 1
 b   | 2
</programlisting></entry>
     </row>

     <row>
      <entry><function>exist(hstore,text)</function><indexterm><primary>exist</primary></indexterm></entry>
      <entry><type>boolean</type></entry>
      <!-- 
  <entry>does <type>hstore</> contain key?</entry> 
  -->
  <entry><type>hstore</> 包含键吗?</entry>
      <entry><literal>exist('a=&gt;1','a')</literal></entry>
      <entry><literal>t</literal></entry>
     </row>

     <row>
      <entry><function>defined(hstore,text)</function><indexterm><primary>defined</primary></indexterm></entry>
      <entry><type>boolean</type></entry>
      <!--
  <entry>does <type>hstore</> contain non-<literal>NULL</> value for key?</entry>
  -->
  <entry><type>hstore</> 包含非<literal>NULL</>值的键吗?</entry>
      <entry><literal>defined('a=&gt;NULL','a')</literal></entry>
      <entry><literal>f</literal></entry>
     </row>

     <row>
      <entry><function>delete(hstore,text)</function><indexterm><primary>delete</primary></indexterm></entry>
      <entry><type>hstore</type></entry>
      <!-- 
  <entry>delete pair with matching key</entry> 
  -->
  <entry>删除匹配键的对</entry>
      <entry><literal>delete('a=&gt;1,b=&gt;2','b')</literal></entry>
      <entry><literal>"a"=>"1"</literal></entry>
     </row>

     <row>
      <entry><function>delete(hstore,text[])</function></entry>
      <entry><type>hstore</type></entry>
      <!-- 
  <entry>delete pairs with matching keys</entry> 
  -->
  <entry>删除匹配键的多个对</entry>
      <entry><literal>delete('a=&gt;1,b=&gt;2,c=&gt;3',ARRAY['a','b'])</literal></entry>
      <entry><literal>"c"=>"3"</literal></entry>
     </row>

     <row>
      <entry><function>delete(hstore,hstore)</function></entry>
      <entry><type>hstore</type></entry>
      <!--
  <entry>delete pairs matching those in the second argument</entry>
  -->
  <entry>删除匹配第二个参数中元素的对</entry>
      <entry><literal>delete('a=&gt;1,b=&gt;2','a=&gt;4,b=&gt;2'::hstore)</literal></entry>
      <entry><literal>"a"=>"1"</literal></entry>
     </row>

     <row>
      <entry><function>populate_record(record,hstore)</function><indexterm><primary>populate_record</primary></indexterm></entry>
      <entry><type>record</type></entry>
      <!-- 
  <entry>replace fields in <type>record</> with matching values from <type>hstore</></entry>
      <entry>see Examples section</entry> 
  -->
  <entry>替换<type>record</>中匹配<type>hstore</>中的值的字段</entry>
      <entry>参阅示例章节</entry>
      <entry></entry>
     </row>

    </tbody>
   </tgroup>
  </table>

  <note>
   <!--
<para>
     The function <function>hstore_to_json</function> is used when an <type>hstore</type>
     value is cast to <type>json</type>.
   </para>
-->
<para>
当<type>hstore</type>值转换为<type>json</type>时使用<function>hstore_to_json</function>函数。
</para>
  </note>

  <note>
   <!--
<para>
    The function <function>populate_record</function> is actually declared
    with <type>anyelement</>, not <type>record</>, as its first argument,
    but it will reject non-record types with a run-time error.
   </para>
-->
<para>
函数<function>populate_record</function>实际上是用<type>anyelement</>，
而不是<type>record</>，声明为它的第一个参数，但是它将用运行时错误拒绝非记录类型。
</para>
  </note>
 </sect2>

 <sect2>
  <!-- 
  <title>Indexes</title>
  -->
  <title>索引</title>

  <!--
<para>
   <type>hstore</> has GiST and GIN index support for the <literal>@&gt;</>,
   <literal>?</>, <literal>?&amp;</> and <literal>?|</> operators. For example:
  </para>
-->
<para>
<type>hstore</>有GiST 和 GIN索引支持<literal>@&gt;</>,
   <literal>?</>, <literal>?&amp;</> 和 <literal>?|</>操作符。例如：
</para>
<programlisting>
CREATE INDEX hidx ON testhstore USING GIST (h);

CREATE INDEX hidx ON testhstore USING GIN (h);
</programlisting>

  <!--
<para>
   <type>hstore</> also supports <type>btree</> or <type>hash</> indexes for
   the <literal>=</> operator. This allows <type>hstore</> columns to be
   declared <literal>UNIQUE</>, or to be used in <literal>GROUP BY</>,
   <literal>ORDER BY</> or <literal>DISTINCT</> expressions. The sort ordering
   for <type>hstore</> values is not particularly useful, but these indexes
   may be useful for equivalence lookups. Create indexes for <literal>=</>
   comparisons as follows:
  </para>
-->
<para>
<type>hstore</>也为<literal>=</>操作符支持<type>btree</> 或 <type>hash</>索引。
这允许<type>hstore</>字段声明为<literal>UNIQUE</>，或在<literal>GROUP BY</>,
   <literal>ORDER BY</> 或 <literal>DISTINCT</>表达式中使用。为<type>hstore</>
值的排序顺序不是很有用，但是这些索引可能对于等价查找有用处。为<literal>=</>
比较创建索引如下：
</para>
<programlisting>
CREATE INDEX hidx ON testhstore USING BTREE (h);

CREATE INDEX hidx ON testhstore USING HASH (h);
</programlisting>
 </sect2>

 <sect2>
  <!--
<title>Examples</title>
-->
<title>例子</title>

  <!--
<para>
   Add a key, or update an existing key with a new value:
<programlisting>
UPDATE tab SET h = h || hstore('c', '3');
</programlisting>
  </para>
-->
<para>
添加一个键，或用新值更新一个现有的键：
<programlisting>
UPDATE tab SET h = h || hstore('c', '3');
</programlisting>
</para>

  <!--
<para>
   Delete a key:
<programlisting>
UPDATE tab SET h = delete(h, 'k1');
</programlisting>
  </para>
-->
<para>
删除一个键：
<programlisting>
UPDATE tab SET h = delete(h, 'k1');
</programlisting>
</para>

<para>
   <!--
   Convert a <type>record</> to an <type>hstore</>:
   -->
   转换<type>record</>为<type>hstore</>:
<programlisting>
CREATE TABLE test (col1 integer, col2 text, col3 text);
INSERT INTO test VALUES (123, 'foo', 'bar');

SELECT hstore(t) FROM test AS t;
                   hstore                    
---------------------------------------------
 "col1"=&gt;"123", "col2"=&gt;"foo", "col3"=&gt;"bar"
(1 row)
</programlisting>
  </para>

<para>
   <!--
   Convert an <type>hstore</> to a predefined <type>record</> type:
   -->
   转换<type>hstore</>为一个预先定义的<type>record</>类型：
<programlisting>
CREATE TABLE test (col1 integer, col2 text, col3 text);

SELECT * FROM populate_record(null::test,
                              '"col1"=&gt;"456", "col2"=&gt;"zzz"');
 col1 | col2 | col3 
------+------+------
  456 | zzz  | 
(1 row)
</programlisting>
  </para>

<para>
   <!--
   Modify an existing record using the values from an <type>hstore</>:
   -->
   使用<type>hstore</>里的值修改现有的记录：
<programlisting>
CREATE TABLE test (col1 integer, col2 text, col3 text);
INSERT INTO test VALUES (123, 'foo', 'bar');

SELECT (r).* FROM (SELECT t #= '"col3"=&gt;"baz"' AS r FROM test t) s;
 col1 | col2 | col3 
------+------+------
  123 | foo  | baz
(1 row)
</programlisting>
  </para>
 </sect2>

 <sect2>
  <!-- 
  <title>Statistics</title> 
  -->
  <title>统计</title>

  <!--
<para>
   The <type>hstore</> type, because of its intrinsic liberality, could
   contain a lot of different keys. Checking for valid keys is the task of the
   application. The following examples demonstrate several techniques for
   checking keys and obtaining statistics.
  </para>
-->
<para>
<type>hstore</>类型，由于其内在的慷慨，可以包含大量不同的键。检查有效的键是应用的任务。
下列的例子演示几个检查键和获取统计的技术。
</para>

  <!--
<para>
   Simple example:
<programlisting>
SELECT * FROM each('aaa=&gt;bq, b=&gt;NULL, ""=&gt;1');
</programlisting>
  </para>
-->
<para>
简单例子：
<programlisting>
SELECT * FROM each('aaa=&gt;bq, b=&gt;NULL, ""=&gt;1');
</programlisting>
</para>

  <!--
<para>
   Using a table:
<programlisting>
SELECT (each(h)).key, (each(h)).value INTO stat FROM testhstore;
</programlisting>
  </para>
-->
<para>
使用一个表：
<programlisting>
SELECT (each(h)).key, (each(h)).value INTO stat FROM testhstore;
</programlisting>
</para>

<para>
   <!-- 
   Online statistics: 
   -->
   在线统计：
<programlisting>
SELECT key, count(*) FROM
  (SELECT (each(h)).key FROM testhstore) AS stat
  GROUP BY key
  ORDER BY count DESC, key;
    key    | count
-----------+-------
 line      |   883
 query     |   207
 pos       |   203
 node      |   202
 space     |   197
 status    |   195
 public    |   194
 title     |   190
 org       |   189
...................
</programlisting>
  </para>
 </sect2>

 <sect2>
  <!--
<title>Compatibility</title>
-->
<title>兼容性</title>

  <!--
<para>
   As of PostgreSQL 9.0, <type>hstore</> uses a different internal
   representation than previous versions. This presents no obstacle for
   dump/restore upgrades since the text representation (used in the dump) is
   unchanged.
  </para>
-->
<para>
自PostgreSQL 9.0起，<type>hstore</>使用一个不同于以前版本的内部表示。
这样做对于转储/恢复升级没有什么障碍，因为文本表示（在转储中使用的）没有改变。
</para>

  <!--
<para>
   In the event of a binary upgrade, upward compatibility is maintained by
   having the new code recognize old-format data. This will entail a slight
   performance penalty when processing data that has not yet been modified by
   the new code. It is possible to force an upgrade of all values in a table
   column by doing an <literal>UPDATE</> statement as follows:
<programlisting>
UPDATE tablename SET hstorecol = hstorecol || '';
</programlisting>
  </para>
-->
<para>
在一个二进制升级中，向上兼容是通过使新代码认识老格式的数据来维护的。
这在处理还未被新代码修改的数据时会有一点性能代偿。通过像下面这样的<literal>UPDATE</>
语句强制升级一个表字段中的所有值是可能的：
<programlisting>
UPDATE tablename SET hstorecol = hstorecol || '';
</programlisting>
</para>

  <!--
<para>
   Another way to do it is:
<programlisting>
ALTER TABLE tablename ALTER hstorecol TYPE hstore USING hstorecol || '';
</programlisting>
   The <command>ALTER TABLE</> method requires an exclusive lock on the table,
   but does not result in bloating the table with old row versions.
  </para>
-->
<para>
另一个方法是：
<programlisting>
ALTER TABLE tablename ALTER hstorecol TYPE hstore USING hstorecol || '';
</programlisting>
<command>ALTER TABLE</>方法要求在表上的一个排他锁，但是不会导致有旧行版本的表膨胀。
</para>

 </sect2>

 <sect2>
  <!-- 
  <title>Authors</title> 
  -->
  <title>作者</title>

<para>
   Oleg Bartunov <email>oleg@sai.msu.su</email>, Moscow, Moscow University, Russia
  </para>

<para>
   Teodor Sigaev <email>teodor@sigaev.ru</email>, Moscow, Delta-Soft Ltd., Russia
  </para>

  <!--
<para>
   Additional enhancements by Andrew Gierth <email>andrew@tao11.riddles.org.uk</email>,
   United Kingdom
  </para>
-->
<para>
Andrew Gierth <email>andrew@tao11.riddles.org.uk</email>附加的增强, United Kingdom
</para>
 </sect2>

</sect1>
