<!--
doc/src/sgml/ref/create_opclass.sgml
PostgreSQL documentation
-->

<refentry id="SQL-CREATEOPCLASS">
 <refmeta>
  <refentrytitle>CREATE OPERATOR CLASS</refentrytitle>
  <manvolnum>7</manvolnum>
  <!--
<refmiscinfo>SQL - Language Statements</refmiscinfo>
-->
<refmiscinfo>SQL - 语句</refmiscinfo>
 </refmeta>

 <refnamediv>
  <refname>CREATE OPERATOR CLASS</refname>
  <!--
  <refpurpose>define a new operator class</refpurpose>
  -->
  <refpurpose>定义一个新操作符类</refpurpose>
 </refnamediv>

 <indexterm zone="sql-createopclass">
  <primary>CREATE OPERATOR CLASS</primary>
 </indexterm>

 <refsynopsisdiv>
<synopsis>
CREATE OPERATOR CLASS <replaceable class="parameter">name</replaceable> [ DEFAULT ] FOR TYPE <replaceable class="parameter">data_type</replaceable>
  USING <replaceable class="parameter">index_method</replaceable> [ FAMILY <replaceable class="parameter">family_name</replaceable> ] AS
  {  OPERATOR <replaceable class="parameter">strategy_number</replaceable> <replaceable class="parameter">operator_name</replaceable> [ ( <replaceable class="parameter">op_type</replaceable>, <replaceable class="parameter">op_type</replaceable> ) ] [ FOR SEARCH | FOR ORDER BY <replaceable class="parameter">sort_family_name</replaceable> ]
   | FUNCTION <replaceable class="parameter">support_number</replaceable> [ ( <replaceable class="parameter">op_type</replaceable> [ , <replaceable class="parameter">op_type</replaceable> ] ) ] <replaceable class="parameter">function_name</replaceable> ( <replaceable class="parameter">argument_type</replaceable> [, ...] )
   | STORAGE <replaceable class="parameter">storage_type</replaceable>
  } [, ... ]
</synopsis>
 </refsynopsisdiv>

 <refsect1>
  <!--
<title>Description</title>
-->
<title>描述</title>

  <!--
<para>
   <command>CREATE OPERATOR CLASS</command> creates a new operator class.
   An operator class defines how a particular data type can be used with
   an index.  The operator class specifies that certain operators will fill
   particular roles or <quote>strategies</> for this data type and this
   index method.  The operator class also specifies the support procedures to
   be used by
   the index method when the operator class is selected for an
   index column.  All the operators and functions used by an operator
   class must be defined before the operator class can be created.
  </para>
-->
<para>
<command>CREATE OPERATOR CLASS</command>定义一个新的操作符类。
一个操作符类定义一种特定的数据类型如何与一种索引一起使用。
操作符类声明特定的操作符可以为这种数据类型以及这种索引方法填充特定的角色或者
<quote>策略</>。操作符类还声明索引方法在为一个索引字段选定该操作符类的时候要
使用的支持过程。所有操作符类使用的函数和操作符都必须在创建操作符类之前定义。
</para>

  <!--
<para>
   If a schema name is given then the operator class is created in the
   specified schema.  Otherwise it is created in the current schema.
   Two operator classes in the same schema can have the same name only if they
   are for different index methods.
  </para>
-->
<para>
如果给出了模式名字，那么操作符类就在指定的模式中创建。
否则就在当前模式中创建。在同一个模式中的两个操作符类可以有同样的名字，
但它们必须用于不同的索引方法。
</para>

  <!--
<para>
   The user who defines an operator class becomes its owner.  Presently,
   the creating user must be a superuser.  (This restriction is made because
   an erroneous operator class definition could confuse or even crash the
   server.)
  </para>
-->
<para>
定义操作符类的用户将成为其所有者。目前，创造者必须是超级用户。
做这样的限制是因为一个有问题的操作符类定义会让服务器困惑，甚至崩溃。
</para>

  <!--
<para>
   <command>CREATE OPERATOR CLASS</command> does not presently check
   whether the operator class definition includes all the operators and
   functions required by the index method, nor whether the operators and
   functions form a self-consistent set.  It is the user's
   responsibility to define a valid operator class.
  </para>
-->
<para>
<command>CREATE OPERATOR CLASS</command>
既不检查这个类定义是否包含所有索引方法需要的操作符以及函数，
也不检查这些操作符和函数是否形成一个自包含的集合。
定义一个合法的操作符类是用户的责任。
</para>

  <!--
<para>
   Related operator classes can be grouped into <firstterm>operator
   families</>.  To add a new operator class to an existing family,
   specify the <literal>FAMILY</> option in <command>CREATE OPERATOR
   CLASS</command>.  Without this option, the new class is placed into
   a family named the same as the new class (creating that family if
   it doesn't already exist).
  </para>
-->
<para>
相关的操作符类可以集合成<firstterm>操作符族</>。
添加一个新的操作符类到一个已经存在的操作符族，
在<command>CREATE OPERATOR CLASS</command>中指定<literal>FAMILY</>选项。
没有这个选项，新建的类会放置到与它同名的族中（如果不存在则创建它）。
</para>

  <!--
<para>
   Refer to <xref linkend="xindex"> for further information.
  </para>
-->
<para>
参考<xref linkend="xindex">获取更多信息。
</para>
 </refsect1>

 <refsect1>
  <!--
<title>Parameters</title>
-->
<title>参数</title>

  <variablelist>
   <varlistentry>
    <term><replaceable class="parameter">name</replaceable></term>
    <listitem>
     <!--
<para>
      The name of the operator class to be created.  The name can be
      schema-qualified.
     </para>
-->
<para>
将要创建的操作符类的名字(可以用模式修饰)。
</para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>DEFAULT</></term>
    <listitem>
     <!--
<para>
      If present, the operator class will become the default
      operator class for its data type.  At most one operator class
      can be the default for a specific data type and index method.
     </para>
-->
<para>
表示该操作符类将成为它的数据类型的缺省操作符类。
对于某个数据类型和访问方式而言，最多有一个操作符类是缺省的。
</para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">data_type</replaceable></term>
    <listitem>
     <!--
<para>
      The column data type that this operator class is for.
     </para>
-->
<para>
这个操作符类处理的字段的数据类型。
</para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">index_method</replaceable></term>
    <listitem>
     <!--
<para>
      The name of the index method this operator class is for.
     </para>
-->
<para>
这个操作符类处理的索引方法的名字。
</para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">family_name</replaceable></term>
    <listitem>
     <!--
<para>
      The name of the existing operator family to add this operator class to.
      If not specified, a family named the same as the operator class is
      used (creating it, if it doesn't already exist).
     </para>
-->
<para>
这个操作符类添加到的现有操作符族的名字。如果没有指定，
则使用与该操作符类相同名字的操作符族（如果不存在则创建它）。
</para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">strategy_number</replaceable></term>
    <listitem>
     <!--
<para>
      The index method's strategy number for an operator
      associated with the operator class.
     </para>
-->
<para>
一个操作符和这个操作符类关联的索引方法的策略数。
</para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">operator_name</replaceable></term>
    <listitem>
     <!--
<para>
      The name (optionally schema-qualified) of an operator associated
      with the operator class.
     </para>
-->
<para>
一个和该操作符类关联的操作符的名字(可以用模式修饰)。
</para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">op_type</replaceable></term>
    <listitem>
     <!--
<para>
      In an <literal>OPERATOR</> clause,
      the operand data type(s) of the operator, or <literal>NONE</> to
      signify a left-unary or right-unary operator.  The operand data
      types can be omitted in the normal case where they are the same
      as the operator class's data type.
     </para>
-->
<para>
在<literal>OPERATOR</>子句中，该操作符的操作数的数据类型，
或者是<literal>NONE</>表示左目或者右目操作符。
通常情况下可以省略操作数的数据类型，因为这个时候它们和操作符类的数据类型相同。
</para>

     <!--
<para>
      In a <literal>FUNCTION</> clause, the operand data type(s) the
      function is intended to support, if different from
      the input data type(s) of the function (for B-tree comparison functions
      and hash functions)
      or the class's data type (for B-tree sort support functions and all
      functions in GiST, SP-GiST and GIN operator classes).  These defaults
      are correct, and so <replaceable
      class="parameter">op_type</replaceable> need not be specified in
      <literal>FUNCTION</> clauses, except for the case of a B-tree sort
      support function that is meant to support cross-data-type comparisons.
     </para>
-->
<para>
在<literal>FUNCTION</>子句中，如果函数的操作数数据类型和函数的输入数据类型
（对于B-tree比较函数和哈希函数）或类的数据类型
（对于B-tree排序支持函数和所有在GiST、SP-GiST和GIN操作符类中的函数）不同，
那么就在该子句中写上这个函数要支持的操作数类型。这些缺省是正确的，
因此<replaceable class="parameter">op_type</replaceable>
不需要在<literal>FUNCTION</>子句中指定，
除了B-tree排序支持函数支持交叉数据类型比较的情况。
</para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">sort_family_name</replaceable></term>
    <listitem>
     <!--
<para>
      The name (optionally schema-qualified) of an existing <literal>btree</literal> operator
      family that describes the sort ordering associated with an ordering
      operator.
     </para>
-->
<para>
描述与排序操作符相关的排序顺序的现有<literal>btree</literal>
操作符族的名字（可以有模式修饰）。
</para>

     <!--
<para>
      If neither <literal>FOR SEARCH</> nor <literal>FOR ORDER BY</> is
      specified, <literal>FOR SEARCH</> is the default.
     </para>
-->
<para>
如果既没有指定<literal>FOR SEARCH</>，也没有指定<literal>FOR ORDER BY</>，
那么缺省是<literal>FOR SEARCH</>。
</para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">support_number</replaceable></term>
    <listitem>
     <!--
<para>
      The index method's support procedure number for a
      function associated with the operator class.
     </para>
-->
<para>
索引方法对一个与操作符类关联的函数的支持过程数
</para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">function_name</replaceable></term>
    <listitem>
     <!--
<para>
      The name (optionally schema-qualified) of a function that is an
      index method support procedure for the operator class.
     </para>
-->
<para>
一个函数的名字(可以有模式修饰)，这个函数是索引方法对此操作符类的支持过程。
</para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">argument_type</replaceable></term>
    <listitem>
     <!--
<para>
      The parameter data type(s) of the function.
     </para>
-->
<para>
函数参数的数据类型。
</para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">storage_type</replaceable></term>
    <listitem>
     <!--
<para>
      The data type actually stored in the index.  Normally this is
      the same as the column data type, but some index methods
      (currently GiST and GIN) allow it to be different.  The
      <literal>STORAGE</> clause must be omitted unless the index
      method allows a different type to be used.
     </para>
-->
<para>
实际存储在索引里的数据类型。通常它和字段数据类型相同，
但是一些索引方法(目前是GiST和GIN)允许它是不同的。
除非索引方法允许使用一种不同的类型，否则必须省略<literal>STORAGE</>子句。
</para>
    </listitem>
   </varlistentry>
  </variablelist>

  <!--
<para>
   The <literal>OPERATOR</>, <literal>FUNCTION</>, and <literal>STORAGE</>
   clauses can appear in any order.
  </para>
-->
<para>
<literal>OPERATOR</>、<literal>FUNCTION</>和<literal>STORAGE</>
子句可以按照任意顺序出现。
</para>
 </refsect1>

 <refsect1>
  <!--
<title>Notes</title>
-->
<title>注意</title>

  <!--
<para>
   Because the index machinery does not check access permissions on functions
   before using them, including a function or operator in an operator class
   is tantamount to granting public execute permission on it.  This is usually
   not an issue for the sorts of functions that are useful in an operator
   class.
  </para>
-->
<para>
因为索引机制不在使用函数前检查其访问机制，
在操作符类中包含操作符或者函数等价于授权给所有人执行权限。
这对于那些用于操作符类的函数通常不会导致什么问题。
</para>

  <!--
<para>
   The operators should not be defined by SQL functions.  A SQL function
   is likely to be inlined into the calling query, which will prevent
   the optimizer from recognizing that the query matches an index.
  </para>
-->
<para>
操作符不应该用 SQL 函数定义。一个 SQL 函数很可能是内联到调用它的查询里面，
这样将阻止优化器识别这个查询是否可以使用索引。
</para>

  <!--
<para>
   Before <productname>PostgreSQL</productname> 8.4, the <literal>OPERATOR</>
   clause could include a <literal>RECHECK</> option.  This is no longer
   supported because whether an index operator is <quote>lossy</> is now
   determined on-the-fly at run time.  This allows efficient handling of
   cases where an operator might or might not be lossy.
  </para>
-->
<para>
<productname>PostgreSQL</productname> 8.4之前，<literal>OPERATOR</>
子句可以包括<literal>RECHECK</>选项。现在不再支持了，
因为一个索引操作符是否是<quote>有损耗的</>，现在是在运行时动态确定。
这允许高效的处理操作符有或没有损耗的情况。
</para>
 </refsect1>

 <refsect1>
  <!--
<title>Examples</title>
-->
<title>例子</title>

  <!--
<para>
   The following example command defines a GiST index operator class
   for the data type <literal>_int4</> (array of <type>int4</type>).  See the
   <xref linkend="intarray"> module for the complete example.
  </para>
-->
<para>
下面的例子命令为数据类型<literal>_int4</>(<type>int4</type>数组)
定义了一个 GiST 索引操作符类。参阅<xref linkend="intarray">模块获取完整的例子。
</para>

<programlisting>
CREATE OPERATOR CLASS gist__int_ops
    DEFAULT FOR TYPE _int4 USING gist AS
        OPERATOR        3       &amp;&amp;,
        OPERATOR        6       = (anyarray, anyarray),
        OPERATOR        7       @&gt;,
        OPERATOR        8       &lt;@,
        OPERATOR        20      @@ (_int4, query_int),
        FUNCTION        1       g_int_consistent (internal, _int4, int, oid, internal),
        FUNCTION        2       g_int_union (internal, internal),
        FUNCTION        3       g_int_compress (internal),
        FUNCTION        4       g_int_decompress (internal),
        FUNCTION        5       g_int_penalty (internal, internal, internal),
        FUNCTION        6       g_int_picksplit (internal, internal),
        FUNCTION        7       g_int_same (_int4, _int4, internal);
</programlisting>
 </refsect1>

 <refsect1>
  <!--
<title>Compatibility</title>
-->
<title>兼容性</title>

  <!--
<para>
   <command>CREATE OPERATOR CLASS</command> is a
   <productname>PostgreSQL</productname> extension.  There is no
   <command>CREATE OPERATOR CLASS</command> statement in the SQL
   standard.
  </para>
-->
<para>
<command>CREATE OPERATOR CLASS</command>是一个<productname>PostgreSQL</productname>
扩展。在SQL标准中没有这个语句。
</para>
 </refsect1>

 <refsect1>
  <!--
<title>See Also</title>
-->
<title>又见</title>

  <simplelist type="inline">
   <member><xref linkend="sql-alteropclass"></member>
   <member><xref linkend="sql-dropopclass"></member>
   <member><xref linkend="sql-createopfamily"></member>
   <member><xref linkend="sql-alteropfamily"></member>
  </simplelist>
 </refsect1>
</refentry>
