<!--
doc/src/sgml/ref/ecpg-ref.sgml
PostgreSQL documentation
-->

<refentry id="APP-ECPG">
 <refmeta>
  <refentrytitle><application>ecpg</application></refentrytitle>
  <manvolnum>1</manvolnum>
  <!-- 
  <refmiscinfo>Application</refmiscinfo> 
  -->
  <refmiscinfo>应用</refmiscinfo>
 </refmeta>

 <refnamediv>
  <refname><application>ecpg</application></refname>
  <!-- 
  <refpurpose>embedded SQL C preprocessor</refpurpose> 
  -->
  <refpurpose>嵌入的 SQL C 预处理器</refpurpose>
 </refnamediv>

 <indexterm zone="app-ecpg">
  <primary>ecpg</primary>
 </indexterm>

 <refsynopsisdiv>
  <cmdsynopsis>
   <command>ecpg</command>
   <arg choice="opt" rep="repeat"><replaceable>option</replaceable></arg>
   <arg choice="plain" rep="repeat"><replaceable>file</replaceable></arg>
  </cmdsynopsis>
 </refsynopsisdiv>


 <refsect1 id="APP-ECPG-description">
  <!--
<title>Description</title>
-->
<title>描述</title>

  <!--
<para>
   <command>ecpg</command> is the embedded SQL preprocessor for C
   programs.  It converts C programs with embedded SQL statements to
   normal C code by replacing the SQL invocations with special
   function calls.  The output files can then be processed with any C
   compiler tool chain.
  </para>
-->
<para>
<command>ecpg</command>是一个嵌入的用于 C 语言的 SQL 预编译器。
它把嵌有 SQL 语句的 C 程序通过将 SQL 调用替换成特殊的函数调用的方法转换成普通的 C 代码。
然后输出的文件就可以用任何 C 编译工具进行处理。
</para>

  <!--
<para>
   <command>ecpg</command> will convert each input file given on the
   command line to the corresponding C output file.  Input files
   preferably have the extension <filename>.pgc</filename>, in which
   case the extension will be replaced by <filename>.c</filename> to
   determine the output file name.  If the extension of the input file
   is not <filename>.pgc</filename>, then the output file name is
   computed by appending <literal>.c</literal> to the full file name.
   The output file name can also be overridden using the
   <option>-o</option> option.
  </para>
-->
<para>
<command>ecpg</command>将把命令行上给出的每个输入文件转换成对应的 C 输出文件。
输入文件最好有<filename>.pgc</filename>扩展名，这样，这个扩展将被替换成
<filename>.c</filename>来决定输出文件名。如果输入文件的扩展不是<filename>.pgc</filename>，
那么输出文件名将通过在全文件名后面附加<literal>.c</literal>来生成。
输出文件名也可以用<option>-o</option>选项覆盖。
</para>

  <!--
<para>
   This reference page does not describe the embedded SQL language.
   See <xref linkend="ecpg"> for more information on that topic.
  </para>
-->
<para>
本手册页并不描述嵌入的 SQL 语句，参阅<xref linkend="ecpg">获更多信息。
</para>
 </refsect1>


 <refsect1>
  <!-- 
  <title>Options</title> 
  -->
  <title>选项</title>

  
<para>
<!-- 
   <command>ecpg</command> accepts the following command-line
   arguments:
-->
<command>ecpg</command>接受下面命令行参数：
   <variablelist>
    <varlistentry>
     <term><option>-c</option></term>
     <listitem>
<!--
      <para>
       Automatically generate certain C code from SQL code.  Currently, this
       works for <literal>EXEC SQL TYPE</literal>.
      </para>
-->
<para>
为 SQL 代码自动生成某种 C 代码。目前，这个选项可以用于<literal>EXEC SQL TYPE</literal>。
</para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><option>-C <replaceable>mode</replaceable></option></term>
     <listitem>
      <!--
<para>
       Set a compatibility mode.  <replaceable>mode</replaceable> can
       be <literal>INFORMIX</literal> or
       <literal>INFORMIX_SE</literal>.
      </para>
-->
<para>
设置一个兼容模式。<replaceable>mode</replaceable>可以是<literal>INFORMIX</literal>
或<literal>INFORMIX_SE</literal>之一。
</para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><option>-D <replaceable>symbol</replaceable></option></term>
     <listitem>
      <!--
<para>
       Define a C preprocessor symbol.
      </para>
-->
<para>
定义一个 C 预处理器符号。
</para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><option>-i</option></term>
     <listitem>
      <!--
<para>
       Parse system include files as well.
      </para>
-->
<para>
同时也分析系统包含文件。
</para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><option>-I <replaceable class="parameter">directory</replaceable></option></term>
     <listitem>
      <!--
<para>
       Specify an additional include path, used to find files included
       via <literal>EXEC SQL INCLUDE</literal>.  Defaults are
       <filename>.</filename> (current directory),
       <filename>/usr/local/include</filename>, the
       <productname>PostgreSQL</productname> include directory which
       is defined at compile time (default:
       <filename>/usr/local/pgsql/include</filename>), and
       <filename>/usr/include</filename>, in that order.
      </para>
-->
<para>
声明一个附加的包含路径。用于寻找通过<literal>EXEC SQL INCLUDE</literal>包含的文件。
缺省是：<filename>.</filename>(当前目录)、<filename>/usr/local/include</filename>、
在编译时定义的<productname>PostgreSQL</productname>包含路径(缺省为：
<filename>/usr/local/pgsql/include</filename>)、<filename>/usr/include</filename>。顺序同上。
</para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><option>-o <replaceable>filename</replaceable></option></term>
     <listitem>
      <!--
<para>
       Specifies that <command>ecpg</command> should write all
       its output to the given <replaceable>filename</replaceable>.
      </para>
-->
<para>
指定<command>ecpg</command>应该把它的所有输出写到给出的<replaceable>filename</replaceable>里。
</para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><option>-r <replaceable>option</replaceable></option></term>
     <listitem>
      
<para>
       <!-- 
   Selects run-time behavior.  <replaceable>Option</replaceable> can be
       one of the following: 
   -->
   选择一个运行时行为。<replaceable>Option</replaceable>可以是下列的：
       <variablelist>
        <varlistentry>
         <term><option>no_indicator</option></term>
         <listitem>
<!--         <para>
         Do not use indicators but instead use special values to represent
         null values. Historically there have been databases using this approach.
         </para>
-->
<para>
不使用指示器，但是使用特殊的值来表示空值。历史上有过数据库使用这种方法。
</para>
         </listitem>
        </varlistentry>
        <varlistentry>
         <term><option>prepare</option></term>
         <listitem>
         <!--
<para>
         Prepare all statements before using them. Libecpg will keep a cache of
         prepared statements and reuse a statement if it gets executed again. If the
         cache runs full, libecpg will free the least used statement.
         </para>
-->
<para>
使用它们之前预备所有语句。Libecpg将保存一个预备语句的缓冲，并且如果再次执行就重复使用一个语句。
如果缓存运行满了，Libecpg将释放最近使用的语句。
</para>
         </listitem>
        </varlistentry>
        <varlistentry>
         <term><option>questionmarks</option></term>
         <listitem>
         <!--
<para>
         Allow question mark as placeholder for compatibility reasons.
         This used to be the default long ago.
         </para>
-->
<para>
允许问号标识为了兼容原因作为占位符。很久以前这是缺省。
</para>
         </listitem>
        </varlistentry>
       </variablelist></para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><option>-t</option></term>
     <listitem>
      <!--
<para>
       Turn on autocommit of transactions. In this mode, each SQL command is
       automatically committed unless it is inside an explicit
       transaction block. In the default mode, commands are committed
       only when <command>EXEC SQL COMMIT</command> is issued.
      </para>
-->
<para>
打开自动提交模式。在这种模式下，每个查询都自动提交，除非它是包围在一个明确的事务块中。
在缺省模式下，命令只是在发出<command>EXEC SQL COMMIT</command>的时候提交。
</para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><option>-v</option></term>
     <listitem>
      <!--
<para>
       Print additional information including the version and the
       "include" path.
      </para>
-->
<para>
打印额外的信息，包括版本和"include"路径。
</para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><option>--version</option></term>
     <listitem>
      <!--
<para>
       Print the <application>ecpg</application> version and exit.
      </para>
-->
<para>
打印<application>ecpg</application>版本然后退出。
</para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><option>-?</option></term>
     <term><option>--help</option></term>
     <listitem>
      <!--
<para>
       Show help about <application>ecpg</application> command line
       arguments, and exit.
      </para>
-->
<para>
显示关于<application>ecpg</application>命令行参数的帮助，然后退出。
</para>
     </listitem>
    </varlistentry>

   </variablelist>
  </para>
 </refsect1>


 <refsect1>
  <!--
<title>Notes</title>
-->
<title>注意</title>

  <!--
<para>
   When compiling the preprocessed C code files, the compiler needs to
   be able to find the <application>ECPG</> header files in the
   <productname>PostgreSQL</> include directory.  Therefore, you might
   have to use the <option>-I</> option when invoking the compiler
   (e.g., <literal>-I/usr/local/pgsql/include</literal>).
  </para>
-->
<para>
在编译预处理的 C 代码文件的时候，编译器需要能够找到<productname>PostgreSQL</>
包含目录里面的<application>ECPG</>头文件。因此，在调用编译器的时候可能需要使用
<option>-I</>选项(比如<literal>-I/usr/local/pgsql/include</literal>)。
</para>

  <!--
<para>
   Programs using C code with embedded SQL have to be linked against
   the <filename>libecpg</filename> library, for example using the
   linker options <literal>-L/usr/local/pgsql/lib -lecpg</literal>.
  </para>
-->
<para>
使用了嵌入 SQL 的 C 代码必须和<filename>libecpg</filename>库链接，比如，
使用这样的链接选项：<literal>-L/usr/local/pgsql/lib -lecpg</literal>。
</para>

  <!--
<para>
   The value of either of these directories that is appropriate for
   the installation can be found out using <xref
   linkend="app-pgconfig">.
  </para>
-->
<para>
这些目录的实际值可以通过<xref linkend="app-pgconfig">找到。
</para>
 </refsect1>


 <refsect1>
  <!--
<title>Examples</title>
-->
<title>例子</title>

  <!--
<para>
   If you have an embedded SQL C source file named
   <filename>prog1.pgc</filename>, you can create an executable
   program using the following sequence of commands:
<programlisting>
ecpg prog1.pgc
cc -I/usr/local/pgsql/include -c prog1.c
cc -o prog1 prog1.o -L/usr/local/pgsql/lib -lecpg
</programlisting></para>
-->
<para>
如果你有一个叫<filename>prog1.pgc</filename>的嵌入 SQL 的 C 源代码，
你可以用下面的命令序列创建一个可执行程序：
<programlisting>
ecpg prog1.pgc
cc -I/usr/local/pgsql/include -c prog1.c
cc -o prog1 prog1.o -L/usr/local/pgsql/lib -lecpg
</programlisting>
</para>
 </refsect1>

</refentry>
