<!--
doc/src/sgml/ref/update.sgml
PostgreSQL documentation
-->

<refentry id="SQL-UPDATE">
 <refmeta>
  <refentrytitle>UPDATE</refentrytitle>
  <manvolnum>7</manvolnum>
  <!--
<refmiscinfo>SQL - Language Statements</refmiscinfo>
-->
<refmiscinfo>SQL - 语句</refmiscinfo>
 </refmeta>

 <refnamediv>
  <refname>UPDATE</refname>
  <!-- 
  <refpurpose>update rows of a table</refpurpose> 
  -->
  <refpurpose>更新一个表中的行</refpurpose>
 </refnamediv>

 <indexterm zone="sql-update">
  <primary>UPDATE</primary>
 </indexterm>

 <refsynopsisdiv>
<synopsis>
[ WITH [ RECURSIVE ] <replaceable class="parameter">with_query</replaceable> [, ...] ]
UPDATE [ ONLY ] <replaceable class="PARAMETER">table_name</replaceable> [ * ] [ [ AS ] <replaceable class="parameter">alias</replaceable> ]
    SET { <replaceable class="PARAMETER">column_name</replaceable> = { <replaceable class="PARAMETER">expression</replaceable> | DEFAULT } |
          ( <replaceable class="PARAMETER">column_name</replaceable> [, ...] ) = ( { <replaceable class="PARAMETER">expression</replaceable> | DEFAULT } [, ...] ) } [, ...]
    [ FROM <replaceable class="PARAMETER">from_list</replaceable> ]
    [ WHERE <replaceable class="PARAMETER">condition</replaceable> | WHERE CURRENT OF <replaceable class="PARAMETER">cursor_name</replaceable> ]
    [ RETURNING * | <replaceable class="parameter">output_expression</replaceable> [ [ AS ] <replaceable class="parameter">output_name</replaceable> ] [, ...] ]
</synopsis>
 </refsynopsisdiv>

 <refsect1>
  <!--
<title>Description</title>
-->
<title>描述</title>

  <!--
<para>
   <command>UPDATE</command> changes the values of the specified
   columns in all rows that satisfy the condition. Only the columns to
   be modified need be mentioned in the <literal>SET</literal> clause;
   columns not explicitly modified retain their previous values.
  </para>
-->
<para>
<command>UPDATE</command>改变满足条件的所有行中指定的字段值。
只在<literal>SET</literal>子句中出现需要修改的行，没有出现的其他字段保持它们原来的数值。
</para>

  <!--
<para>
   There are two ways to modify a table using information contained in
   other tables in the database: using sub-selects, or specifying
   additional tables in the <literal>FROM</literal> clause. Which
   technique is more appropriate depends on the specific
   circumstances.
  </para>
-->
<para>
使用同一数据库里其它表的信息来更新一个表有两种方法：使用子查询，
或者在<literal>FROM</literal>子句里声明另外一个表。哪个方法更好取决于具体的环境。
</para>

  <!--
<para>
   The optional <literal>RETURNING</> clause causes <command>UPDATE</>
   to compute and return value(s) based on each row actually updated.
   Any expression using the table's columns, and/or columns of other
   tables mentioned in <literal>FROM</literal>, can be computed.
   The new (post-update) values of the table's columns are used.
   The syntax of the <literal>RETURNING</> list is identical to that of the
   output list of <command>SELECT</>.
  </para>
-->
<para>
可选的<literal>RETURNING</>子句将导致<command>UPDATE</>基于每个被更新的行计算返回值。
任何使用表的字段的表达式或<literal>FROM</literal>中使用的其他表的字段都可以用于计算。
计算的时候使用刚刚被更新过的字段新值。<literal>RETURNING</>
列表的语法与<command>SELECT</>的输出列表相同。
</para>

  <!--
<para>
   You must have the <literal>UPDATE</literal> privilege on the table,
   or at least on the column(s) that are listed to be updated.
   You must also have the <literal>SELECT</literal>
   privilege on any column whose values are read in the
   <replaceable class="parameter">expressions</replaceable> or
   <replaceable class="parameter">condition</replaceable>.
  </para>
-->
<para>
你必须对表或至少在列出的要被更新的字段上有<literal>UPDATE</literal>权限，
同样在<replaceable class="parameter">expressions</replaceable>
或<replaceable class="parameter">condition</replaceable>
条件里提到的任何字段上也要有<literal>SELECT</literal>权限。
</para>
 </refsect1>

 <refsect1>
  <!--
<title>Parameters</title>
-->
<title>参数</title>

  <variablelist>
   <varlistentry>
    <term><replaceable class="parameter">with_query</replaceable></term>
    <listitem>
     <!--
<para>
      The <literal>WITH</literal> clause allows you to specify one or more
      subqueries that can be referenced by name in the <command>UPDATE</>
      query. See <xref linkend="queries-with"> and <xref linkend="sql-select">
      for details.
     </para>
-->
<para>
<literal>WITH</literal>子句允许声明一个或多个可以在<command>UPDATE</>
查询中通过名字引用的子查询。参阅<xref linkend="queries-with"> 和 
<xref linkend="sql-select">获取详细信息。
</para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="PARAMETER">table_name</replaceable></term>
    <listitem>
     <!--
<para>
      The name (optionally schema-qualified) of the table to update.
      If <literal>ONLY</> is specified before the table name, matching rows
      are updated in the named table only.  If <literal>ONLY</> is not
      specified, matching rows are also updated in any tables inheriting from
      the named table.  Optionally, <literal>*</> can be specified after the
      table name to explicitly indicate that descendant tables are included.
     </para>
-->
<para>
要更新的表的名称(可以有模式修饰)。如果在表名前声明了<literal>ONLY</>，
那么只在该表中更新匹配的行。如果没有声明<literal>ONLY</>，那么该表的任何继承表内的匹配行也要更新。
可选的，可以在表名后面声明<literal>*</>以明确表明包含后代表。
</para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">alias</replaceable></term>
    <listitem>
     <!--
<para>
      A substitute name for the target table. When an alias is
      provided, it completely hides the actual name of the table.  For
      example, given <literal>UPDATE foo AS f</>, the remainder of the
      <command>UPDATE</command> statement must refer to this table as
      <literal>f</> not .
     </para>
-->
<para>
目标表的别名。如果指定了别名，那么它将完全遮盖表的本名。例如，给定
<literal>UPDATE foo AS f</>之后，剩余的<command>UPDATE</command> 
语句必须用<literal>f</>而不是<literal>foo</>引用这个表。
</para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="PARAMETER">column_name</replaceable></term>
    <listitem>
     <!--
<para>
      The name of a column in the table named by <replaceable
      class="PARAMETER">table_name</replaceable>.
      The column name can be qualified with a subfield name or array
      subscript, if needed.  Do not include the table's name in the
      specification of a target column &mdash; for example,
      <literal>UPDATE tab SET tab.col = 1</> is invalid.
     </para>
-->
<para>
表<replaceable class="PARAMETER">table_name</replaceable>中的字段名。必要时，
字段名可以用子域名或者数组下标修饰。不要在指定字段名的时候加上表名字。
比如<literal>UPDATE tab SET tab.col = 1</>就是错误的。
</para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="PARAMETER">expression</replaceable></term>
    <listitem>
     <!--
<para>
      An expression to assign to the column.  The expression can use the
      old values of this and other columns in the table.
     </para>
-->
<para>
给字段赋值的表达式。表达式可以使用这个或其它字段更新前的旧值。
</para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>DEFAULT</literal></term>
    <listitem>
     <!--
<para>
      Set the column to its default value (which will be NULL if no
      specific default expression has been assigned to it).
     </para>
-->
<para>
把字段设置为它的缺省值，如果没有缺省表达式，那么就是 NULL。
</para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="PARAMETER">from_list</replaceable></term>
    <listitem>
     <!--
<para>
      A list of table expressions, allowing columns from other tables
      to appear in the <literal>WHERE</> condition and the update
      expressions. This is similar to the list of tables that can be
      specified in the <xref linkend="sql-from"
      endterm="sql-from-title"> of a <command>SELECT</command>
      statement.  Note that the target table must not appear in the
      <replaceable>from_list</>, unless you intend a self-join (in which
      case it must appear with an alias in the <replaceable>from_list</>).
     </para>
-->
<para>
一个表表达式的列表，允许来自其它表中的字段出现在<literal>WHERE</>条件里和更新表达式中。
这个类似于可以在一个<command>SELECT</command>语句的<xref linkend="sql-from" endterm="sql-from-title">
子句里声明表列表。请注意目标表绝对不能出现在<replaceable>from_list</>里，
除非你是在使用一个自连接(此时它必须以<replaceable>from_list</>的别名出现)。
</para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="PARAMETER">condition</replaceable></term>
    <listitem>
     <!--
<para>
      An expression that returns a value of type <type>boolean</type>.
      Only rows for which this expression returns <literal>true</>
      will be updated.
     </para>
-->
<para>
一个返回<type>boolean</type>结果的表达式。只有这个表达式返回<literal>true</>的行才会被更新。
</para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="PARAMETER">cursor_name</replaceable></term>
    <listitem>
     <!--
<para>
      The name of the cursor to use in a <literal>WHERE CURRENT OF</>
      condition.  The row to be updated is the one most recently fetched
      from this cursor.  The cursor must be a non-grouping
      query on the <command>UPDATE</>'s target table.
      Note that <literal>WHERE CURRENT OF</> cannot be
      specified together with a Boolean condition.  See
      <xref linkend="sql-declare">
      for more information about using cursors with
      <literal>WHERE CURRENT OF</>.
     </para>
-->
<para>
在<literal>WHERE CURRENT OF</>条件下使用的游标的名称。要更新的行是最近从该游标中抓去的行。
该游标必须是一个<command>UPDATE</>目标表中的非分组查询。请注意<literal>WHERE CURRENT OF</>
不能与布尔条件一起声明。参阅<xref linkend="sql-declare">获取更多关于通过
<literal>WHERE CURRENT OF</>使用游标的信息。
</para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="PARAMETER">output_expression</replaceable></term>
    <listitem>
     <!--
<para>
      An expression to be computed and returned by the <command>UPDATE</>
      command after each row is updated.  The expression can use any
      column names of the table named by <replaceable class="PARAMETER">table_name</replaceable>
      or table(s) listed in <literal>FROM</>.
      Write <literal>*</> to return all columns.
     </para>
-->
<para>
在所有需要更新的行都被更新之后，<command>UPDATE</>命令用于计算返回值的表达式。
这个表达式可以使用任何<replaceable class="PARAMETER">table_name</replaceable>
命名的表以及<literal>FROM</>中列出的表的字段。写上<literal>*</>表示返回所有字段。
</para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="PARAMETER">output_name</replaceable></term>
    <listitem>
     <!--
<para>
      A name to use for a returned column.
     </para>
-->
<para>
字段的返回名称。
</para>
    </listitem>
   </varlistentry>
  </variablelist>
 </refsect1>

 <refsect1>
  <title>Outputs</title>

  <!--
<para>
   On successful completion, an <command>UPDATE</> command returns a command
   tag of the form
<screen>
UPDATE <replaceable class="parameter">count</replaceable>
</screen>
   The <replaceable class="parameter">count</replaceable> is the number
   of rows updated, including matched rows whose values did not change.
   Note that the number may be less than the number of rows that matched
   the <replaceable class="parameter">condition</replaceable> when
   updates were suppressed by a <literal>BEFORE UPDATE</> trigger.  If
   <replaceable class="parameter">count</replaceable> is 0, no rows were
   updated by the query (this is not considered an error).
  </para>
-->
<para>
成功完成后，<command>UPDATE</>返回形如
<screen>
UPDATE <replaceable class="parameter">count</replaceable>
</screen>
的命令标签。<replaceable class="parameter">count</replaceable>是更新的行数，
包括没有改变值的匹配行。请注意当更新受到<literal>BEFORE UPDATE</>触发器的抑制时，
这个数字可能小于匹配<replaceable class="parameter">condition</replaceable>的行数。
如果<replaceable class="parameter">count</replaceable>为 0，则没有行被这个查询更新
(这个不认为是错误)。
</para>

  <!--
<para>
   If the <command>UPDATE</> command contains a <literal>RETURNING</>
   clause, the result will be similar to that of a <command>SELECT</>
   statement containing the columns and values defined in the
   <literal>RETURNING</> list, computed over the row(s) updated by the
   command.
  </para>
-->
<para>
如果<command>UPDATE</>包含<literal>RETURNING</>子句，那么返回的结果将类似于包含在
<literal>RETURNING</>列表中定义的字段和值的<command>SELECT</>语句，
只不过返回结果是基于被更新的行而已。
</para>
 </refsect1>

 <refsect1>
  <!--
<title>Notes</title>
-->
<title>注意</title>

  <!--
<para>
   When a <literal>FROM</> clause is present, what essentially happens
   is that the target table is joined to the tables mentioned in the
   <replaceable>from_list</replaceable>, and each output row of the join
   represents an update operation for the target table.  When using
   <literal>FROM</> you should ensure that the join
   produces at most one output row for each row to be modified.  In
   other words, a target row shouldn't join to more than one row from
   the other table(s).  If it does, then only one of the join rows
   will be used to update the target row, but which one will be used
   is not readily predictable.
  </para>
-->
<para>
在出现<literal>FROM</>子句的时候，实际上发生的事情是目标表和<replaceable>from_list</replaceable>
里提到的表连接在一起，并且每个连接输出行都代表一个目标表的更新操作。
在使用<literal>FROM</>的时候，你应该保证连接为每个需要修改的行最多生成一个输出行。
换句话说，一个目标行不应该和超过一行来自其它表的数据行连接。如果它连接了多于一个行，
那么连接行里面将会只有一行用于更新目标行，但是究竟使用哪行是很难预期的事情。
</para>

  <!--
<para>
   Because of this indeterminacy, referencing other tables only within
   sub-selects is safer, though often harder to read and slower than
   using a join.
  </para>
-->
<para>
因为这个不确定性，只在子查询里面引用其它表是安全的，尽管通常更难读并且比使用连接也更慢些。
</para>
 </refsect1>

 <refsect1>
  <!--
<title>Examples</title>
-->
<title>例子</title>

  <!--
<para>
   Change the word <literal>Drama</> to <literal>Dramatic</> in the
   column <structfield>kind</> of the table <structname>films</structname>:

<programlisting>
UPDATE films SET kind = 'Dramatic' WHERE kind = 'Drama';
</programlisting>
  </para>
-->
<para>
把表<structname>films</structname>里的字段<structfield>kind</>里的词
<literal>Drama</>用<literal>Dramatic</>代替：
<programlisting>
UPDATE films SET kind = 'Dramatic' WHERE kind = 'Drama';
</programlisting>
</para>

  <!--
<para>
   Adjust temperature entries and reset precipitation to its default
   value in one row of the table <structname>weather</structname>:

<programlisting>
UPDATE weather SET temp_lo = temp_lo+1, temp_hi = temp_lo+15, prcp = DEFAULT
  WHERE city = 'San Francisco' AND date = '2003-07-03';
</programlisting>
  </para>
-->
<para>
调整表<structname>weather</structname>中的某行的温度并把该行的降水量设置为缺省值：
<programlisting>
UPDATE weather SET temp_lo = temp_lo+1, temp_hi = temp_lo+15, prcp = DEFAULT
  WHERE city = 'San Francisco' AND date = '2003-07-03';
</programlisting>
</para>

  <!--
<para>
   Perform the same operation and return the updated entries:

<programlisting>
UPDATE weather SET temp_lo = temp_lo+1, temp_hi = temp_lo+15, prcp = DEFAULT
  WHERE city = 'San Francisco' AND date = '2003-07-03'
  RETURNING temp_lo, temp_hi, prcp;
</programlisting>
  </para>
-->
<para>
做同样的事情并返回更新后的条目：
<programlisting>
UPDATE weather SET temp_lo = temp_lo+1, temp_hi = temp_lo+15, prcp = DEFAULT
  WHERE city = 'San Francisco' AND date = '2003-07-03'
  RETURNING temp_lo, temp_hi, prcp;
</programlisting>
</para>

  <!--
<para>
   Use the alternative column-list syntax to do the same update:
<programlisting>
UPDATE weather SET (temp_lo, temp_hi, prcp) = (temp_lo+1, temp_lo+15, DEFAULT)
  WHERE city = 'San Francisco' AND date = '2003-07-03';
</programlisting>
  </para>
-->
<para>
使用另一种字段列表语法来做同样的事情：
<programlisting>
UPDATE weather SET (temp_lo, temp_hi, prcp) = (temp_lo+1, temp_lo+15, DEFAULT)
  WHERE city = 'San Francisco' AND date = '2003-07-03';
</programlisting>
</para>

  <!--
<para>
   Increment the sales count of the salesperson who manages the
   account for Acme Corporation, using the <literal>FROM</literal>
   clause syntax:
<programlisting>
UPDATE employees SET sales_count = sales_count + 1 FROM accounts
  WHERE accounts.name = 'Acme Corporation'
  AND employees.id = accounts.sales_person;
</programlisting>
  </para>
-->
<para>
增加负责 Acme 公司客户的销售员的销售计数，使用<literal>FROM</literal>子句语法：
<programlisting>
UPDATE employees SET sales_count = sales_count + 1 FROM accounts
  WHERE accounts.name = 'Acme Corporation'
  AND employees.id = accounts.sales_person;
</programlisting>
</para>

  <!--
<para>
   Perform the same operation, using a sub-select in the
   <literal>WHERE</literal> clause:
<programlisting>
UPDATE employees SET sales_count = sales_count + 1 WHERE id =
  (SELECT sales_person FROM accounts WHERE name = 'Acme Corporation');
</programlisting>
  </para>
-->
<para>
使用<literal>WHERE</literal>子句里的子查询执行同样的操作：
<programlisting>
UPDATE employees SET sales_count = sales_count + 1 WHERE id =
  (SELECT sales_person FROM accounts WHERE name = 'Acme Corporation');
</programlisting>
</para>
<para>
 <!-- 
 Attempt to insert a new stock item along with the quantity of stock. If
   the item already exists, instead update the stock count of the existing
   item. To do this without failing the entire transaction, use savepoints: 
-->
试图带着库存量插入一个新的库存项。如果该项存在，则更新现有项的库存数。
要做这件事情而又不使整个事务失效，使用保留点。
<programlisting>
BEGIN;
-- <!-- other operations -->其它操作
SAVEPOINT sp1;
INSERT INTO wines VALUES('Chateau Lafite 2003', '24');
-- <!-- Assume the above fails because of a unique key violation, -->假设上面因为一个唯一键字违例而失效，
-- <!-- so now we issue these commands: -->因此现在发出这些命令：
ROLLBACK TO sp1;
UPDATE wines SET stock = stock + 24 WHERE winename = 'Chateau Lafite 2003';
-- <!-- continue with other operations, and eventually -->继续其它操作，最后
COMMIT;
</programlisting>
  </para>

  <!--
<para>
   Change the <structfield>kind</> column of the table
   <structname>films</structname> in the row on which the cursor
   <literal>c_films</> is currently positioned:
<programlisting>
UPDATE films SET kind = 'Dramatic' WHERE CURRENT OF c_films;
</programlisting></para>
-->
<para>
更改表<structname>films</structname>的<structfield>kind</>列，
在游标<literal>c_films</>目前定位的行上：
<programlisting>
UPDATE films SET kind = 'Dramatic' WHERE CURRENT OF c_films;
</programlisting>
</para>
 </refsect1>

 <refsect1>
  <!--
<title>Compatibility</title>
-->
<title>兼容性</title>

  <!--
<para>
   This command conforms to the <acronym>SQL</acronym> standard, except
   that the <literal>FROM</literal> and <literal>RETURNING</> clauses
   are <productname>PostgreSQL</productname> extensions, as is the ability
   to use <literal>WITH</> with <command>UPDATE</>.
  </para>
-->
<para>
这条命令遵循<acronym>SQL</acronym>标准。只是<literal>FROM</literal>和<literal>RETURNING</>
子句是<productname>PostgreSQL</productname>扩展，就像和<command>UPDATE</>一起使用<literal>WITH</>。
</para>

  <!--
<para>
   According to the standard, the column-list syntax should allow a list
   of columns to be assigned from a single row-valued expression, such
   as a sub-select:
<programlisting>
UPDATE accounts SET (contact_last_name, contact_first_name) =
    (SELECT last_name, first_name FROM salesmen
     WHERE salesmen.id = accounts.sales_id);
</programlisting>
   This is not currently implemented &mdash; the source must be a list
   of independent expressions.
  </para>
-->
<para>
标准的字段列表语法允许从行值表达式指定字段列表，比如一个子查询：
<programlisting>
UPDATE accounts SET (contact_last_name, contact_first_name) =
    (SELECT last_name, first_name FROM salesmen
     WHERE salesmen.id = accounts.sales_id);
</programlisting>
这个功能目前尚未实现：源必须是一个独立的表达式。
</para>

  <!--
<para>
   Some other database systems offer a <literal>FROM</> option in which
   the target table is supposed to be listed again within <literal>FROM</>.
   That is not how <productname>PostgreSQL</productname> interprets
   <literal>FROM</>.  Be careful when porting applications that use this
   extension.
  </para>
-->
<para>
有些其它数据库系统提供一个<literal>FROM</>选项，在这个选项下，
认为目标表会再次在<literal>FROM</>里列出。这不是<productname>PostgreSQL</productname>
解析<literal>FROM</>的方式。移植使用这类扩展的应用时要注意。
</para>
 </refsect1>
</refentry>
