<!--
doc/src/sgml/ref/create_schema.sgml
PostgreSQL documentation
-->

<refentry id="SQL-CREATESCHEMA">
 <refmeta>
  <refentrytitle>CREATE SCHEMA</refentrytitle>
  <manvolnum>7</manvolnum>
  <!--
<refmiscinfo>SQL - Language Statements</refmiscinfo>
-->
<refmiscinfo>SQL - 语句</refmiscinfo>
 </refmeta>

 <refnamediv>
  <refname>CREATE SCHEMA</refname>
  <!--
  <refpurpose>define a new schema</refpurpose>
  -->
  <refpurpose>定义一个新模式</refpurpose>
 </refnamediv>

 <indexterm zone="sql-createschema">
  <primary>CREATE SCHEMA</primary>
 </indexterm>

 <refsynopsisdiv>
<synopsis>
CREATE SCHEMA <replaceable class="parameter">schema_name</replaceable> [ AUTHORIZATION <replaceable class="parameter">user_name</replaceable> ] [ <replaceable class="parameter">schema_element</replaceable> [ ... ] ]
CREATE SCHEMA AUTHORIZATION <replaceable class="parameter">user_name</replaceable> [ <replaceable class="parameter">schema_element</replaceable> [ ... ] ]
CREATE SCHEMA IF NOT EXISTS <replaceable class="parameter">schema_name</replaceable> [ AUTHORIZATION <replaceable class="parameter">user_name</replaceable> ]
CREATE SCHEMA IF NOT EXISTS AUTHORIZATION <replaceable class="parameter">user_name</replaceable>
</synopsis>
 </refsynopsisdiv>

 <refsect1>
  <!--
<title>Description</title>
-->
<title>描述</title>

  <!--
<para>
   <command>CREATE SCHEMA</command> enters a new schema
   into the current database.
   The schema name must be distinct from the name of any existing schema
   in the current database.
  </para>
-->
<para>
<command>CREATE SCHEMA</command>在当前数据库里输入一个新模式。
该模式名将在当前数据库里现存的所有模式名中唯一。
</para>

  <!--
<para>
   A schema is essentially a namespace:
   it contains named objects (tables, data types, functions, and operators)
   whose names can duplicate those of other objects existing in other
   schemas.  Named objects are accessed either by <quote>qualifying</>
   their names with the schema name as a prefix, or by setting a search
   path that includes the desired schema(s).  A <literal>CREATE</> command
   specifying an unqualified object name creates the object
   in the current schema (the one at the front of the search path,
   which can be determined with the function <function>current_schema</function>).
  </para>
-->
<para>
模式实际上是一个名字空间：它包含命名对象(表、数据类型、函数、操作符)
这些名字可以和其它模式里存在的其它对象重名。命名对象要么是通过用模式名作为前缀
<quote>修饰</>进行访问，要么是通过设置一个搜索路径包含所需要的模式。
一条带着无修饰对象名的<literal>CREATE</>命令都是在当前模式中创建创建对象的
(在搜索路径最前面的模式；可以用<function>current_schema</function>函数来判断)。
</para>

  <!--
<para>
   Optionally, <command>CREATE SCHEMA</command> can include subcommands
   to create objects within the new schema.  The subcommands are treated
   essentially the same as separate commands issued after creating the
   schema, except that if the <literal>AUTHORIZATION</> clause is used,
   all the created objects will be owned by that user.
  </para>
-->
<para>
另外，<command>CREATE SCHEMA</command>可以包括在新模式中创建对象的子命令。
这些子命令和那些在创建完模式后发出的命令没有任何区别，
只不过是如果使用了<literal>AUTHORIZATION</>子句，那么所有创建的对象都将被该用户拥有。
</para>
 </refsect1>

 <refsect1>
  <!--
<title>Parameters</title>
-->
<title>参数</title>

    <variablelist>
     <varlistentry>
      <term><replaceable class="parameter">schema_name</replaceable></term>
      <listitem>
       <!--
<para>
        The name of a schema to be created.  If this is omitted, the
        <replaceable class="parameter">user_name</replaceable>
        is used as the schema name.  The name cannot
        begin with <literal>pg_</literal>, as such names
        are reserved for system schemas.
       </para>
-->
<para>
要创建的模式名字。如果省略，则使用
<replaceable class="parameter">user_name</replaceable>作为模式名。
这个名字不能以<literal>pg_</literal>开头，因为这样的名字保留给系统模式使用。
</para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><replaceable class="parameter">user_name</replaceable></term>
      <listitem>
       <!--
<para>
        The role name of the user who will own the new schema.  If omitted,
        defaults to the user executing the command.  To create a schema
        owned by another role, you must be a direct or indirect member of
        that role, or be a superuser.
       </para>
-->
<para>
将拥有该模式的用户的角色名。如果省略，缺省为执行该命令的用户名。
要想创建一个属于其他角色的模式，你必须是那个角色的直接或非直接成员，或是超级用户。
</para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><replaceable class="parameter">schema_element</replaceable></term>
      <listitem>
       <!--
<para>
        An SQL statement defining an object to be created within the
        schema. Currently, only <command>CREATE
        TABLE</>, <command>CREATE VIEW</>, <command>CREATE
        INDEX</>, <command>CREATE SEQUENCE</>, <command>CREATE
        TRIGGER</> and <command>GRANT</> are accepted as clauses
        within <command>CREATE SCHEMA</>. Other kinds of objects may
        be created in separate commands after the schema is created.
       </para>
-->
<para>
一个 SQL 语句，定义一个要在模式里创建的对象。目前，只有<command>CREATE TABLE</>、
<command>CREATE VIEW</>、<command>CREATE INDEX</>、<command>CREATE SEQUENCE</>、
<command>CREATE TRIGGER</>和<command>GRANT</>是可以接受的子句。
其它类型的对象可以在创建完模式之后的独立命令里创建。
</para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><literal>IF NOT EXISTS</literal></term>
      <listitem>
       <!--
<para>
        Do nothing (except issuing a notice) if a schema with the same name
        already exists.  <replaceable class="parameter">schema_element</>
        subcommands cannot be included when this option is used.
       </para>
-->
<para>
如果相同名字的模式已经存在，那么什么也不要做（除了发出一个通知）。
当使用此选项时，不能包括<replaceable class="parameter">schema_element</>子命令。
</para>
      </listitem>
     </varlistentry>
    </variablelist>
 </refsect1>

 <refsect1>
  <!--
<title>Notes</title>
-->
<title>注意</title>

  <!--
<para>
   To create a schema, the invoking user must have the
   <literal>CREATE</> privilege for the current database.
   (Of course, superusers bypass this check.)
  </para>
-->
<para>
要创建模式，调用该命令的用户必需在当前数据库上有<literal>CREATE</>权限。
（当然，超级用户可以绕开这个检查。）
</para>
 </refsect1>

 <refsect1>
  <!--
<title>Examples</title>
-->
<title>例子</title>

<para>
   <!--
   Create a schema:
   -->
   创建一个模式：
<programlisting>
CREATE SCHEMA myschema;
</programlisting>
  </para>

<para>
   <!-- 
   Create a schema for user <literal>joe</>; the schema will also be
   named <literal>joe</>: 
   -->
   为用户<literal>joe</>创建模式，模式名也叫<literal>joe</>：
<programlisting>
CREATE SCHEMA AUTHORIZATION joe;
</programlisting>
  </para>
  
<para>
   <!-- 
   Create a schema named <literal>test</> that will be owned by user
   <literal>joe</>, unless there already is a schema named <literal>test</>.
   (It does not matter whether <literal>joe</> owns the pre-existing schema.) 
   -->
   创建一个名为<literal>test</>的模式，该模式被用户<literal>joe</>所拥有，
   除非已经有一个名为<literal>test</>的模式。
   （这与<literal>joe</>是否拥有早已存在的模式无关。）
<programlisting>
CREATE SCHEMA IF NOT EXISTS test AUTHORIZATION joe;
</programlisting>
  </para>


<para>
   <!--
   Create a schema and create a table and view within it:
   -->
   创建一个模式并且在里面创建一个表：
<programlisting>
CREATE SCHEMA hollywood
    CREATE TABLE films (title text, release date, awards text[])
    CREATE VIEW winners AS
        SELECT title, release FROM films WHERE awards IS NOT NULL;
</programlisting>
  <!-- 
  Notice that the individual subcommands do not end with semicolons. 
  -->
  请注意上面独立的子命令不是由分号结尾的
  </para>

<para>
   <!--
   The following is an equivalent way of accomplishing the same result:
   -->
   下面的命令是实现同样结果的等效语句：
<programlisting>
CREATE SCHEMA hollywood;
CREATE TABLE hollywood.films (title text, release date, awards text[]);
CREATE VIEW hollywood.winners AS
    SELECT title, release FROM hollywood.films WHERE awards IS NOT NULL;
</programlisting></para>

 </refsect1>

 <refsect1>
  <!--
<title>Compatibility</title>
-->
<title>兼容性</title>

  <!--
<para>
   The SQL standard allows a <literal>DEFAULT CHARACTER SET</> clause
   in <command>CREATE SCHEMA</command>, as well as more subcommand
   types than are presently accepted by
   <productname>PostgreSQL</productname>.
  </para>
-->
<para>
SQL 标准允许在<command>CREATE SCHEMA</command>里面有一个
<literal>DEFAULT CHARACTER SET</>子句以及比目前<productname>PostgreSQL</productname>
可以接受的更多的子命令。
</para>

  <!--
<para>
   The SQL standard specifies that the subcommands in <command>CREATE
   SCHEMA</command> can appear in any order.  The present
   <productname>PostgreSQL</productname> implementation does not
   handle all cases of forward references in subcommands; it might
   sometimes be necessary to reorder the subcommands in order to avoid
   forward references.
  </para>
-->
<para>
SQL 标准声明在<command>CREATE SCHEMA</command>里的子命令可以以任意顺序出现。
目前<productname>PostgreSQL</productname>里的实现还不能处理所有子命令里前向引用的情况；
有时候可能需要重排一下子命令的顺序以避免前向引用。
</para>

  <!--
<para>
   According to the SQL standard, the owner of a schema always owns
   all objects within it.  <productname>PostgreSQL</productname>
   allows schemas to contain objects owned by users other than the
   schema owner.  This can happen only if the schema owner grants the
   <literal>CREATE</> privilege on his schema to someone else, or a
   superuser chooses to create objects in it.
  </para>
-->
<para>
在 SQL 标准里，模式的所有者总是拥有其中的所有对象。
<productname>PostgreSQL</productname>允许模式包含非模式所有者拥有的对象。
只有在模式所有者将自己模式的<literal>CREATE</>权限给了其他人，
或者超级用户选择在该模式中创建对象时，才可能出现。
</para>

  <!--
<para>
   The <literal>IF NOT EXISTS</literal> option is a
   <productname>PostgreSQL</productname> extension.
  </para>
-->
<para>
<literal>IF NOT EXISTS</literal>选项是一个<productname>PostgreSQL</productname>扩展。
</para>
 </refsect1>

 <refsect1>
  <!--
<title>See Also</title>
-->
<title>又见</title>

  <simplelist type="inline">
   <member><xref linkend="sql-alterschema"></member>
   <member><xref linkend="sql-dropschema"></member>
 </simplelist>
 </refsect1>

</refentry>
