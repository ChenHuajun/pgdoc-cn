<!--
doc/src/sgml/ref/notify.sgml
PostgreSQL documentation
-->

<refentry id="SQL-NOTIFY">
 <refmeta>
  <refentrytitle>NOTIFY</refentrytitle>
  <manvolnum>7</manvolnum>
  <!--
<refmiscinfo>SQL - Language Statements</refmiscinfo>
-->
<refmiscinfo>SQL - 语句</refmiscinfo>
 </refmeta>

 <refnamediv>
  <refname>NOTIFY</refname>
  <!-- 
  <refpurpose>generate a notification</refpurpose> 
  -->
  <refpurpose>生成一个通知</refpurpose>
 </refnamediv>

 <indexterm zone="sql-notify">
  <primary>NOTIFY</primary>
 </indexterm>

 <refsynopsisdiv>
<synopsis>
NOTIFY <replaceable class="PARAMETER">channel</replaceable> [ , <replaceable class="PARAMETER">payload</replaceable> ]
</synopsis>
 </refsynopsisdiv>

 <refsect1>
  <!--
<title>Description</title>
-->
<title>描述</title>

  <!--
<para>
   The <command>NOTIFY</command> command sends a notification event together
   with an optional <quote>payload</> string to each client application that
   has previously executed
   <command>LISTEN <replaceable class="parameter">channel</></command>
   for the specified channel name in the current database.
   Notifications are visible to all users.
  </para>
-->
<para>
<command>NOTIFY</command>命令向当前数据库中所有执行过
<command>LISTEN <replaceable class="parameter">channel</></command>，
正在监听特定通道名字的前端应用发送一个通知事件和一个可选的<quote>payload</>字符串。
通知对所有用户可见。
</para>

  <!--
<para>
   <command>NOTIFY</command> provides a simple
   interprocess communication mechanism for a collection of processes
   accessing the same <productname>PostgreSQL</productname> database.
   A payload string can be sent along with the notification, and
   higher-level mechanisms for passing structured data can be built by using
   tables in the database to pass additional data from notifier to listener(s).
  </para>
-->
<para>
<command>NOTIFY</command>为访问同一个<productname>PostgreSQL</productname>
数据库的一组进程提供了一种简单的进程间通讯机制。负载字符串可以和通知一起发送，
并且传送结构化数据的更高级的机制可以通过使用数据库中的表从通知者传递数据到接收者。
</para>

  <!--
<para>
   The information passed to the client for a notification event includes the
   notification channel
   name, the notifying session's server process <acronym>PID</>, and the
   payload string, which is an empty string if it has not been specified.
  </para>
-->
<para>
传递给前端的通知事件包括通知通道名、发出通知的后端进程<acronym>PID</>
和负载字符串，如果已经指定了字符串则该负载字符串为空。
</para>

  <!--
<para>
   It is up to the database designer to define the channel names that will
   be used in a given database and what each one means.
   Commonly, the channel name is the same as the name of some table in
   the database, and the notify event essentially means, <quote>I changed this table,
   take a look at it to see what's new</quote>.  But no such association is enforced by
   the <command>NOTIFY</command> and <command>LISTEN</command> commands.  For
   example, a database designer could use several different channel names
   to signal different sorts of changes to a single table.  Alternatively,
   the payload string could be used to differentiate various cases.
  </para>
-->
<para>
定义将要用于给定数据库的通道名和每个意味着什么取决于数据库设计者。
通常，通知通道名与数据库里的表的名字相同，通知事件实际上意味着<quote>我修改了此数据库，
请看一眼有什么新东西</quote>。<command>NOTIFY</command>和<command>LISTEN</command>
命令并不强制这种联系。例如，数据库设计者可以使用几个不同的通道名来标志一个表的几种不同改变。
另外，负载字符串可以用来区分各种情况。
</para>

  <!--
<para>
   When <command>NOTIFY</command> is used to signal the occurrence of changes
   to a particular table, a useful programming technique is to put the
   <command>NOTIFY</command> in a rule that is triggered by table updates.
   In this way, notification happens automatically when the table is changed,
   and the application programmer cannot accidentally forget to do it.
  </para>
-->
<para>
当<command>NOTIFY</command>用于通知某一特定表修改的动作的发生，
一个实用的编程技巧是将<command>NOTIFY</command>放在一个由表更新触发的规则里。用这种方法，
通知将在表更新的时候自动触发，而且应用程序员不会碰巧忘记处理它。
</para>

  <!--
<para>
   <command>NOTIFY</command> interacts with SQL transactions in some important
   ways.  Firstly, if a <command>NOTIFY</command> is executed inside a
   transaction, the notify events are not delivered until and unless the
   transaction is committed.  This is appropriate, since if the transaction
   is aborted, all the commands within it have had no
   effect, including <command>NOTIFY</command>.  But it can be disconcerting if one
   is expecting the notification events to be delivered immediately.  Secondly, if
   a listening session receives a notification signal while it is within a transaction,
   the notification event will not be delivered to its connected client until just
   after the transaction is completed (either committed or aborted).  Again, the
   reasoning is that if a notification were delivered within a transaction that was
   later aborted, one would want the notification to be undone somehow &mdash;
   but
   the server cannot <quote>take back</quote> a notification once it has sent it to the client.
   So notification events are only delivered between transactions.  The upshot of this
   is that applications using <command>NOTIFY</command> for real-time signaling
   should try to keep their transactions short.
  </para>
-->
<para>
<command>NOTIFY</command>和 SQL 事务用某种重要的方法进行交换。首先，如果<command>NOTIFY</command>
在事务内部执行，通知事件直到事务提交才会送出。这么做是有道理的，因为如果事务退出了，
那么在它里面的所有命令都没有效果(包括<command>NOTIFY</command>)。但如果有人希望通知事件立即发送，
这就不太好了。其次，当一个正在监听的会话在一次事务内收到一个通知信号，
直到本次事务完成(提交或退出)之前，该通知事件将不被送到与之相连的客户端。同样，
如果一个通知在事务内部发送出去了，而该事务稍后又退出了，就希望通知可以在某种程度上被撤消，
因为通知一旦发送出去，服务器便不能从客户端<quote>收回</quote>通知，所以通知事件只是在事务之间传递。
这一点就要求使用<command>NOTIFY</command>作为实时信号的应用应该确保他们的事务尽可能短。
</para>

  <!--
<para>
   If the same channel name is signaled multiple times from the same
   transaction with identical payload strings, the
   database server can decide to deliver a single notification only.
   On the other hand, notifications with distinct payload strings will
   always be delivered as distinct notifications. Similarly, notifications from
   different transactions will never get folded into one notification.
   Except for dropping later instances of duplicate notifications,
   <command>NOTIFY</command> guarantees that notifications from the same
   transaction get delivered in the order they were sent.  It is also
   guaranteed that messages from different transactions are delivered in
   the order in which the transactions committed.
  </para>
-->
<para>
如果相同的通道名已经从相同的事务中发出了同样的负载字符串多次，
数据库服务器可以决定只送出一个字符串通知。另一方面，不同负载字符串的通知将总是作为不同通知传送。
相似的，来自不同事件的通知将永远不会被并入一个通知。除了删除稍后复制通知的实例，
<command>NOTIFY</command>保证来自相同事务的通知以它们被传送的顺序到达。
也保证来自不同事务的信息以事务提交的顺序到达。
</para>

  <!--
<para>
   It is common for a client that executes <command>NOTIFY</command>
   to be listening on the same notification channel itself.  In that case
   it will get back a notification event, just like all the other
   listening sessions.  Depending on the application logic, this could
   result in useless work, for example, reading a database table to
   find the same updates that that session just wrote out.  It is
   possible to avoid such extra work by noticing whether the notifying
   session's server process <acronym>PID</> (supplied in the
   notification event message) is the same as one's own session's
   <acronym>PID</> (available from <application>libpq</>).  When they
   are the same, the notification event is one's own work bouncing
   back, and can be ignored.
  </para>
-->
<para>
客户端经常会自己发送与正在监听的通知通道一样的<command>NOTIFY</command>。
这时它(客户端)也和其它正在监听的会话一样收到一个通知事件。
这样可能导致一些无用的工作(与应用逻辑有关)。例如，
对客户端刚写过的表又进行一次读操作以发现是否有更新。
可以通过检查服务器进程的<acronym>PID</>(在通知事件中提供)是否与自己的会话的<acronym>PID</>
一致(从<application>libpq</>中取得)避免这样的额外工作。当他们一样时，
说明这是其自身回弹的信息，可以忽略。
</para>
 </refsect1>

 <refsect1>
  <!--
<title>Parameters</title>
-->
<title>参数</title>

  <variablelist>
   <varlistentry>
    <term><replaceable class="PARAMETER">channel</replaceable></term>
    <listitem>
     <!--
<para>
      Name of the notification channel to be signaled (any identifier).
     </para>
-->
<para>
生成信号(通知)的通知通道(任何标识符)。
</para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><replaceable class="PARAMETER">payload</replaceable></term>
    <listitem>
     <!--
<para>
      The <quote>payload</> string to be communicated along with the
      notification.  This must be specified as a simple string literal.
      In the default configuration it must be shorter than 8000 bytes.
      (If binary data or large amounts of information need to be communicated,
      it's best to put it in a database table and send the key of the record.)
     </para>
-->
<para>
<quote>payload</>字符串与通知交流。必须指定为简单的字符串文本。缺省配置中必须少于8000字节。
（如果二进制数据或大量的信息需要交流，最好放在数据库表中并发送该记录的键字。）
</para>
    </listitem>
   </varlistentry>
  </variablelist>
 </refsect1>

 <refsect1>
  <!--
<title>Notes</title>
-->
<title>注意</title>

  <!--
<para>
   There is a queue that holds notifications that have been sent but not
   yet processed by all listening sessions.  If this queue becomes full,
   transactions calling <command>NOTIFY</command> will fail at commit.
   The queue is quite large (8GB in a standard installation) and should be
   sufficiently sized for almost every use case. However, no cleanup can take
   place if a session executes <command>LISTEN</command> and then enters a
   transaction for a very long time. Once the queue is half full you will see
   warnings in the log file pointing you to the session that is preventing
   cleanup. In this case you should make sure that this session ends its
   current transaction so that cleanup can proceed.
  </para>
-->
<para>
有一个已经发送的持有通知但目前还未被所有监听会话处理的序列。如果这个序列满了，
会话调用<command>NOTIFY</command>将会在提交时失败。序列是相当大的（标准安装中是8GB）
并且应该足够为几乎每个使用情况大。但是，如果会话执行<command>LISTEN</command>
并且然后进入一个事务很长时间那么将不会有清除发生。一旦序列是半满的，
您将在日志中看到警告指向您的会话阻止清除。在这种情况下，应该确保这个会话结束他的当前事务，
这样清理能够进行。
</para>
  <!--
<para>
   A transaction that has executed <command>NOTIFY</command> cannot be
   prepared for two-phase commit.
  </para>
-->
<para>
一个已经执行了<command>NOTIFY</command>的事务不能准备两阶段提交。
</para>

  <refsect2>
   <title>pg_notify</title>

   <indexterm>
    <primary>pg_notify</primary>
   </indexterm>

   <!--
<para>
    To send a notification you can also use the function
    <literal><function>pg_notify</function>(<type>text</type>,
    <type>text</type>)</literal>. The function takes the channel name as the
    first argument and the payload as the second. The function is much easier
    to use than the <command>NOTIFY</command> command if you need to work with
    non-constant channel names and payloads.
   </para>
-->
<para>
也可以使用函数<literal><function>pg_notify</function>(<type>text</type>, <type>text</type>)</literal>
发送一个通知。函数接受通道名作为第一个参数，负载作为第二个参数。
如果你需要使用不稳定的通道名和负载，那么使用函数比使用<command>NOTIFY</command>命令更简单。
</para>
  </refsect2>
 </refsect1>

 <refsect1>
  <!--
<title>Examples</title>
-->
<title>例子</title>

  <!--
<para>
   Configure and execute a listen/notify sequence from
   <application>psql</application>:

<programlisting>
LISTEN virtual;
NOTIFY virtual;
Asynchronous notification "virtual" received from server process with PID 8448.
NOTIFY virtual, 'This is the payload';
Asynchronous notification "virtual" with payload "This is the payload" received from server process with PID 8448.

LISTEN foo;
SELECT pg_notify('fo' || 'o', 'pay' || 'load');
Asynchronous notification "foo" with payload "payload" received from server process with PID 14728.
</programlisting></para>
-->
<para>
在<application>psql</application>里配置和执行一个监听/通知序列：
<programlisting>
LISTEN virtual;
NOTIFY virtual;
Asynchronous notification "virtual" received from server process with PID 8448.
NOTIFY virtual, 'This is the payload';
Asynchronous notification "virtual" with payload "This is the payload" received from server process with PID 8448.

LISTEN foo;
SELECT pg_notify('fo' || 'o', 'pay' || 'load');
Asynchronous notification "foo" with payload "payload" received from server process with PID 14728.
</programlisting>
</para>
 </refsect1>

 <refsect1>
  <!--
<title>Compatibility</title>
-->
<title>兼容性</title>

  <!--
<para>
   There is no <command>NOTIFY</command> statement in the SQL
   standard.
  </para>
-->
<para>
SQL 标准里没有<command>NOTIFY</command>语句。
</para>
 </refsect1>

 <refsect1>
  <!--
<title>See Also</title>
-->
<title>又见</title>

  <simplelist type="inline">
   <member><xref linkend="sql-listen"></member>
   <member><xref linkend="sql-unlisten"></member>
  </simplelist>
 </refsect1>
</refentry>
