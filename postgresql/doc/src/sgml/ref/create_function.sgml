<!--
doc/src/sgml/ref/create_function.sgml
-->

<refentry id="SQL-CREATEFUNCTION">
 <refmeta>
  <refentrytitle>CREATE FUNCTION</refentrytitle>
  <manvolnum>7</manvolnum>
  <refmiscinfo>SQL - Language Statements</refmiscinfo>
 </refmeta>

 <refnamediv>
  <refname>CREATE FUNCTION</refname>
  <refpurpose>定义一个新函数</refpurpose>
 </refnamediv>

 <indexterm zone="sql-createfunction">
  <primary>CREATE FUNCTION</primary>
 </indexterm>

 <refsynopsisdiv>
<synopsis>
CREATE [ OR REPLACE ] FUNCTION
    <replaceable class="parameter">name</replaceable> ( [ [ <replaceable class="parameter">argmode</replaceable> ] [ <replaceable class="parameter">argname</replaceable> ] <replaceable class="parameter">argtype</replaceable> [ { DEFAULT | = } <replaceable class="parameter">default_expr</replaceable> ] [, ...] ] )
    [ RETURNS <replaceable class="parameter">rettype</replaceable>
      | RETURNS TABLE ( <replaceable class="parameter">column_name</replaceable> <replaceable class="parameter">column_type</replaceable> [, ...] ) ]
  { LANGUAGE <replaceable class="parameter">lang_name</replaceable>
    | WINDOW
    | IMMUTABLE | STABLE | VOLATILE | [ NOT ] LEAKPROOF
    | CALLED ON NULL INPUT | RETURNS NULL ON NULL INPUT | STRICT
    | [ EXTERNAL ] SECURITY INVOKER | [ EXTERNAL ] SECURITY DEFINER
    | COST <replaceable class="parameter">execution_cost</replaceable>
    | ROWS <replaceable class="parameter">result_rows</replaceable>
    | SET <replaceable class="parameter">configuration_parameter</replaceable> { TO <replaceable class="parameter">value</replaceable> | = <replaceable class="parameter">value</replaceable> | FROM CURRENT }
    | AS '<replaceable class="parameter">definition</replaceable>'
    | AS '<replaceable class="parameter">obj_file</replaceable>', '<replaceable class="parameter">link_symbol</replaceable>'
  } ...
    [ WITH ( <replaceable class="parameter">attribute</replaceable> [, ...] ) ]
</synopsis>
 </refsynopsisdiv>

 <refsect1 id="sql-createfunction-description">
  <title>描述</title>

  <para>
   <command>CREATE FUNCTION</command>定义一个新的函数。
   <command>CREATE OR REPLACE FUNCTION</command>
   如果函数不存在就创建一个新函数，否则替换现有的定义。用户必须有定义该函数所用语言的
   <literal>USAGE</literal> 权限才能定义新函数。
  </para>

  <para>
    如果包含了一个模式名，那么函数就在指定的模式中创建。否则它会在当前模式中创建。
    新函数的名字不能和同一个模式中的任何带有同样参数类型的函数同名。
    不过，参数类型不同的函数可以同名(这叫做<firstterm>重载</>)。
  </para>

  <para>
    使用 <command>CREATE OR REPLACE FUNCTION</command>
    替换一个现有函数的定义。
    不能用这个方法修改一个函数的名字或者参数类型，
    否则就会创建一个新的函数。同样
    <command>CREATE OR REPLACE FUNCTION</command>
    也不会允许你修改一个现有函数的返回类型。要做这些事情，
    你必须删除并重新创建函数。如果使用 <literal>OUT</> 参数，
    那就意味着除了删除函数之外，你不能修改任何 <literal>OUT</>
    参数的类型或者名字。
  </para>

  <para>
    当使用 <command>CREATE OR REPLACE FUNCTION</> 替换现有函数的定义时，
    不会改变函数的属主和权限。函数其他的属性会被赋予命令中给定的值或默认值。
    只有函数的属主才可以替换函数（也可以是属主角色的成员）。
  </para>

<para>
   如果你删除然后重建一个函数，新函数和旧函数将是不同的实体；
   你就需要删除现有引用了老函数的规则、视图、触发器等等。
   使用<command>CREATE OR REPLACE FUNCTION</command>
   可以在不破坏引用该函数的对象的前提下修改函数定义。
   并且，使用<command>ALTER FUNCTION</> 能修改一个已有函数的大多数属性。
  </para>

  <para>
   创建这个函数的用户将成为函数的所有者。
  </para>

  <para>
    你必须拥有要创建函数的参数类型和返回值类型的 <literal>USAGE</literal> 权限，
    才能创建该函数。
  </para>
 </refsect1>

 <refsect1>
  <title>参数</title>

   <variablelist>

    <varlistentry>
     <term><replaceable class="parameter">name</replaceable></term>

     <listitem>
      <para>
要创建的函数名字(可以用模式修饰)
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><replaceable class="parameter">argmode</replaceable></term>

     <listitem>
      <para>
       参数的模式： <literal>IN</>，<literal>OUT</>，<literal>INOUT</>,
       或 <literal>VARIADIC</>。缺省值是<literal>IN</>。只有 <literal>OUT</>
      模式的参数后面能跟<literal>VARIADIC</>。并且<literal>OUT</> 和
      <literal>INOUT</> 模式的参数不能用在 <literal>RETURNS TABLE</> 的函数定义中。
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><replaceable class="parameter">argname</replaceable></term>

     <listitem>
      <para>
一个参数的名字。有些语言(包括 SQL 和 PL/pgSQL)允许你在函数体里使用参数名字。
对于其它语言，输入参数名字只是额外的文档，这只是就函数定义本身而言的；
在调用函数时你可以使用输入参数名字来提高可读性。
（见 <xref linkend="sql-syntax-calling-funcs">）。
无论如何，输出参数的名字是非常重要的，因为它定义了结果行类型的列名。
（如果你省略了输出参数的名字，那么系统会自动选择一个缺省的列名。）
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><replaceable class="parameter">argtype</replaceable></term>

     <listitem>
      <para>
该函数的数据类型(可以有模式修饰)，如果有的话。可以是基本类型，
也可以是复合类型、域类型、或者可以引用一个现有字段相同的类型。
      </para>
      <para>
根据实现语言的不同，还可以在这上面声明<quote>伪类型</>
        (比如 <type>cstring</>)。伪类型表示实际的参数类型要么是没有完整地声明，
        要么是在普通的 SQL 数据类型之外。
      </para>
      <para>
一个字段的类型是用 <literal><replaceable
       class="parameter">table_name</replaceable>.<replaceable
       class="parameter">column_name</replaceable>%TYPE</literal>
       表示的；使用这个特性有时候可以帮助创建一个不受表定义变化影响的函数。
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><replaceable class="parameter">default_expr</replaceable></term>

     <listitem>
      <para>
当参数值没有指定时作为参数默认值的表达式。该表达式的类型必须可转化为参数的类型。
只有输入(也包括 <literal>INOUT</>)参数才能有默认值。具有默认值参数的输入参数必须在参数列表的最后。
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><replaceable class="parameter">rettype</replaceable></term>

     <listitem>
      <para>
        返回值的数据类型。可以声明为一个基本类型、复合类型、域类型、或者引用一个表的现有字段类型。
        根据实现语言的不同，还可以在这上面声明<quote>伪类型</>(比如 <type>cstring</>)。
        如果不打算返回任何值可以指定 <type>void</> 作为返回类型。
      </para>
      <para>
       如果存在 <literal>OUT</> 或 <literal>INOUT</> 参数，那么可以省略 <literal>RETURNS</> 子句。如果出现了，
       那么它必须隐含的和输出参数结果类型兼容：如果有多个输出参数，
       则必须是 <literal>RECORD</> ，如果只有一个输出参数，则与其相同。
      </para>
      <para>
      <literal>SETOF</literal> 修饰词表示该函数将返回一个集合，而不是单独一条。
      </para>
      <para>
      一个字段的类型是通过
       <literal><replaceable
       class="parameter">table_name</replaceable>.<replaceable
       class="parameter">column_name</replaceable>%TYPE</literal> 引用的。
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><replaceable class="parameter">column_name</replaceable></term>

     <listitem>
      <para>
       <literal>RETURNS TABLE</>的语法中输出字段名。
       这是另一种有效的声名带名字的 <literal>OUT</> 类型参数的方式，
       而且<literal>RETURNS TABLE</> 隐含 <literal>RETURNS SETOF</>。
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><replaceable class="parameter">column_type</replaceable></term>

     <listitem>
      <para>
       <literal>RETURNS TABLE</>语法中输出字段的数据类型。
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><replaceable class="parameter">lang_name</replaceable></term>

     <listitem>
      <para>
       用以实现函数的语言的名字。可以是 <literal>SQL</literal>, <literal>C</literal>,
       <literal>internal</literal>，或者是用户定义的过程语言名字。该名字可以用单引号包围。
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><literal>WINDOW</literal></term>

     <listitem>
      <para><literal>WINDOW</literal> 表示该函数不是普通函数而是一个<firstterm>窗口函数</>。
       这个属性当前仅对用C写的函数起作用。
       当替换已有函数定义时不能改变函数的<literal>WINDOW</>属性。
      </para>
     </listitem>
     </varlistentry>

    <varlistentry>
     <term><literal>IMMUTABLE</literal></term>
     <term><literal>STABLE</literal></term>
     <term><literal>VOLATILE</literal></term>

     <listitem>
      <para>
       这些属性是在查询优化器中用来优化函数的调用的，只能指定一个。缺省值是 <literal>VOLATILE</literal>。
      </para>

      <para><literal>IMMUTABLE</literal> 表示该函数不能修改数据库，
        并且在给出同样的参数值时总是返回同样的结果；
        也就是说，它不查询数据库或者只使用那些没有出现在参数列表里的信息。
        如果给出这个选项，那么任何全部使用常数对该函数的调用都将立即替换为该函数的值。
      </para>
      <para><literal>STABLE</literal> 表示该函数不能修改数据库，
        对相同参数值，在同一次表扫描里，该函数的返回值不变，但是返回值可能在不同 SQL 语句之间变化。
        这个选项对那些结果依赖数据库查找、参数变量(比如当前时区)之类的函数很合适。
        （但对于那些希望查询当前命令修改的行的 <literal>AFTER</> 类型的触发器是不合适的。）
        还要注意 <function>current_timestamp</> 函数族是稳定的，因为它们的值在一次事务中不会变化。
      </para>
      <para><literal>VOLATILE</literal> 表示该函数值甚至可以在一次表扫描内改变，
        因此不会做任何优化。只有很少的数据库函数在这个概念上是易变的；
        一些例子是 <literal>random()</>, <literal>currval()</>, <literal>timeofday()</>。
        请注意任何有副作用的函数都必需列为易变类，即使其结果相当有规律也应该这样，
        这样才能避免它被优化；一个例子就是 <literal>setval()</>。
      </para>
      <para>
        更多细节，请参阅<xref linkend="xfunc-volatility">。
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><literal>LEAKPROOF</literal></term>
     <listitem>
      <para>
        <literal>LEAKPROOF</literal> 表示该函数没有涉密方面的副作用。
        它除了返回值外，不会泄露它的参数的任何信息。例如，一个函数抛出了一个参数不正确的错误，
        但错误消息里包含了参数值的信息，那这个函数就是不保密的(leakproof)。
        查询计划生成器可以把保密的函数放到用 <literal>security_barrier</literal> 选项生成的视图中，
        而不保密的函数则不可以。参见 <xref linkend="sql-createview"> 和 <xref linkend="rules-privileges">。
        这个选项只能由超级用户设置。
       </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><literal>CALLED ON NULL INPUT</literal></term>
     <term><literal>RETURNS NULL ON NULL INPUT</literal></term>
     <term><literal>STRICT</literal></term>
     <listitem>
      <para><literal>CALLED ON NULL INPUT</literal>
        (缺省)表明该函数在自己的某些参数是 NULL 的时候还是可以按照正常的方式调用。
        函数的作者必须负责检查 NULL 以及进行相应地处理。
      </para>

     <para><literal>RETURNS NULL ON NULL INPUT</literal> 或
      <literal>STRICT</literal> 表明如果它的任何参数是 NULL，
      此函数总是返回 NULL。如果声明了这个参数，则如果存在 NULL 参数时不会执行该函数；
      而只是自动假设一个 NULL 结果。
     </para>
     </listitem>
    </varlistentry>

   <varlistentry>
    <term><literal><optional>EXTERNAL</optional> SECURITY INVOKER</literal></term>
    <term><literal><optional>EXTERNAL</optional> SECURITY DEFINER</literal></term>

    <listitem>
      <para><literal>SECURITY INVOKER</literal> (缺省)表明该函数将使用调用它的用户权限执行。
        <literal>SECURITY DEFINER</literal> 声明该函数将以创建它的用户的权限执行。
      </para>

      <para>
        关键字 <literal>EXTERNAL</literal> 的目的是和 SQL 兼容，
        它是可选的，因为这个特性适用于所有函数，而不仅仅在SQL中的外部函数。

      The key word  is allowed for SQL
      conformance, but it is optional since, unlike in SQL, this feature
      applies to all functions not only external ones.
     </para>
    </listitem>
   </varlistentry>

    <varlistentry>
     <term><replaceable class="parameter">execution_cost</replaceable></term>

     <listitem>
       <para>
         一个正数，表示以 <xref linkend="guc-cpu-operator-cost"> 为单位的该函数的估算的执行代价。
         如果函数返回的是一个结果集，它表示的是每行结果的代价。如果这个选项没有指定，
         对于用C语言函数和内部函数缺省值为 1，而其他语言定义的函数缺省值为 100。
         较大的值会使查询计划生成器在不必要的情况下尽量避免调用该函数。
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><replaceable class="parameter">result_rows</replaceable></term>

     <listitem>
      <para>
        一个正数给出了查询计划生成器预期的该函数返回的估算的结果集行数，
        它仅允许返回结果集的函数指定。缺省值为 1000。
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><replaceable>configuration_parameter</replaceable></term>
     <term><replaceable>value</replaceable></term>
     <listitem>
      <para>
       <literal>SET</> 语句能在进入函数时将某个配置参数设置成指定的值，
       并且当函数返回时恢复成之前的值。<literal>SET FROM CURRENT</>
       使用会话当前的该参数值做为进入函数时的该参数的值。
      </para>

      <para>
        如果一个函数创建时带有某个配置参数的<literal>SET</> 语句，
        那么在函数内对于同一参数的<command>SET LOCAL</> 语句的作用域仅限于该函数：
        执行函数之前的该参数的值会在函数返回后恢复。然而一个一般的同一参数的
        <command>SET</> 语句（不带 <literal>LOCAL</>）的作用效果将在函数返回后继续保持，
        直到当前的事务回滚。
      </para>

      <para>
       关于允许设置的参数和值的进一步信息请参考 <xref linkend="sql-set"> 和
       <xref linkend="runtime-config">。
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><replaceable class="parameter">definition</replaceable></term>

     <listitem>
      <para>
        一个定义函数的字符串常量，含义取决于语言。它可以是一个内部函数名字、一个指向某个目标文件的路径、一个 SQL 查询、一个过程语言文本。
      </para>

      <para>
        在写函数体字符串时经常使用美元符引用语法
        （见<xref linkend="sql-syntax-dollar-quoting">），而不通常的单引号语法，
        这是因为如果不使用美元符引用语法，
        在函数定义中出现的任何单引号和反斜线都需要前面再加一个相应的相同字符来转义。
      </para>

     </listitem>
    </varlistentry>

    <varlistentry>
     <term><literal><replaceable class="parameter">obj_file</replaceable>, <replaceable class="parameter">link_symbol</replaceable></literal></term>

     <listitem>
      <para>
        这个形式的 <literal>AS</literal> 子句用于在函数的 C 源文件里的名字和 SQL 名字不同时可动态加载 C 语言函数。
        字符串 <replaceable class="parameter">obj_file</replaceable> 是包含可动态加载对象的文件名，
        而 <replaceable class="parameter">link_symbol</replaceable> 是函数的链接符号，
        也就是该函数在 C 源文件里的名字。如果省略了链接符号，那么就假设它和被定义的 SQL 函数同名。
      </para>

      <para>
        当使用同一个可动态加载文件重复执行命令 <command>CREATE FUNCTION</command> 生成函数时，
        在一个全会话里该文件只会被加载一次。若想卸载或重新加载该文件（通常在开发过程中使用），
        可以开启一个新的会话。
      </para>

     </listitem>
    </varlistentry>

    <varlistentry>
     <term><replaceable class="parameter">attribute</replaceable></term>

     <listitem>
      <para>
        历史遗留的函数可选信息。下面的属性可以在此出现：

      <variablelist>
       <varlistentry>
        <term><literal>isStrict</></term>
        <listitem>
         <para>
           等效于 <literal>STRICT</literal> 或 <literal>RETURNS NULL ON NULL INPUT</literal>。
         </para>
        </listitem>
       </varlistentry>

       <varlistentry>
        <term><literal>isCachable</></term>
        <listitem>
          <para><literal>isCachable</literal> 是 <literal>IMMUTABLE</literal> 的过时的等效语法；
            不过出于向下兼容，仍然接受它。
         </para>
        </listitem>
       </varlistentry>

      </variablelist>

      属性名是大小写无关的。
     </para>
    </listitem>
   </varlistentry>

   </variablelist>

   <para>
     请参阅<xref linkend="xfunc">获取更多关于书写函数的信息。
   </para>

 </refsect1>

 <refsect1 id="sql-createfunction-overloading">
  <title>重载</title>

   <para>
    <productname>PostgreSQL</productname> 允许函数<firstterm>重载</firstterm>；
    也就是只要输入参数不同，几个不同的函数可以同名。不过，所有函数的 C 名字必须不同，
    也就是说你必须给予重载的 C 函数不同的 C 名字(比如，使用参数类型作为 C 名字的一部分)。
   </para>

   <para>
    如果两个函数同名，并且<emphasis>输入</>参数类型也相同，
    那么就认为这两个函数是一样的，忽略所有 <literal>OUT</> 参数。
    因此，下面的声明是冲突的：
<programlisting>
CREATE FUNCTION foo(int) ...
CREATE FUNCTION foo(int, out text) ...
</programlisting>
   </para>

   <para>
    生成同名的但有不同的参数个数的函数是没有问题的，
    但是如果定义了默认值在调用时就有可能产生冲突，例如，考虑下面定义
<programlisting>
CREATE FUNCTION foo(int) ...
CREATE FUNCTION foo(int, int default 42) ...
</programlisting>
    函数调用<literal>foo(10)</>将会失败，因为系统不知道该调用哪一个函数版本。
   </para>

 </refsect1>

 <refsect1 id="sql-createfunction-notes">
  <title>注意</title>

   <para>
    允许你将完整的 <acronym>SQL</acronym> 类型语法用于输入参数和返回值。
    不过，有些类型声明的细节(比如 <type>numeric</type> 类型的精度域)是由下层函数实现负责的，
    并且会被 <command>CREATE FUNCTION</command> 命令悄悄地吞掉(也就是不再被识别或强制)。
   </para>

   <para>
    在使用 <command>CREATE OR REPLACE FUNCTION</> 替换一个已存在函数的定义时，
    改变函数的参数名字有一些限制。你不能对已使用了名字的输入参数改名
    （但是你可以给没有使用名字的输入参数加一个名字）。如果该函数有超过一个输出参数，
    你也不能改变输出参数的名字，因为改名会改变用来描述函数返回结果的匿名复合类型的列名。
    这些限制都是为了使在替换函数的定义后对该函数的已有调用还能正常工作。
   </para>

   <para>
    如果一个函数声名为 <literal>STRICT</>，并带有一个 <literal>VARIADIC</> 模式的参数，
    参数的严格性检查将可变数组<emphasis>整体</>看作非空的（non-null）。
    所以当调用时参数数组有空（null）元素时，该函数仍然会被调用。
   </para>

 </refsect1>

 <refsect1 id="sql-createfunction-examples">
  <title>例子</title>

  <para>
   这里是一些简单的例子，用于帮助你开始掌握这个命令。更多信息和例子，
   参阅<xref linkend="xfunc">。
<programlisting>
CREATE FUNCTION add(integer, integer) RETURNS integer
    AS 'select $1 + $2;'
    LANGUAGE SQL
    IMMUTABLE
    RETURNS NULL ON NULL INPUT;
</programlisting>
  </para>

  <para>
   利用参数名用 <application>PL/pgSQL</application> 自增一个整数：
<programlisting>
CREATE OR REPLACE FUNCTION increment(i integer) RETURNS integer AS $$
        BEGIN
                RETURN i + 1;
        END;
$$ LANGUAGE plpgsql;
</programlisting>
  </para>

  <para>
   返回一个包含多个输出参数的记录：
<programlisting>
CREATE FUNCTION dup(in int, out f1 int, out f2 text)
    AS $$ SELECT $1, CAST($1 AS text) || ' is text' $$
    LANGUAGE SQL;

SELECT * FROM dup(42);
</programlisting>
   你可以通过命名明确的复合类型的方法冗长地干同样的事情：
<programlisting>
CREATE TYPE dup_result AS (f1 int, f2 text);

CREATE FUNCTION dup(int) RETURNS dup_result
    AS $$ SELECT $1, CAST($1 AS text) || ' is text' $$
    LANGUAGE SQL;

SELECT * FROM dup(42);
</programlisting>
   另一个返回多列的方法是用 <literal>TABLE</> 函数：
<programlisting>
CREATE FUNCTION dup(int) RETURNS TABLE(f1 int, f2 text)
    AS $$ SELECT $1, CAST($1 AS text) || ' is text' $$
    LANGUAGE SQL;

SELECT * FROM dup(42);
</programlisting>
   然而，<literal>TABLE</>是与前面的例子完全不同的，
   因为它实际上返回的是一个结果<emphasis>集</>，而不仅仅是一条记录。
  </para>
 </refsect1>

 <refsect1 id="sql-createfunction-security">
  <title>编写安全的 <literal>SECURITY DEFINER</literal> 函数</title>

  <indexterm>
   <primary><varname>search_path</varname> 配置参数</>
   <secondary>在安全函数中使用</>
  </indexterm>

   <para>
    因为<literal>SECURITY DEFINER</literal>函数是以创建它的用户的权限执行的，
    所以一定确保这样的函数不被滥用。为了安全，
    应该设置 <xref linkend="guc-search-path"> 排除可以被任何不信任用户更改的模式。
    这能避免恶意用户用生成的对象来替代函数中用到的对象的攻击方法。
    特别应该注意的是临时表模式，该模式默认在搜索路径中排在第一个，并且对任何用户可写。
    为安全考虑可以强制临时表模式最后被搜索。为了达到这个目的，可以将
    <literal>pg_temp</><indexterm><primary>pg_temp</><secondary>安全函数</></>
    放到<varname>search_path</>的最后。下面是安全定义函数的一个例子：
   </para>

<programlisting>
CREATE FUNCTION check_password(uname TEXT, pass TEXT)
RETURNS BOOLEAN AS $$
DECLARE passed BOOLEAN;
BEGIN
        SELECT  (pwd = $2) INTO passed
        FROM    pwds
        WHERE   username = $1;

        RETURN passed;
END;
$$  LANGUAGE plpgsql
    SECURITY DEFINER
    -- 设置安全的 search_path: 信任的模式, 然后是 'pg_temp' 模式
    SET search_path = admin, pg_temp;
</programlisting>

   <para>
    因为 <productname>PostgreSQL</productname> 8.3 版本没有 <literal>SET</>
    选项，所以老函数可以包含比较复杂的逻辑去存储，设置和恢复 <varname>search_path</>
    参数，而使用 <literal>SET</> 选项则简单的多。
   </para>

   <para>
    另一个需要注意的是：默认新创建的函数的执行权限被授予了 <literal>PUBLIC</>，
   （更多信息见<xref linkend="sql-grant">）。
    更常见的是你希望限制安全函数只给某些用户使用。为了实现这个目的，你必须收回默认的给
    <literal>PUBLIC</>的权限，并且单独给选定用户分配权限。为消除新函数能被所有人执行的时间窗口，
   可以在一个事务中创建和设置函数权限，例如：
   </para>

<programlisting>
BEGIN;
CREATE FUNCTION check_password(uname TEXT, pass TEXT) ... SECURITY DEFINER;
REVOKE ALL ON FUNCTION check_password(uname TEXT, pass TEXT) FROM PUBLIC;
GRANT EXECUTE ON FUNCTION check_password(uname TEXT, pass TEXT) TO admins;
COMMIT;
</programlisting>

 </refsect1>

 <refsect1 id="sql-createfunction-compat">
  <title>兼容性</title>

  <para>
   <productname>PostgreSQL</productname> 里的版本和 SQL:1999 里的
   <command>CREATE FUNCTION</command> 命令类似但是不完全兼容。
   属性和可以使用的语言都是不可移植的。
  </para>

  <para>
   为了和一些其它的数据库系统兼容，
   <replaceable class="parameter">argmode</replaceable> 可以在
   <replaceable class="parameter">argname</replaceable> 之前或者之后写，
   但是只有第一种写法是与标准兼容的。
  </para>

  <para>
   对于默认参数，SQL标准仅仅规定了使用 <literal>DEFAULT</literal> 关键字的语法。
   在T-SQL 和 Firebird 中，也使用 <literal>=</literal> 的语法。
  </para>
 </refsect1>


 <refsect1>
  <title>参见</title>

  <simplelist type="inline">
   <member><xref linkend="sql-alterfunction"></member>
   <member><xref linkend="sql-dropfunction"></member>
   <member><xref linkend="sql-grant"></member>
   <member><xref linkend="sql-load"></member>
   <member><xref linkend="sql-revoke"></member>
   <member><xref linkend="app-createlang"></member>
  </simplelist>
 </refsect1>

</refentry>

