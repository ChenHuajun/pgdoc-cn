<!--
doc/src/sgml/ref/create_domain.sgml
PostgreSQL documentation
-->

<refentry id="SQL-CREATEDOMAIN">
 <refmeta>
  <refentrytitle>CREATE DOMAIN</refentrytitle>
  <manvolnum>7</manvolnum>
  <!--
<refmiscinfo>SQL - Language Statements</refmiscinfo>
-->
<refmiscinfo>SQL - 语句</refmiscinfo>
 </refmeta>

 <refnamediv>
  <refname>CREATE DOMAIN</refname>
  <!--
<refpurpose>define a new domain</refpurpose>
-->
<refpurpose>
定义一个新域
</refpurpose>
 </refnamediv>

 <indexterm zone="sql-createdomain">
  <primary>CREATE DOMAIN</primary>
 </indexterm>

 <refsynopsisdiv>
<synopsis>
CREATE DOMAIN <replaceable class="parameter">name</replaceable> [ AS ] <replaceable class="parameter">data_type</replaceable>
    [ COLLATE <replaceable>collation</replaceable> ]
    [ DEFAULT <replaceable>expression</replaceable> ]
    [ <replaceable class="PARAMETER">constraint</replaceable> [ ... ] ]

<phrase>where <replaceable class="PARAMETER">constraint</replaceable> is:</phrase>

[ CONSTRAINT <replaceable class="PARAMETER">constraint_name</replaceable> ]
{ NOT NULL | NULL | CHECK (<replaceable class="PARAMETER">expression</replaceable>) }
</synopsis>
 </refsynopsisdiv>

 <refsect1>
  <!--
<title>Description</title>
-->
<title>描述</title>

  <!--
<para>
   <command>CREATE DOMAIN</command> creates a new domain.  A domain is
   essentially a data type with optional constraints (restrictions on
   the allowed set of values).
   The user who defines a domain becomes its owner.
  </para>
-->
<para>
<command>CREATE DOMAIN</command>创建一个新的数据域。
域在本质上是一个带有可选约束的数据类型(限制允许的取值范围)。定义域的用户成为其所有者。 
</para>

  <!--
<para>
   If a schema name is given (for example, <literal>CREATE DOMAIN
   myschema.mydomain ...</>) then the domain is created in the
   specified schema.  Otherwise it is created in the current schema.
   The domain name must be unique among the types and domains existing
   in its schema.
  </para>
-->
<para>
如果给出一个模式名称(比如<literal>CREATE DOMAIN myschema.mydomain ...</>)， 那么该域是在指定的模式中创建的。
否则它会在当前模式中创建。域名字必需在其所在模式中的现有类型和域中唯一。 
</para>

  <!--
<para>
   Domains are useful for abstracting common constraints on fields into
   a single location for maintenance.  For example, several tables might
   contain email address columns, all requiring the same CHECK constraint
   to verify the address syntax.
   Define a domain rather than setting up each table's constraint
   individually.
  </para>
-->
<para>
域可以便于把不同表之间的公共约束提取到一个固定位置进行维护。
比如，在多个表中都含有一个电子邮件地址字段，这个字段都要求有CHECK的约束检查来验证邮箱的有效性。
此时可以定义并使用一个域，而不是分别设置每个表的约束。 
</para>

  <!--
<para>
   To be able to create a domain, you must have <literal>USAGE</literal>
   privilege on the underlying type.
  </para>
-->
<para>
要创建域，你必须有相关数据类型的<literal>USAGE</literal>权限。
</para>
 </refsect1>

 <refsect1>
  <!--
<title>Parameters</title>
-->
<title>参数</title>

    <variablelist>
     <varlistentry>
      <term><replaceable class="parameter">name</replaceable></term>
      <listitem>
       <!--
<para>
        The name (optionally schema-qualified) of a domain to be created.
       </para>
-->
<para>
要创建的域名字(可以有模式修饰) 。
</para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><replaceable class="PARAMETER">data_type</replaceable></term>
      <listitem>
       <!--
<para>
        The underlying data type of the domain. This can include array
        specifiers.
       </para>
-->
<para>
域的下层数据类型。这时可以包含一组的定义选项。
</para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><replaceable>collation</replaceable></term>
      <listitem>
       <!--
<para>
        An optional collation for the domain.  If no collation is
        specified, the underlying data type's default collation is used.
        The underlying type must be collatable if <literal>COLLATE</>
        is specified.
       </para>
-->
<para>
可选的域的排序规则。如果没有指定排序规则，会使用下层所属数据类型的排序规则。
如果使用了<literal>COLLATE</>选项，则下层数据类型必须是可排序的。
</para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><literal>DEFAULT <replaceable>expression</replaceable></literal></term>

      <listitem>
       <!--
<para>
        The <literal>DEFAULT</> clause specifies a default value for
        columns of the domain data type.  The value is any
        variable-free expression (but subqueries are not allowed).
        The data type of the default expression must match the data
        type of the domain.  If no default value is specified, then
        the default value is the null value.
       </para>
-->
<para>
<literal>DEFAULT</>选项为域数据类型的字段声明一个缺省值。
该值是任何不含变量的表达式(但不允许子查询)。
缺省表达式的数据类型必需匹配域的数据类型。
如果没有声明缺省值，那么缺省值就是 NULL 。
</para>

       <!--
<para>
        The default expression will be used in any insert operation
        that does not specify a value for the column.  If a default
        value is defined for a particular column, it overrides any
        default associated with the domain.  In turn, the domain
        default overrides any default value associated with the
        underlying data type.
       </para>
-->
<para>
缺省表达式将用于任何省略该字段值的插入操作。
如果为特定的字段声明了缺省值， 那么它覆盖任何和该域相关联的缺省值。
然后，域的缺省覆盖任何与下层数据类型相关的缺省。 
</para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><literal>CONSTRAINT <replaceable class="PARAMETER">constraint_name</replaceable></literal></term>
      <listitem>
       <!--
<para>
        An optional name for a constraint.  If not specified,
        the system generates a name.
       </para>
-->
<para>
一个约束的可选名称。如果没有声明，系统将自动生成一个名字。 
</para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><literal>NOT NULL</></term>
      <listitem>
       <!--
<para>
        Values of this domain are normally prevented from being null.
        However, it is still possible for a domain with this constraint
        to take a null value if it is assigned a matching domain type
        that has become null, e.g. via a LEFT OUTER JOIN, or
        <command>INSERT INTO tab (domcol) VALUES ((SELECT domcol FROM
        tab WHERE false))</command>.
       </para>
-->
<para>
域的值通常不能为空。
然而，对于有此约束的域，若分配了匹配的空域类型，则仍然可能会有空值，
例如：通过一个LEFT OUTER JOIN或者<command>INSERT INTO tab (domcol) VALUES ((SELECT domcol FROM tab WHERE false))</command>。 
</para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><literal>NULL</></term>
      <listitem>
       <!--
<para>
        Values of this domain are allowed to be null.  This is the default.
       </para>
-->
<para>
这个域的数值允许为 NULL 。这是缺省。 
</para>

       <!--
<para>
        This clause is only intended for compatibility with
        nonstandard SQL databases.  Its use is discouraged in new
        applications.
       </para>
-->
<para>
这个子句只是用于和非标准的 SQL 数据库兼容用。不建议在新的应用中使用它。 
</para>
      </listitem>
     </varlistentry>

   <varlistentry>
    <term><literal>CHECK (<replaceable class="PARAMETER">expression</replaceable>)</literal></term>
    <listitem>
     <!--
<para>
<literal>CHECK</> clauses specify integrity constraints or tests
      which values of the domain must satisfy.
      Each constraint must be an expression
      producing a Boolean result.  It should use the key word <literal>VALUE</>
      to refer to the value being tested.
     </para>
-->
<para>
<literal>CHECK</>选项声明域的数值必须满足的完整性约束或测试。
每个约束必须是一个生成布尔结果的表达式。它应该使用关键字<literal>VALUE</>来引用被测试的数值。
</para>

     <!--
<para>
      Currently, <literal>CHECK</literal> expressions cannot contain
      subqueries nor refer to variables other than <literal>VALUE</>.
     </para>
-->
<para>
目前，<literal>CHECK</literal>表达式不能包含子查询，也不能引用除 VALUE之外的变量。 
</para>
    </listitem>
   </varlistentry>
  </variablelist>
 </refsect1>

 <refsect1>
  <!--
<title>Examples</title>
-->
<title>例子</title>

  <!--
<para>
   This example creates the <type>us_postal_code</type> data type and
   then uses the type in a table definition.  A regular expression test
   is used to verify that the value looks like a valid US postal code:

<programlisting>
CREATE DOMAIN us_postal_code AS TEXT
CHECK(
   VALUE ~ '^\d{5}$'
OR VALUE ~ '^\d{5}-\d{4}$'
);

CREATE TABLE us_snail_addy (
  address_id SERIAL PRIMARY KEY,
  street1 TEXT NOT NULL,
  street2 TEXT,
  street3 TEXT,
  city TEXT NOT NULL,
  postal us_postal_code NOT NULL
);
</programlisting></para>
-->
<para>
这个例子创建了<type>us_postal_code</type>数据类型并且在一个表定义中 使用了该类型。
使用了一个正则表达式测试以保证这些数值看起来像一个美国的邮政编码： 
<programlisting>
CREATE DOMAIN us_postal_code AS TEXT
CHECK(
   VALUE ~ '^\d{5}$'
OR VALUE ~ '^\d{5}-\d{4}$'
);

CREATE TABLE us_snail_addy (
  address_id SERIAL PRIMARY KEY,
  street1 TEXT NOT NULL,
  street2 TEXT,
  street3 TEXT,
  city TEXT NOT NULL,
  postal us_postal_code NOT NULL
);
</programlisting>
</para>
 </refsect1>

 <refsect1 id="SQL-CREATEDOMAIN-compatibility">
  <!--
<title>Compatibility</title>
-->
<title>兼容性</title>

  <!--
<para>
   The command <command>CREATE DOMAIN</command> conforms to the SQL
   standard.
  </para>
-->
<para>
<command>CREATE DOMAIN</command>命令符合SQL标准。 
</para>
 </refsect1>

 <refsect1 id="SQL-CREATEDOMAIN-see-also">
  <!--
<title>See Also</title>
-->
<title>参见</title>

  <simplelist type="inline">
   <member><xref linkend="sql-alterdomain"></member>
   <member><xref linkend="sql-dropdomain"></member>
  </simplelist>
 </refsect1>

</refentry>
