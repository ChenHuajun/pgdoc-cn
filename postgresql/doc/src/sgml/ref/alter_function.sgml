
<!--
doc/src/sgml/ref/alter_function.sgml
PostgreSQL documentation
-->
<refentry id="SQL-ALTERFUNCTION">
<refmeta>
<refentrytitle>ALTER FUNCTION</refentrytitle>
<manvolnum>7</manvolnum>
<!--
<refmiscinfo>SQL - Language Statements</refmiscinfo>
-->
<refmiscinfo>SQL - 语句</refmiscinfo>
</refmeta>
<refnamediv>
<refname>ALTER FUNCTION</refname>
<!--
<refpurpose>change the definition of a function</refpurpose>
-->
<refpurpose>修改一个函数的定义</refpurpose>
</refnamediv>
<indexterm zone="sql-alterfunction">
<primary>ALTER FUNCTION</primary>
</indexterm>
<refsynopsisdiv>
<synopsis>
ALTER FUNCTION <replaceable>name</replaceable> ( [ [ <replaceable class="parameter">argmode</replaceable> ] [ <replaceable class="parameter">argname</replaceable> ] <replaceable class="parameter">argtype</replaceable> [, ...] ] )
<replaceable class="PARAMETER">action</replaceable> [ ... ] [ RESTRICT ]
ALTER FUNCTION <replaceable>name</replaceable> ( [ [ <replaceable class="parameter">argmode</replaceable> ] [ <replaceable class="parameter">argname</replaceable> ] <replaceable class="parameter">argtype</replaceable> [, ...] ] )
RENAME TO <replaceable>new_name</replaceable>
ALTER FUNCTION <replaceable>name</replaceable> ( [ [ <replaceable class="parameter">argmode</replaceable> ] [ <replaceable class="parameter">argname</replaceable> ] <replaceable class="parameter">argtype</replaceable> [, ...] ] )
OWNER TO <replaceable>new_owner</replaceable>
ALTER FUNCTION <replaceable>name</replaceable> ( [ [ <replaceable class="parameter">argmode</replaceable> ] [ <replaceable class="parameter">argname</replaceable> ] <replaceable class="parameter">argtype</replaceable> [, ...] ] )
SET SCHEMA <replaceable>new_schema</replaceable>
<phrase>where <replaceable class="PARAMETER">action</replaceable> is one of:</phrase>
CALLED ON NULL INPUT | RETURNS NULL ON NULL INPUT | STRICT
IMMUTABLE | STABLE | VOLATILE | [ NOT ] LEAKPROOF
[ EXTERNAL ] SECURITY INVOKER | [ EXTERNAL ] SECURITY DEFINER
COST <replaceable class="parameter">execution_cost</replaceable>
ROWS <replaceable class="parameter">result_rows</replaceable>
SET <replaceable class="parameter">configuration_parameter</replaceable> { TO | = } { <replaceable class="parameter">value</replaceable> | DEFAULT }
SET <replaceable class="parameter">configuration_parameter</replaceable> FROM CURRENT
RESET <replaceable class="parameter">configuration_parameter</replaceable>
RESET ALL
</synopsis>
</refsynopsisdiv>
<refsect1>
<!--
<title>Description</title>
-->
<title>描述</title>

<!--
 <para>
<command>ALTER FUNCTION</command> changes the definition of a
function.
</para>
-->
<para>
<command>ALTER FUNCTION</command> 修改一个函数的定义。
</para>


<!--
 <para>
You must own the function to use <command>ALTER FUNCTION</>.
To change a function's schema, you must also have <literal>CREATE</>
privilege on the new schema.
To alter the owner, you must also be a direct or indirect member of the new
owning role, and that role must have <literal>CREATE</literal> privilege on
the function's schema. (These restrictions enforce that altering the owner
doesn't do anything you couldn't do by dropping and recreating the function.
However, a superuser can alter ownership of any function anyway.)
</para>
-->
<para>
要使用<command>ALTER FUNCTION</> ，你必须是该函数的所有者。 
要修改一个函数的模式，你还必须在新模式上拥有 <literal>CREATE</> 权限。 
要修改所有者，你必须还是新的所有角色的直接或者间接的成员，并且该成员必须在此函数的模式上有 <literal>CREATE</> 权限。 
（这些限制保证了修改所有者和删除、重建函数的动作没啥区别。 不过，超级用户可以用任何方法修改函数的所有关系。） 
</para>
</refsect1>
<refsect1>
<!--
<title>Parameters</title>
-->
<title>参数</title>
<variablelist>
<varlistentry>
<term><replaceable class="parameter">name</replaceable></term>
<listitem>

<!--
 <para>
The name (optionally schema-qualified) of an existing function.
</para>
-->
<para>
一个现有的函数名字(可以有模式修饰) 。
</para>
</listitem>
</varlistentry>
<varlistentry>
<term><replaceable class="parameter">argmode</replaceable></term>
<listitem>

<!--
 <para>
The mode of an argument: <literal>IN</>, <literal>OUT</>,
<literal>INOUT</>, or <literal>VARIADIC</>.
If omitted, the default is <literal>IN</>.
Note that <command>ALTER FUNCTION</command> does not actually pay
any attention to <literal>OUT</> arguments, since only the input
arguments are needed to determine the function's identity.
So it is sufficient to list the <literal>IN</>, <literal>INOUT</>,
and <literal>VARIADIC</> arguments.
</para>
-->
<para>
参数的模式：<literal>IN</>、<literal>OUT</>、<literal>INOUT</>或是<literal>VARIADIC</>。
如省略的话，缺省是<literal>IN</>。
注意<command>ALTER FUNCTION</command> 实际不会关注任何<literal>OUT</> 参数， 因为确认函数的逻辑只需要知道输入参数。
因此列出<literal>IN</>、<literal>INOUT</>和<literal>VARIADIC</>参数就足够了。 
</para>
</listitem>
</varlistentry>
<varlistentry>
<term><replaceable class="parameter">argname</replaceable></term>
<listitem>

<!--
 <para>
The name of an argument.
Note that <command>ALTER FUNCTION</command> does not actually pay
any attention to argument names, since only the argument data
types are needed to determine the function's identity.
</para>
-->
<para>
参数的名字。
请注意<command>ALTER FUNCTION</command>实际上不会关注参数的名字，因为只有参数的数据类型用于确认函数的逻辑。
</para>
</listitem>
</varlistentry>
<varlistentry>
<term><replaceable class="parameter">argtype</replaceable></term>
<listitem>

<!--
 <para>
The data type(s) of the function's arguments (optionally schema-qualified), if any.
</para>
-->
<para>
如果有的话，是该函数参数的数据类型(可以用模式修饰)。 
</para>
</listitem>
</varlistentry>
<varlistentry>
<term><replaceable class="parameter">new_name</replaceable></term>
<listitem>

<!--
 <para>
The new name of the function.
</para>
-->
<para>
函数的新名字。
</para>
</listitem>
</varlistentry>
<varlistentry>
<term><replaceable class="parameter">new_owner</replaceable></term>
<listitem>

<!--
 <para>
The new owner of the function. Note that if the function is
marked <literal>SECURITY DEFINER</literal>, it will subsequently
execute as the new owner.
</para>
-->
<para>
函数的新所有者。请注意如果函数标记为<literal>SECURITY DEFINER</literal>，那么它随后将以新的所有者执行。
</para>
</listitem>
</varlistentry>
<varlistentry>
<term><replaceable class="parameter">new_schema</replaceable></term>
<listitem>

<!--
 <para>
The new schema for the function.
</para>
-->
<para>
函数的新模式名称。
</para>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>CALLED ON NULL INPUT</literal></term>
<term><literal>RETURNS NULL ON NULL INPUT</literal></term>
<term><literal>STRICT</literal></term>
<listitem>

<!--
 <para><literal>CALLED ON NULL INPUT</literal> changes the function so
that it will be invoked when some or all of its arguments are
null. <literal>RETURNS NULL ON NULL INPUT</literal> or
<literal>STRICT</literal> changes the function so that it is not
invoked if any of its arguments are null; instead, a null result
is assumed automatically. See <xref linkend="sql-createfunction">
for more information.
</para>
-->
<para><literal>CALLED ON NULL INPUT</literal> 选项会在函数的部分或是全部的参数是NULL的时候会调用它。
<literal>RETURNS NULL ON NULL INPUT</literal>或<literal>STRICT</literal> 把函数改成如果任何一个参数是NULL就根本不执行并且自动返回NULL 。
参阅<xref linkend="sql-createfunction">获取更多信息。
</para>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>IMMUTABLE</literal></term>
<term><literal>STABLE</literal></term>
<term><literal>VOLATILE</literal></term>
<listitem>
 
<!--
 <para>
Change the volatility of the function to the specified setting.
See <xref linkend="sql-createfunction"> for details.
</para>
 -->
<para>
把函数的易失属性修改为指定类型。参阅<xref linkend="sql-createfunction">了解更多细节。
</para>
</listitem>
</varlistentry>
<varlistentry>
<term><literal><optional> EXTERNAL </optional> SECURITY INVOKER</literal></term>
<term><literal><optional> EXTERNAL </optional> SECURITY DEFINER</literal></term>
<listitem>

<!--
 <para>
Change whether the function is a security definer or not. The
key word <literal>EXTERNAL</literal> is ignored for SQL
conformance. See <xref linkend="sql-createfunction"> for more information about
this capability.
</para>
-->
<para>
<literal>SECURITY INVOKER</literal>表明该函数将带着调用它的用户的权限执行。 
<literal>SECURITY DEFINER</literal> 声明该函数将以创建它的用户的权限执行。
关键字 <literal>EXTERNAL</literal> 不是必需的，仅是为了和 SQL 兼容。参阅 <xref linkend="sql-createfunction"> 了解更多细节。
</para>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>LEAKPROOF</literal></term>
<listitem>

<!--
 <para>
Change whether the function is considered leakproof or not.
See <xref linkend="sql-createfunction"> for more information about
this capability.
</para>
-->
<para>
更改函数的密封性。
参阅 <xref linkend="sql-createfunction"> 了解更多细节。
</para>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>COST</literal> <replaceable class="parameter">execution_cost</replaceable></term>
<listitem>

<!--
 <para>
Change the estimated execution cost of the function.
See <xref linkend="sql-createfunction"> for more information.
</para>
-->
<para>
更改函数的估计执行成本。 参阅<xref linkend="sql-createfunction">了解更多细节。
</para>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>ROWS</literal> <replaceable class="parameter">result_rows</replaceable></term>
<listitem>

<!--
 <para>
Change the estimated number of rows returned by a set-returning
function. See <xref linkend="sql-createfunction"> for more information.
</para>
-->
<para>
更改返回数据集类型函数的返回估计行数。参阅<xref linkend="sql-createfunction">了解更多细节。
</para>
</listitem>
</varlistentry>
<varlistentry>
<term><replaceable>configuration_parameter</replaceable></term>
<term><replaceable>value</replaceable></term>
<listitem>

<!--
 <para>
Add or change the assignment to be made to a configuration parameter
when the function is called. If
<replaceable>value</replaceable> is <literal>DEFAULT</literal>
or, equivalently, <literal>RESET</literal> is used, the function-local
setting is removed, so that the function executes with the value
present in its environment. Use <literal>RESET ALL</literal> to clear all function-local settings.
<literal>SET FROM CURRENT</> saves the session's current value of
the parameter as the value to be applied when the function is entered.
</para>
-->
<para>
当函数被调用时，添加或者更改对配置参数值的配置。如果 <replaceable>value</replaceable>是<literal>DEFAULT</literal>，
或者相应地<literal>RESET</literal>选项被使用，函数的局部设置参数会被清除，这样函数会使用当前环境中的参数值来执行。
使用<literal>RESET ALL</literal>来清理所有的函数局部设置参数。 
<literal>SET FROM CURRENT</>保存会话的参数当前值为函数调用时会应用的参数值。
</para>

<!--
 <para>
See <xref linkend="sql-set"> and <xref linkend="runtime-config">
for more information about allowed parameter names and values.
</para>
-->
<para>
参阅<xref linkend="sql-set">和<xref linkend="runtime-config"> 了解更多关于允许的参数名称和数值的信息。 
</para>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>RESTRICT</literal></term>
<listitem>

<!--
<para>
Ignored for conformance with the SQL standard.
</para>
-->
<para>
可忽略的选项，仅为了符合SQL标准。
</para>

</listitem>
</varlistentry>
</variablelist>
</refsect1>
<refsect1>
<!-- 
<title>Examples</title>
-->
<title>例子</title>

<!--
<para>
To rename the function <literal>sqrt</literal> for type
<type>integer</type> to <literal>square_root</literal>:
<programlisting>
ALTER FUNCTION sqrt(integer) RENAME TO square_root;
</programlisting>
</para>
-->
<para>
 把参数类型为<type>integer</type>的函数<literal>sqrt</literal>重命名为<literal>square_root</literal> ： 
<programlisting>
ALTER FUNCTION sqrt(integer) RENAME TO square_root;
</programlisting>
</para>


<!--
<para>
To change the owner of the function <literal>sqrt</literal> for type
<type>integer</type> to <literal>joe</literal>:
<programlisting>
ALTER FUNCTION sqrt(integer) OWNER TO joe;
</programlisting>
</para>
-->
<para>
 把参数类型为<type>integer</type>的函数<literal>sqrt</literal>的所有者修改为<literal>joe</literal> ：
<programlisting>
ALTER FUNCTION sqrt(integer) OWNER TO joe;
</programlisting>
</para>


<!--
<para>
To change the schema of the function <literal>sqrt</literal> for type
<type>integer</type> to <literal>maths</literal>:
<programlisting>
ALTER FUNCTION sqrt(integer) SET SCHEMA maths;
</programlisting>
</para>
-->
<para>
 把参数类型为<type>integer</type>的函数<literal>sqrt</literal>的模式修改为<literal>maths</literal>： 
<programlisting>
ALTER FUNCTION sqrt(integer) SET SCHEMA maths;
</programlisting>
</para>


<!--
<para>
To adjust the search path that is automatically set for a function:
<programlisting>
ALTER FUNCTION check_password(text) SET search_path = admin, pg_temp;
</programlisting>
</para>
-->
<para>
调整自动为函数设定的搜索路径：
<programlisting>
ALTER FUNCTION check_password(text) SET search_path = admin, pg_temp;
</programlisting>
</para>


<!--
<para>
To disable automatic setting of <varname>search_path</> for a function:
<programlisting>
ALTER FUNCTION check_password(text) RESET search_path;
</programlisting>
The function will now execute with whatever search path is used by its caller.
</para>
-->
<para>
 禁用针对一个函数的<varname>search_path</>自动设置：
<programlisting>
ALTER FUNCTION check_password(text) RESET search_path;
</programlisting>
这个函数在执行时所用的搜索路径将是根据调用者所用的搜索路径。
</para>
</refsect1>
<refsect1>
<!--
<title>Compatibility</title>
-->
<title>兼容性</title>


<!--
<para>
This statement is partially compatible with the <command>ALTER
FUNCTION</> statement in the SQL standard. The standard allows more
properties of a function to be modified, but does not provide the
ability to rename a function, make a function a security definer,
attach configuration parameter values to a function,
or change the owner, schema, or volatility of a function. The standard also
requires the <literal>RESTRICT</> key word, which is optional in
<productname>PostgreSQL</>.
</para>
-->
<para>
这个语句部分兼容SQL标准里面的<command>ALTER FUNCTION</>语句。
标准允许修改函数的更多属性，但是没有提供修改函数名字的功能， 也没有提供把一个函数定义为安全定义器的功能，
更没有修改函数所有者、模式、易失性的功能。 标准还要求<literal>RESTRICT</>关键字，这在<productname>PostgreSQL</>里是可选的。 
</para>

</refsect1>
<refsect1>
<!--
<title>See Also</title>
-->
<title>参见</title>
<simplelist type="inline">
<member><xref linkend="sql-createfunction"></member>
<member><xref linkend="sql-dropfunction"></member>
</simplelist>
</refsect1>
</refentry>
