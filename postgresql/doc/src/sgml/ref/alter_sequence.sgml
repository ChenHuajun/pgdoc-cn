<!--
doc/src/sgml/ref/alter_sequence.sgml
PostgreSQL documentation
-->

<refentry id="SQL-ALTERSEQUENCE">
 <refmeta>
  <refentrytitle>ALTER SEQUENCE</refentrytitle>
  <manvolnum>7</manvolnum>
  <!--
<refmiscinfo>SQL - Language Statements</refmiscinfo>
-->
<refmiscinfo>SQL - 语句</refmiscinfo>
 </refmeta>

 <refnamediv>
  <refname>ALTER SEQUENCE</refname>
  <refpurpose>
  更改一个序列生成器的定义
  </refpurpose>
 </refnamediv>

 <indexterm zone="sql-altersequence">
  <primary>ALTER SEQUENCE</primary>
 </indexterm>

 <refsynopsisdiv>
<synopsis>
ALTER SEQUENCE [ IF EXISTS ] <replaceable class="parameter">name</replaceable> [ INCREMENT [ BY ] <replaceable class="parameter">increment</replaceable> ]
    [ MINVALUE <replaceable class="parameter">minvalue</replaceable> | NO MINVALUE ] [ MAXVALUE <replaceable class="parameter">maxvalue</replaceable> | NO MAXVALUE ]
    [ START [ WITH ] <replaceable class="parameter">start</replaceable> ]
    [ RESTART [ [ WITH ] <replaceable class="parameter">restart</replaceable> ] ]
    [ CACHE <replaceable class="parameter">cache</replaceable> ] [ [ NO ] CYCLE ]
    [ OWNED BY { <replaceable class="parameter">table_name</replaceable>.<replaceable class="parameter">column_name</replaceable> | NONE } ]
ALTER SEQUENCE [ IF EXISTS ] <replaceable class="parameter">name</replaceable> OWNER TO <replaceable class="PARAMETER">new_owner</replaceable>
ALTER SEQUENCE [ IF EXISTS ] <replaceable class="parameter">name</replaceable> RENAME TO <replaceable class="parameter">new_name</replaceable>
ALTER SEQUENCE [ IF EXISTS ] <replaceable class="parameter">name</replaceable> SET SCHEMA <replaceable class="parameter">new_schema</replaceable>
</synopsis>
 </refsynopsisdiv>

 <refsect1>
  <!--
<title>Description</title>
-->
<title>描述</title>

  <!--
<para>
   <command>ALTER SEQUENCE</command> changes the parameters of an existing
   sequence generator.  Any parameters not specifically set in the
   <command>ALTER SEQUENCE</command> command retain their prior settings.
  </para>
-->
<para>
<command>ALTER SEQUENCE</command> 命令修改一个现有的序列发生器的参数。 任何没有明确在
   <command>ALTER SEQUENCE</command> 命令里声明的参数都将保留原先的设置。
</para>

  <!--
<para>
   You must own the sequence to use <command>ALTER SEQUENCE</>.
   To change a sequence's schema, you must also have <literal>CREATE</>
   privilege on the new schema.
   To alter the owner, you must also be a direct or indirect member of the new
   owning role, and that role must have <literal>CREATE</literal> privilege on
   the sequence's schema.  (These restrictions enforce that altering the owner
   doesn't do anything you couldn't do by dropping and recreating the sequence.
   However, a superuser can alter ownership of any sequence anyway.)
  </para>
-->
<para>
要使用<command>ALTER SEQUENCE</>，你必须是该序列的所有者。
要改变一个序列的模式，你必须在新的模式上有 <literal>CREATE</> 权限。
要改变一个序列的所有者，你必须也是新的所有角色的直接或者间接的成员，并且那个角色必须有序列模式上的<literal>CREATE</literal> 权限。
（这些约束强制在改变所有者时只能做删除或者创建序列时能做的操作。然而，超级用户可以以任何方式改变任意序列的成员关系。）

</para>
 </refsect1>

 <refsect1>
  <!--
<title>Parameters</title>
-->
<title>参数</title>

<para>
    <variablelist>
     <varlistentry>
      <term><replaceable class="parameter">name</replaceable></term>
      <listitem>
 <!--
       <para>
        The name (optionally schema-qualified) of a sequence to be altered.
       </para>
-->
<para>
一个要修改的序列的名字(可以有模式修饰)。
</para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><literal>IF EXISTS</literal></term>
      <listitem>
<!--
<para>
        Do not throw an error if the sequence does not exist. A notice is issued
        in this case.
       </para>
-->
<para>
当序列不存在时使用该选项不会出现错误信息，仅有一个提示信息。
</para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><replaceable class="parameter">increment</replaceable></term>
      <listitem>
       <!--
<para>
        The clause <literal>INCREMENT BY <replaceable
        class="parameter">increment</replaceable></literal> is
        optional. A positive value will make an ascending sequence, a
        negative one a descending sequence.  If unspecified, the old
        increment value will be maintained.
       </para>
-->
<para>
<literal>INCREMENT BY <replaceable class="parameter">increment</replaceable></literal>选项是可选的。 
一个正数会让序列成为递增序列，负数则成为递减序列。如果没有声明，将沿用原来的递增值。
</para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><replaceable class="parameter">minvalue</replaceable></term>
      <term><literal>NO MINVALUE</literal></term>
      <listitem>
       <!--
<para>
        The optional clause <literal>MINVALUE <replaceable
        class="parameter">minvalue</replaceable></literal> determines
        the minimum value a sequence can generate. If <literal>NO
        MINVALUE</literal> is specified, the defaults of 1 and
        -2<superscript>63</>-1 for ascending and descending sequences,
        respectively, will be used.  If neither option is specified,
        the current minimum value will be maintained.
       </para>
-->
<para>
<literal>MINVALUE <replaceable class="parameter">minvalue</replaceable></literal>是一个可选选项，它决定一个序列可以生成的最小的值。 
如果声明了<literal>NO MINVALUE</literal>，那么将使用缺省值，对于递增和递减的序列分别是1和-2<superscript>63</>-1。
如果没有声明则沿用当前的最小值。
</para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><replaceable class="parameter">maxvalue</replaceable></term>
      <term><literal>NO MAXVALUE</literal></term>
      <listitem>
       <!--
<para>
        The optional clause <literal>MAXVALUE <replaceable
        class="parameter">maxvalue</replaceable></literal> determines
        the maximum value for the sequence. If <literal>NO
        MAXVALUE</literal> is specified, the defaults are
        2<superscript>63</>-1 and -1 for ascending and descending
        sequences, respectively, will be used.  If neither option is
        specified, the current maximum value will be maintained.
       </para>
-->
<para>
<literal>MAXVALUE <replaceable class="parameter">maxvalue</replaceable></literal>是一个可选选项，它决定一个序列可以生成的最大的值。 
如果声明了<literal>NO MAXVALUE</literal>那么将使用缺省值，对于递增和递减的序列分别是2<superscript>63</>-1和-1。
如果没有声明则沿用当前的最大值。
</para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><replaceable class="parameter">start</replaceable></term>
      <listitem>
       <!--
<para>
        The optional clause <literal>START WITH <replaceable
        class="parameter">start</replaceable></literal> changes the
        recorded start value of the sequence.  This has no effect on the
        <emphasis>current</> sequence value; it simply sets the value
        that future <command>ALTER SEQUENCE RESTART</> commands will use.
       </para>
-->
<para>
<literal>START WITH <replaceable class="parameter">start</replaceable></literal>是一个可选选项，它修改序列的起始值。 
这对序列<emphasis>当前</>值没有影响；它仅设置将来的<command>ALTER SEQUENCE RESTART</>命令将会使用的值。
</para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><replaceable class="parameter">restart</replaceable></term>
      <listitem>
       <!--
<para>
        The optional clause <literal>RESTART [ WITH <replaceable
        class="parameter">restart</replaceable> ]</literal> changes the
        current value of the sequence.  This is equivalent to calling the
        <function>setval</> function with <literal>is_called</literal> =
        <literal>false</>: the specified value will be returned by the
        <emphasis>next</> call of <function>nextval</>.
        Writing <literal>RESTART</> with no <replaceable
        class="parameter">restart</> value is equivalent to supplying
        the start value that was recorded by <command>CREATE SEQUENCE</>
        or last set by <command>ALTER SEQUENCE START WITH</>.
       </para>
-->
<para>
<literal>RESTART [ WITH <replaceable class="parameter">restart</replaceable> ]</literal>是一个可选选项，它改变序列的当前值。
这相当于用<literal>is_called</literal> = <literal>false</>参数调用<function>setval</> 函数 ：指定的值将会通过<function>nextval</>的<emphasis>next</>调用返回。
不使用<replaceable class="parameter">restart</>参数值来使用<literal>RESTART</>选项相当于使用<command>CREATE SEQUENCE</>或由<command>ALTER SEQUENCE START WITH</>设置的初始值。
</para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><replaceable class="parameter">cache</replaceable></term>
      <listitem>
       <!--
<para>
        The clause <literal>CACHE <replaceable
        class="parameter">cache</replaceable></literal> enables
        sequence numbers to be preallocated and stored in memory for
        faster access. The minimum value is 1 (only one value can be
        generated at a time, i.e., no cache).  If unspecified, the old
        cache value will be maintained.
       </para>
-->
<para>
<literal>CACHE <replaceable class="parameter">cache</replaceable></literal>选项打开序列号预分配功能以及为了快速存取而在内存中存储的功能。 
最小值是1（表示每次只能生成一个数值，没有缓冲）。如果没有声明，将沿用旧的缓冲值。
</para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><literal>CYCLE</literal></term>
      <listitem>
       <!--
<para>
        The optional <literal>CYCLE</literal> key word can be used to enable
        the sequence to wrap around when the
        <replaceable class="parameter">maxvalue</replaceable> or
        <replaceable class="parameter">minvalue</replaceable> has been
        reached by
        an ascending or descending sequence respectively. If the limit is
        reached, the next number generated will be the
        <replaceable class="parameter">minvalue</replaceable> or
        <replaceable class="parameter">maxvalue</replaceable>,
        respectively.
       </para>
-->
<para>
可选的 <literal>CYCLE</literal>选项用于设置升序序列或是降序序列在达到<replaceable class="parameter">maxvalue</replaceable>或者<replaceable class="parameter">minvalue</replaceable>的时候循环使用。
如果达到了极限， 那么生成的下一个数字将分别是<replaceable class="parameter">minvalue</replaceable>或者<replaceable class="parameter">maxvalue</replaceable>。
</para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><literal>NO CYCLE</literal></term>
      <listitem>
       <!--
<para>
        If the optional <literal>NO CYCLE</literal> key word is
        specified, any calls to <function>nextval</function> after the
        sequence has reached its maximum value will return an error.
        If neither <literal>CYCLE</literal> or <literal>NO
        CYCLE</literal> are specified, the old cycle behavior will be
        maintained.
       </para>
-->
<para>
如果声明了可选的<literal>NO CYCLE</literal>选项，任何在序列达到其极限后对<function>nextval</function>的调用都将返回错误。 
如果未声明<literal>CYCLE</literal>或者<literal>NO CYCLE</literal>，那么将沿用原有的循环行为。
</para>
      </listitem>
     </varlistentry>

   <varlistentry>
    <term><literal>OWNED BY</literal> <replaceable class="parameter">table_name</replaceable>.<replaceable class="parameter">column_name</replaceable></term>
    <term><literal>OWNED BY NONE</literal></term>
    <listitem>
     <!--
<para>
      The <literal>OWNED BY</literal> option causes the sequence to be
      associated with a specific table column, such that if that column
      (or its whole table) is dropped, the sequence will be automatically
      dropped as well.  If specified, this association replaces any
      previously specified association for the sequence.  The specified
      table must have the same owner and be in the same schema as the
      sequence.
      Specifying <literal>OWNED BY NONE</literal> removes any existing
      association, making the sequence <quote>free-standing</>.
     </para>
-->
<para>
<literal>OWNED BY</literal>选项将序列和一个表的特定字段关联， 这样，如果那个字段(或整个表)被删除了，那么序列也将被自动删除。 
如果序列已经与表有关联后，使用这个选项后新关联将覆盖旧有的关联。
指定的表必须与序列的所有者相同并且在同一个模式中。 
使用<literal>OWNED BY NONE</literal>将删除任何已经存在的关联，也就是让该序列变成"独立"序列。
</para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="PARAMETER">new_owner</replaceable></term>
    <listitem>
     <!--
<para>
      The user name of the new owner of the sequence.
     </para>
-->
<para>
序列新所有者的用户名。
</para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">new_name</replaceable></term>
    <listitem>
     <!--
<para>
      The new name for the sequence.
     </para>
-->
<para>
序列的新名称。
</para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">new_schema</replaceable></term>
    <listitem>
     <!--
<para>
      The new schema for the sequence.
     </para>
-->
<para>
序列的新模式。
</para>
    </listitem>
   </varlistentry>

    </variablelist>
   </para>
  </refsect1>

 <refsect1>
  <!--
<title>Notes</title>
-->
<title>注意</title>

  <!--
<para>
   To avoid blocking of concurrent transactions that obtain numbers from the
   same sequence, <command>ALTER SEQUENCE</command>'s effects on the sequence
   generation parameters are never rolled back; those changes take effect
   immediately and are not reversible.  However, the <literal>OWNED BY</>,
   <literal>OWNER TO</>, <literal>RENAME TO</>, and <literal>SET SCHEMA</>
   clauses cause ordinary catalog updates that can be rolled back.
  </para>
-->
<para>
为避免从同一序列获取序列值的并发事务阻塞，在序列产生参数上的<command>ALTER SEQUENCE</command>的影响从不回滚；
这些改变会立刻生效并且是不可逆的；然而，<literal>OWNED BY</>、<literal>OWNER TO</>、<literal>RENAME TO</>和<literal>SET SCHEMA</>选项会引起可被回滚的普通更新。
</para>

  <!--
<para>
   <command>ALTER SEQUENCE</command> will not immediately affect
   <function>nextval</> results in backends,
   other than the current one, that have preallocated (cached) sequence
   values. They will use up all cached values prior to noticing the changed
   sequence generation parameters.  The current backend will be affected
   immediately.
  </para>
-->
<para>
除了当前的正在运行取值操作，<command>ALTER SEQUENCE</command>不会立刻影响后台的<function>nextval</>结果 。
序列在使用完所有缓存的序列值后才会使用变化后的序列参数值。当前后台正在运行取值操作将会立刻受到影响。
</para>

  <!--
<para>
   <command>ALTER SEQUENCE</command> does not affect the <function>currval</>
   status for the sequence.  (Before <productname>PostgreSQL</productname>
   8.3, it sometimes did.)
  </para>
-->
<para>
<command>ALTER SEQUENCE</command>不影响序列的<function>currval</>状态。（在PostgreSQL 8.3之前，有时会影响。）
</para>

  <!--
<para>
   For historical reasons, <command>ALTER TABLE</command> can be used with
   sequences too; but the only variants of <command>ALTER TABLE</command>
   that are allowed with sequences are equivalent to the forms shown above.
  </para>
-->
<para>
由于历史原因，<command>ALTER TABLE</command>也可用于序列；但是<command>ALTER TABLE</command>仅有的与序列有关的变化等价于前面所示的形式。
</para>
 </refsect1>

 <refsect1>
  <!--
<title>Examples</title>
-->
<title>例子</title>

  <!--
<para>
   Restart a sequence called <literal>serial</literal>, at 105:
<programlisting>
ALTER SEQUENCE serial RESTART WITH 105;
</programlisting></para>
-->
<para>
将序列serial设置为从105重新开始取值：
<programlisting>
ALTER SEQUENCE serial RESTART WITH 105;
</programlisting>
</para>
 </refsect1>

 <refsect1>
  <!--
<title>Compatibility</title>
-->
<title>兼容性</title>

  <!--
<para>
   <command>ALTER SEQUENCE</command> conforms to the <acronym>SQL</acronym>
   standard, except for the <literal>START WITH</>,
   <literal>OWNED BY</>, <literal>OWNER TO</>, <literal>RENAME TO</>, and
   <literal>SET SCHEMA</literal> clauses, which are
   <productname>PostgreSQL</productname> extensions.
  </para>
-->
<para>
<command>ALTER SEQUENCE</command>遵从<acronym>SQL</acronym>标准，但<literal>START WITH</>、
   <literal>OWNED BY</>、<literal>OWNER TO</>、<literal>RENAME TO</>和<literal>SET SCHEMA</literal>选项是
   <productname>PostgreSQL</productname>的扩展。
</para>
 </refsect1>

 <refsect1>
  <!--
<title>See Also</title>
-->
<title>参见</title>

  <simplelist type="inline">
   <member><xref linkend="sql-createsequence"></member>
   <member><xref linkend="sql-dropsequence"></member>
  </simplelist>
 </refsect1>

</refentry>
