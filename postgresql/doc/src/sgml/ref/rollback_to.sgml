<!--
doc/src/sgml/ref/rollback_to.sgml
PostgreSQL documentation
-->

<refentry id="SQL-ROLLBACK-TO">
 <refmeta>
  <refentrytitle>ROLLBACK TO SAVEPOINT</refentrytitle>
  <manvolnum>7</manvolnum>
  <!--
<refmiscinfo>SQL - Language Statements</refmiscinfo>
-->
<refmiscinfo>SQL - 语句</refmiscinfo>
 </refmeta>

 <refnamediv>
  <refname>ROLLBACK TO SAVEPOINT</refname>
  <!-- 
  <refpurpose>roll back to a savepoint</refpurpose> 
  -->
  <refpurpose>回滚到一个保存点</refpurpose>
 </refnamediv>

 <indexterm zone="sql-rollback-to">
  <primary>ROLLBACK TO SAVEPOINT</primary>
 </indexterm>

 <indexterm zone="sql-rollback-to">
  <!-- 
  <primary>savepoints</primary>
  <secondary>rolling back</secondary> 
  -->
  <primary>保存点</primary>
  <secondary>回滚</secondary>
 </indexterm>

 <refsynopsisdiv>
<synopsis>
ROLLBACK [ WORK | TRANSACTION ] TO [ SAVEPOINT ] <replaceable>savepoint_name</replaceable>
</synopsis>
 </refsynopsisdiv>

 <refsect1>
  <!--
<title>Description</title>
-->
<title>描述</title>

  <!--
<para>
   Roll back all commands that were executed after the savepoint was
   established.  The savepoint remains valid and can be rolled back to
   again later, if needed.
  </para>
-->
<para>
回滚所有指定保存点建立之后执行的命令。保存点仍然有效，并且需要时可以再次回滚到该点。
</para>

  <!--
<para>
   <command>ROLLBACK TO SAVEPOINT</> implicitly destroys all savepoints that
   were established after the named savepoint.
  </para>
-->
<para>
<command>ROLLBACK TO SAVEPOINT</>隐含地删除所有在该保存点之后建立的保存点。
</para>
 </refsect1>

 <refsect1>
  <!--
<title>Parameters</title>
-->
<title>参数</title>

  <variablelist>
   <varlistentry>
    <term><replaceable class="PARAMETER">savepoint_name</></term>
    <listitem>
     <!--
<para>
      The savepoint to roll back to.
     </para>
-->
<para>
回滚截至的保存点。
</para>
    </listitem>
   </varlistentry>
  </variablelist>
 </refsect1>

 <refsect1>
  <!--
<title>Notes</title>
-->
<title>注意</title>

  <!--
<para>
   Use <xref linkend="SQL-RELEASE-SAVEPOINT"> to destroy a savepoint
   without discarding the effects of commands executed after it was
   established.
  </para>
-->
<para>
使用<xref linkend="SQL-RELEASE-SAVEPOINT">删除一个保存点，
而不会抛弃这个保存点建立之后执行的命令结果。
</para>

  <!--
<para>
   Specifying a savepoint name that has not been established is an error.
  </para>
-->
<para>
声明一个还没有建立的保存点名字是一个错误。
</para>

  <!--
<para>
   Cursors have somewhat non-transactional behavior with respect to
   savepoints.  Any cursor that is opened inside a savepoint will be closed
   when the savepoint is rolled back.  If a previously opened cursor is
   affected by a <command>FETCH</> or <command>MOVE</> command inside a
   savepoint that is later rolled back, the cursor remains at the
   position that <command>FETCH</> left it pointing to (that is, the cursor
   motion caused by <command>FETCH</> is not rolled back).
   Closing a cursor is not undone by rolling back, either.
   However, other side-effects caused by the cursor's query (such as
   side-effects of volatile functions called by the query) <emphasis>are</>
   rolled back if they occur during a savepoint that is later rolled back.
   A cursor whose execution causes a transaction to abort is put in a
   cannot-execute state, so while the transaction can be restored using
   <command>ROLLBACK TO SAVEPOINT</>, the cursor can no longer be used.
  </para>
-->
<para>
在保存点方面，游标有一些非事务性的行为。任何在保存点里打开的游标都会在回滚掉这个保存点之后关闭。
如果一个前面打开了的游标在保存点里面，并且游标被一个<command>FETCH</>或<command>MOVE</>命令影响，
而这个保存点稍后回滚了，那么这个游标仍然在<command>FETCH</>让它指向的位置
(也就是，由<command>FETCH</>造成的游标动作不会被回滚)。关闭一个游标的行为也不会被回滚给撤消掉。
但是，如果由游标查询引起的副作用（如查询调用不稳定函数引起的副作用）在一个稍后会回滚的保存点发生，
那么他们也<emphasis>会</>回滚。如果一个游标的操作导致事务回滚，那么这个游标就会置于不可执行状态，
所以，尽管一个事务可以用<command>ROLLBACK TO SAVEPOINT</>重新恢复，但是游标不能再使用了。
</para>
 </refsect1>

 <refsect1>
  <!--
<title>Examples</title>
-->
<title>例子</title>

  <!--
<para>
   To undo the effects of the commands executed after <literal>my_savepoint</literal>
   was established:
<programlisting>
ROLLBACK TO SAVEPOINT my_savepoint;
</programlisting>
  </para>
-->
<para>
撤销<literal>my_savepoint</literal>建立之后执行的命令的影响：
<programlisting>
ROLLBACK TO SAVEPOINT my_savepoint;
</programlisting>
</para>

<para>
  <!-- 
  Cursor positions are not affected by savepoint rollback: 
  -->
游标位置不受保存点回滚的影响：
<programlisting>
BEGIN;

DECLARE foo CURSOR FOR SELECT 1 UNION SELECT 2;

SAVEPOINT foo;

FETCH 1 FROM foo;
 ?column? 
----------
        1

ROLLBACK TO SAVEPOINT foo;

FETCH 1 FROM foo;
 ?column? 
----------
        2

COMMIT;
</programlisting></para>

 </refsect1>

 <refsect1>
  <!--
<title>Compatibility</title>
-->
<title>兼容性</title>

  <!--
<para>
   The <acronym>SQL</> standard specifies that the key word
   <literal>SAVEPOINT</> is mandatory, but <productname>PostgreSQL</>
   and <productname>Oracle</> allow it to be omitted.  SQL allows
   only <literal>WORK</>, not <literal>TRANSACTION</>, as a noise word
   after <literal>ROLLBACK</>.  Also, SQL has an optional clause
   <literal>AND [ NO ] CHAIN</> which is not currently supported by
   <productname>PostgreSQL</>.  Otherwise, this command conforms to
   the SQL standard.
  </para>
-->
<para>
<acronym>SQL</>标准声明关键字<literal>SAVEPOINT</>是必须的，但是<productname>PostgreSQL</>
和<productname>Oracle</>允许省略<literal>SAVEPOINT</>关键字。SQL 只允许<literal>WORK</>
而不是<literal>TRANSACTION</>作为<literal>ROLLBACK</>后面的无意义关键字。还有，
SQL 有一个可选的<literal>AND [ NO ] CHAIN</>子句，目前<productname>PostgreSQL</>还不支持。
否则，这个命令完全兼容 SQL 标准。
</para>
 </refsect1>

 <refsect1>
  <!--
<title>See Also</title>
-->
<title>又见</title>

  <simplelist type="inline">
   <member><xref linkend="sql-begin"></member>
   <member><xref linkend="sql-commit"></member>
   <member><xref linkend="sql-release-savepoint"></member>
   <member><xref linkend="sql-rollback"></member>
   <member><xref linkend="sql-savepoint"></member>
  </simplelist>
 </refsect1>
</refentry>
