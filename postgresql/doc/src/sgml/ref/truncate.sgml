<!--
doc/src/sgml/ref/truncate.sgml
PostgreSQL documentation
-->

<refentry id="SQL-TRUNCATE">
 <refmeta>
  <refentrytitle>TRUNCATE</refentrytitle>
  <manvolnum>7</manvolnum>
  <!--
<refmiscinfo>SQL - Language Statements</refmiscinfo>
-->
<refmiscinfo>SQL - 语句</refmiscinfo>
 </refmeta>

 <refnamediv>
  <refname>TRUNCATE</refname>
  <!-- 
  <refpurpose>empty a table or set of tables</refpurpose>
  -->
  <refpurpose>清空一个或一组表</refpurpose>
 </refnamediv>

 <indexterm zone="sql-truncate">
  <primary>TRUNCATE</primary>
 </indexterm>

 <refsynopsisdiv>
<synopsis>
TRUNCATE [ TABLE ] [ ONLY ] <replaceable class="PARAMETER">name</replaceable> [ * ] [, ... ]
    [ RESTART IDENTITY | CONTINUE IDENTITY ] [ CASCADE | RESTRICT ]
</synopsis>
 </refsynopsisdiv>

 <refsect1>
  <!--
<title>Description</title>
-->
<title>描述</title>

  <!--
<para>
   <command>TRUNCATE</command> quickly removes all rows from a set of
   tables. It has the same effect as an unqualified
   <command>DELETE</command> on each table, but since it does not actually
   scan the tables it is faster. Furthermore, it reclaims disk space
   immediately, rather than requiring a subsequent <command>VACUUM</command>
   operation. This is most useful on large tables.
  </para>
-->
<para>
<command>TRUNCATE</command>快速地从一堆表中删除所有行。它和在每个表上进行无条件的
<command>DELETE</command>有同样的效果，不过因为它不做表扫描，因而快得多。另外，
它快速回收磁盘空间，而不是请求一个随后的<command>VACUUM</command>操作。
在大表上最有用。
</para>
 </refsect1>

 <refsect1>
  <!--
<title>Parameters</title>
-->
<title>参数</title>

  <variablelist>
   <varlistentry>
    <term><replaceable class="PARAMETER">name</replaceable></term>
    <listitem>
     <!--
<para>
      The name (optionally schema-qualified) of a table to truncate.
      If <literal>ONLY</> is specified before the table name, only that table
      is truncated.  If <literal>ONLY</> is not specified, the table and all
      its descendant tables (if any) are truncated.  Optionally, <literal>*</>
      can be specified after the table name to explicitly indicate that
      descendant tables are included.
     </para>
-->
<para>
要清空的表名字(可以有模式修饰)。如果在表名前声明了<literal>ONLY</>，
那么只有那个表会被清空。如果没有声明<literal>ONLY</>，这个表以及其所有子表
（若有）会被清空。可选地,可以在表名后声明<literal>*</>以明确指定包括子表。
</para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>RESTART IDENTITY</literal></term>
    <listitem>
     <!--
<para>
      Automatically restart sequences owned by columns of
      the truncated table(s).
     </para>
-->
<para>
截断表中的序列字段的序列值将被重置。
</para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>CONTINUE IDENTITY</literal></term>
    <listitem>
     <!--
<para>
      Do not change the values of sequences.  This is the default.
     </para>
-->
<para>
不要改变序列的值。此为缺省。
</para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>CASCADE</literal></term>
    <listitem>
     <!--
<para>
      Automatically truncate all tables that have foreign-key references
      to any of the named tables, or to any tables added to the group
      due to <literal>CASCADE</literal>.
     </para>
-->
<para>
级联清空所有在该表上有外键引用的表，或者由于<literal>CASCADE</literal>而被添加到组中的表。
</para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>RESTRICT</literal></term>
    <listitem>
     <!--
<para>
      Refuse to truncate if any of the tables have foreign-key references
      from tables that are not listed in the command.  This is the default.
     </para>
-->
<para>
如果有外键引用数据并且引用表没有在命令行中列出，则拒绝清空。这是缺省。
</para>
    </listitem>
   </varlistentry>
  </variablelist>
 </refsect1>

 <refsect1>
  <!--
<title>Notes</title>
-->
<title>注意</title>

  <!--
<para>
   You must have the <literal>TRUNCATE</literal> privilege on a table
   to truncate it.
  </para>
-->
<para>
你必须对表有<literal>TRUNCATE</literal>权限以清空它。
</para>

  <!--
<para>
   <command>TRUNCATE</> acquires an <literal>ACCESS EXCLUSIVE</> lock on each
   table it operates on, which blocks all other concurrent operations
   on the table.  When <literal>RESTART IDENTITY</> is specified, any
   sequences that are to be restarted are likewise locked exclusively.
   If concurrent access to a table is required, then
   the <command>DELETE</> command should be used instead.
  </para>
-->
<para>
<command>TRUNCATE</>在在操作的每个表上请求一个<literal>ACCESS EXCLUSIVE</>锁，
这种锁会阻塞表上的所有其他并发操作。当声明了<literal>RESTART IDENTITY</>时，
任何被重启的序列也会被排他锁锁住。如果需要对一个表并发访问，
那么应该使用<command>DELETE</>命令。
</para>

  <!--
<para>
   <command>TRUNCATE</> cannot be used on a table that has foreign-key
   references from other tables, unless all such tables are also truncated
   in the same command.  Checking validity in such cases would require table
   scans, and the whole point is not to do one.  The <literal>CASCADE</>
   option can be used to automatically include all dependent tables &mdash;
   but be very careful when using this option, or else you might lose data you
   did not intend to!
  </para>
-->
<para>
如果从其它表有到某个表的外键引用，那么就不能对该表使用<command>TRUNCATE</>，
除非这些表在同一个命令中也被清空。在这种情况下检查有效性要求进行表扫描，
而<command>TRUNCATE</>并不做这样的事情。<literal>CASCADE</>
选项可以用于级联包含所有依赖表，但是使用此选项必须十分小心，否则可能丢失原本不想丢失的数据。
</para>

  <!--
<para>
   <command>TRUNCATE</> will not fire any <literal>ON DELETE</literal>
   triggers that might exist for the tables.  But it will fire
   <literal>ON TRUNCATE</literal> triggers.
   If <literal>ON TRUNCATE</> triggers are defined for any of
   the tables, then all <literal>BEFORE TRUNCATE</literal> triggers are
   fired before any truncation happens, and all <literal>AFTER
   TRUNCATE</literal> triggers are fired after the last truncation is
   performed and any sequences are reset.
   The triggers will fire in the order that the tables are
   to be processed (first those listed in the command, and then any
   that were added due to cascading).
  </para>
-->
<para>
<command>TRUNCATE</>不会触发任何在该表上的<literal>ON DELETE</literal>触发器。
但它会触发<literal>ON TRUNCATE</literal>触发器。如果任何表上定义有<literal>ON TRUNCATE</>
触发器，则所有的<literal>BEFORE TRUNCATE</literal>
触发器会在任何截断发生之前触发，而所有<literal>AFTER TRUNCATE</literal>
触发器会在最后一个截断执行后和任何序列重设后被触发。该触发器会以表执行的顺序触发
（首先是命令中列出的，然后是任何基于级联添加的）。
</para>

  <warning>
   <!--
<para>
    <command>TRUNCATE</> is not MVCC-safe (see <xref linkend="mvcc">
     for general information about MVCC).  After truncation, the table
     will appear empty to all concurrent transactions, even if they
     are using a snapshot taken before the truncation occurred.  This
     will only be an issue for a transaction that did not access the
     truncated table before the truncation happened &mdash; any
     transaction that has done so would hold at least an
     <literal>ACCESS SHARE</literal> lock, which would block
     <command>TRUNCATE</> until that transaction completes.  So
     truncation will not cause any apparent inconsistency in the table
     contents for successive queries on the same table, but it could
     cause visible inconsistency between the contents of the truncated
     table and other tables in the database.
   </para>
-->
<para>
<command>TRUNCATE</>不是mvcc 安全的操作（参考mvcc的文档）。在截断之后，所有并发的事务看到的该表都是空的，即使他们在截断发生前使用快照。
这将是一个针对截断发生之前没有访问截断表的事务的问题，在事务中对截断表的任何访问至少产生一个
<literal>ACCESS SHARE</literal>锁，这将阻塞<command>TRUNCATE</>直到事务完成。
所以截断不会导致在相同表上连续查询时表内容上的明显不一致，
但会导致截断表和数据库中其他表在内容上可见的不一致性。
</para>
  </warning>

  <!--
<para>
   <command>TRUNCATE</> is transaction-safe with respect to the data
   in the tables: the truncation will be safely rolled back if the surrounding
   transaction does not commit.
  </para>
-->
<para>
<command>TRUNCATE</>在事务中断表数据是安全可的：只要开启的事物不提交，则事物会安全回滚。
</para>

  <!--
<para>
   When <literal>RESTART IDENTITY</> is specified, the implied
   <command>ALTER SEQUENCE RESTART</> operations are also done
   transactionally; that is, they will be rolled back if the surrounding
   transaction does not commit.  This is unlike the normal behavior of
   <command>ALTER SEQUENCE RESTART</>.  Be aware that if any additional
   sequence operations are done on the restarted sequences before the
   transaction rolls back, the effects of these operations on the sequences
   will be rolled back, but not their effects on <function>currval()</>;
   that is, after the transaction <function>currval()</> will continue to
   reflect the last sequence value obtained inside the failed transaction,
   even though the sequence itself may no longer be consistent with that.
   This is similar to the usual behavior of <function>currval()</> after
   a failed transaction.
  </para>
-->
<para>
当声明了<literal>RESTART IDENTITY</>时，隐含的<command>ALTER SEQUENCE RESTART</>
操作也会事务性的完成；也就是，如果包围的事务没有提交，它们将回滚。
这不同于<command>ALTER SEQUENCE RESTART</>的正常行为。要知道，
如果在序列重启之后与事务回滚之前执行了额外的序列操作，
那么这些操作的影响也会回滚，但是它们在<function>currval()</>上的影响不会回滚；
也就是，在事务之后，<function>currval()</>将继续反映在失败事务中获得的最后序列值，
即使序列本身可能与其不再一致。这类似于<function>currval()</>在一个失败事务后的普通行为。
</para>
 </refsect1>

 <refsect1>
  <!--
<title>Examples</title>
-->
<title>例子</title>

  <!--
<para>
   Truncate the tables <literal>bigtable</literal> and
   <literal>fattable</literal>:

<programlisting>
TRUNCATE bigtable, fattable;
</programlisting>
  </para>
-->
<para>
清空<literal>bigtable</literal>和<literal>fattable</literal>表：
<programlisting>
TRUNCATE bigtable, fattable;
</programlisting>
</para>

  <!--
<para>
   The same, and also reset any associated sequence generators:

<programlisting>
TRUNCATE bigtable, fattable RESTART IDENTITY;
</programlisting>
  </para>
-->
<para>
同样地，也重置任何相关的序列生成器:
<programlisting>
TRUNCATE bigtable, fattable RESTART IDENTITY;
</programlisting>
</para>

  <!--
<para>
   Truncate the table <literal>othertable</literal>, and cascade to any tables
   that reference <literal>othertable</literal> via foreign-key
   constraints:

<programlisting>
TRUNCATE othertable CASCADE;
</programlisting></para>
-->
<para>
清空<literal>othertable</literal>表，并且级联清空所有通过外键约束引用
<literal>othertable</literal>的表：
<programlisting>
TRUNCATE othertable CASCADE;
</programlisting>
</para>
 </refsect1>

 <refsect1>
  <!--
<title>Compatibility</title>
-->
<title>兼容性</title>

  <!--
<para>
   The SQL:2008 standard includes a <command>TRUNCATE</command> command
   with the syntax <literal>TRUNCATE TABLE
   <replaceable>tablename</replaceable></literal>.  The clauses
   <literal>CONTINUE IDENTITY</literal>/<literal>RESTART IDENTITY</literal>
   also appear in that standard, but have slightly different though related
   meanings.  Some of the concurrency behavior of this command is left
   implementation-defined by the standard, so the above notes should be
   considered and compared with other implementations if necessary.
  </para>
-->
<para>
SQL:2008标准包括一个有语法<literal>TRUNCATE TABLE <replaceable>tablename</replaceable></literal>
的<command>TRUNCATE</command>命令。<literal>CONTINUE IDENTITY</literal>/<literal>RESTART IDENTITY</literal>
也出现在那个标准中，但是有轻微的不同和相关的含义。该命令的一些并发行为通过标准定义实现的，
所以，如果必要，应该考虑上面的说明并与其他实现比较。
</para>
 </refsect1>
</refentry>