<!--
doc/src/sgml/ref/values.sgml
PostgreSQL documentation
-->

<refentry id="SQL-VALUES">
 <refmeta>
  <refentrytitle>VALUES</refentrytitle>
  <manvolnum>7</manvolnum>
  <!--
<refmiscinfo>SQL - Language Statements</refmiscinfo>
-->
<refmiscinfo>SQL - 语句</refmiscinfo>
 </refmeta>

 <refnamediv>
  <refname>VALUES</refname>
  <!-- 
  <refpurpose>compute a set of rows</refpurpose> 
  -->
  <refpurpose>计算一个或一组行</refpurpose>
 </refnamediv>

 <indexterm zone="sql-values">
  <primary>VALUES</primary>
 </indexterm>

 <refsynopsisdiv>
<synopsis>
VALUES ( <replaceable class="PARAMETER">expression</replaceable> [, ...] ) [, ...]
    [ ORDER BY <replaceable class="parameter">sort_expression</replaceable> [ ASC | DESC | USING <replaceable class="parameter">operator</replaceable> ] [, ...] ]
    [ LIMIT { <replaceable class="parameter">count</replaceable> | ALL } ]
    [ OFFSET <replaceable class="parameter">start</replaceable> [ ROW | ROWS ] ]
    [ FETCH { FIRST | NEXT } [ <replaceable class="parameter">count</replaceable> ] { ROW | ROWS } ONLY ]
</synopsis>
 </refsynopsisdiv>

 <refsect1>
  <!--
<title>Description</title>
-->
<title>描述</title>

  <!--
<para>
   <command>VALUES</command> computes a row value or set of row values
   specified by value expressions.  It is most commonly used to generate
   a <quote>constant table</> within a larger command, but it can be
   used on its own.
  </para>
-->
<para>
<command>VALUES</command>根据给定的值表达式计算一个或一组行的值。
它通常用于在一个较大的命令内生成一个<quote>常数表</>，但是它也可以用于自身。
</para>

  <!--
<para>
   When more than one row is specified, all the rows must have the same
   number of elements.  The data types of the resulting table's columns are
   determined by combining the explicit or inferred types of the expressions
   appearing in that column, using the same rules as for <literal>UNION</>
   (see <xref linkend="typeconv-union-case">).
  </para>
-->
<para>
如果指定了多行，那么每一行都必须拥有相同的元素个数。
结果表字段的数据类型将根据表达式的明确或隐含的数据类型确定，
使用的规则与<literal>UNION</>(<xref linkend="typeconv-union-case">)相同。
</para>

  <!--
<para>
   Within larger commands, <command>VALUES</> is syntactically allowed
   anywhere that <command>SELECT</> is.  Because it is treated like a
   <command>SELECT</> by the grammar, it is possible to use
   the <literal>ORDER BY</>, <literal>LIMIT</> (or
   equivalently <literal>FETCH FIRST</literal>),
   and <literal>OFFSET</> clauses with a
   <command>VALUES</> command.
  </para>
-->
<para>
在大命令里面，<command>VALUES</>允许出现在任何<command>SELECT</>可以出现的地方。
因为它在语法上非常类似于<command>SELECT</>，可以在<command>VALUES</>命令中使用
<literal>ORDER BY</>, <literal>LIMIT</> (或相等的 <literal>FETCH FIRST</literal>),
和 <literal>OFFSET</>子句。
</para>
 </refsect1>

 <refsect1>
  <!--
<title>Parameters</title>
-->
<title>参数</title>

  <variablelist>
   <varlistentry>
    <term><replaceable class="PARAMETER">expression</replaceable></term>
    <listitem>
     <!--
<para>
      A constant or expression to compute and insert at the indicated place
      in the resulting table (set of rows).  In a <command>VALUES</> list
      appearing at the top level of an <command>INSERT</>, an
      <replaceable class="PARAMETER">expression</replaceable> can be replaced
      by <literal>DEFAULT</literal> to indicate that the destination column's
      default value should be inserted.  <literal>DEFAULT</literal> cannot
      be used when <command>VALUES</> appears in other contexts.
     </para>
-->
<para>
用于计算或插入结果表指定地点的常量或者表达式。在一个出现在<command>INSERT</>
顶层的<command>VALUES</>列表中，<replaceable class="PARAMETER">expression</replaceable>
可以被<literal>DEFAULT</literal>替换以表示插入目的字段的缺省值。除此以外，
当<command>VALUES</>出现在其他场合的时候是不能使用<literal>DEFAULT</literal>的。
</para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">sort_expression</replaceable></term>
    <listitem>
     <!--
<para>
      An expression or integer constant indicating how to sort the result
      rows.  This expression can refer to the columns of the
      <command>VALUES</> result as <literal>column1</>, <literal>column2</>,
      etc.  For more details see
      <xref linkend="sql-orderby" endterm="sql-orderby-title">.
     </para>
-->
<para>
一个表示如何排序结果行的表达式或者整数常量。这个表达式可以按照<literal>column1</>, 
<literal>column2</>等等引用<command>VALUES</>的结果列。更多细节参见
<xref linkend="sql-orderby" endterm="sql-orderby-title">。
</para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">operator</replaceable></term>
    <listitem>
     <!--
<para>
      A sorting operator.  For details see
      <xref linkend="sql-orderby" endterm="sql-orderby-title">.
     </para>
-->
<para>
一个排序操作符。更多细节参见<xref linkend="sql-orderby" endterm="sql-orderby-title">。
</para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">count</replaceable></term>
    <listitem>
     <!--
<para>
      The maximum number of rows to return.  For details see
      <xref linkend="sql-limit" endterm="sql-limit-title">.
     </para>
-->
<para>
返回的最大行数。更多细节参见 <xref linkend="sql-limit" endterm="sql-limit-title">。
</para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">start</replaceable></term>
    <listitem>
     <!--
<para>
      The number of rows to skip before starting to return rows.
      For details see
      <xref linkend="sql-limit" endterm="sql-limit-title">.
     </para>
-->
<para>
在开始返回行之前跳过的行数。更多细节参见<xref linkend="sql-limit" endterm="sql-limit-title">。
</para>
    </listitem>
   </varlistentry>
  </variablelist>
 </refsect1>

 <refsect1>
  <!--
<title>Notes</title>
-->
<title>注意</title>

  <!--
<para>
   <command>VALUES</> lists with very large numbers of rows should be avoided,
   as you might encounter out-of-memory failures or poor performance.
   <command>VALUES</> appearing within <command>INSERT</> is a special case
   (because the desired column types are known from the <command>INSERT</>'s
   target table, and need not be inferred by scanning the <command>VALUES</>
   list), so it can handle larger lists than are practical in other contexts.
  </para>
-->
<para>
应当避免使用<command>VALUES</>返回数量非常大的结果行，否则可能会遭遇内存耗尽或者性能低下。
出现在<command>INSERT</>中的<command>VALUES</>是一个特殊情况，
因为目标字段类型可以从<command>INSERT</>的目标表获知，并不需要通过扫描<command>VALUES</>
列表来推测，所以在此情况下可以处理非常大的结果行。
</para>
 </refsect1>

 <refsect1>
  <!--
<title>Examples</title>
-->
<title>例子</title>

  <!--
<para>
   A bare <command>VALUES</> command:

<programlisting>
VALUES (1, 'one'), (2, 'two'), (3, 'three');
</programlisting>

   This will return a table of two columns and three rows.  It's effectively
   equivalent to:

<programlisting>
SELECT 1 AS column1, 'one' AS column2
UNION ALL
SELECT 2, 'two'
UNION ALL
SELECT 3, 'three';
</programlisting>

  </para>
-->
<para>
一个光秃秃的<command>VALUES</>命令：
<programlisting>
VALUES (1, 'one'), (2, 'two'), (3, 'three');
</programlisting>
这将返回一个三行两列的表，它在效果上相当于：
<programlisting>
SELECT 1 AS column1, 'one' AS column2
UNION ALL
SELECT 2, 'two'
UNION ALL
SELECT 3, 'three';
</programlisting>
</para>

  <!--
<para>
   More usually, <command>VALUES</> is used within a larger SQL command.
   The most common use is in <command>INSERT</>:

<programlisting>
INSERT INTO films (code, title, did, date_prod, kind)
    VALUES ('T_601', 'Yojimbo', 106, '1961-06-16', 'Drama');
</programlisting>
  </para>
-->
<para>
通常，<command>VALUES</>会用于一个大 SQL 命令中，最常见的是用于<command>INSERT</>命令：
<programlisting>
INSERT INTO films (code, title, did, date_prod, kind)
    VALUES ('T_601', 'Yojimbo', 106, '1961-06-16', 'Drama');
</programlisting>
</para>

  <!--
<para>
   In the context of <command>INSERT</>, entries of a <command>VALUES</> list
   can be <literal>DEFAULT</literal> to indicate that the column default
   should be used here instead of specifying a value:

<programlisting>
INSERT INTO films VALUES
    ('UA502', 'Bananas', 105, DEFAULT, 'Comedy', '82 minutes'),
    ('T_601', 'Yojimbo', 106, DEFAULT, 'Drama', DEFAULT);
</programlisting>
  </para>
-->
<para>
在用于<command>INSERT</>时，<command>VALUES</>列表中的项可以使用
<literal>DEFAULT</literal>来表示使用字段的缺省值：
<programlisting>
INSERT INTO films VALUES
    ('UA502', 'Bananas', 105, DEFAULT, 'Comedy', '82 minutes'),
    ('T_601', 'Yojimbo', 106, DEFAULT, 'Drama', DEFAULT);
</programlisting>
</para>
<para>
<!-- 
   <command>VALUES</> can also be used where a sub-<command>SELECT</> might
   be written, for example in a <literal>FROM</> clause:
-->
<command>VALUES</>还可以用于子<command>SELECT</>可以应用的场合。
比如在一个<literal>FROM</>子句中：
<programlisting>
SELECT f.*
  FROM films f, (VALUES('MGM', 'Horror'), ('UA', 'Sci-Fi')) AS t (studio, kind)
  WHERE f.studio = t.studio AND f.kind = t.kind;

UPDATE employees SET salary = salary * v.increase
  FROM (VALUES(1, 200000, 1.2), (2, 400000, 1.4)) AS v (depno, target, increase)
  WHERE employees.depno = v.depno AND employees.sales &gt;= v.target;
</programlisting>

<!-- 
   Note that an <literal>AS</> clause is required when <command>VALUES</>
   is used in a <literal>FROM</> clause, just as is true for
   <command>SELECT</>.  It is not required that the <literal>AS</> clause
   specify names for all the columns, but it's good practice to do so.
   (The default column names for <command>VALUES</> are <literal>column1</>,
   <literal>column2</>, etc in <productname>PostgreSQL</productname>, but
   these names might be different in other database systems.) 
-->
当<command>VALUES</>用于<literal>FROM</>子句中的时候，必须使用<literal>AS</>子句，
这与用于<command>SELECT</>时一样。并不要求<literal>AS</>子句为每个字段都指定一个别名，
但是这样做是一个好习惯。<productname>PostgreSQL</productname>中<command>VALUES</>
缺省的字段名是<literal>column1</>, <literal>column2</>等等，
但这些缺省的名字并不一定与其他数据库系统相同。
  </para>
  <!--
<para>
   When <command>VALUES</> is used in <command>INSERT</>, the values are all
   automatically coerced to the data type of the corresponding destination
   column.  When it's used in other contexts, it might be necessary to specify
   the correct data type.  If the entries are all quoted literal constants,
   coercing the first is sufficient to determine the assumed type for all:

<programlisting>
SELECT * FROM machines
WHERE ip_address IN (VALUES('192.168.0.1'::inet), ('192.168.0.10'), ('192.168.1.43'));
</programlisting></para>
-->
<para>
当<command>VALUES</>用于<command>INSERT</>的时候，所有的值都将按照目标字段自动做类型转换。
但是在其他场合就可能必须明确指定恰当的数据类型。如果所有的项都是引号包围的字面常量，
强制指定第一个类型就可以确定所有的类型：
<programlisting>
SELECT * FROM machines
WHERE ip_address IN (VALUES('192.168.0.1'::inet), ('192.168.0.10'), ('192.168.1.43'));
</programlisting>
</para>

  <tip>
   <!--
<para>
    For simple <literal>IN</> tests, it's better to rely on the
    list-of-scalars form of <literal>IN</> than to write a <command>VALUES</>
    query as shown above.  The list of scalars method requires less writing
    and is often more efficient.
   </para>
-->
<para>
对于简单的<literal>IN</>测试，更好的方法是依赖于<literal>IN</>的标量列表形式，
而不是使用上述<command>VALUES</>查询。标量列表的方法写的更少，而且通常也更有效。
</para>
  </tip>
 </refsect1>

 <refsect1>
  <!--
<title>Compatibility</title>
-->
<title>兼容性</title>

  <!--
<para><command>VALUES</command> conforms to the SQL standard.
   <literal>LIMIT</literal> and <literal>OFFSET</literal> are
   <productname>PostgreSQL</productname> extensions; see also
   under <xref linkend="sql-select">.
  </para>
-->
<para>
<command>VALUES</command>符合 SQL 标准，此外，<literal>LIMIT</literal>
和<literal>OFFSET</literal>是<productname>PostgreSQL</productname>扩展；
又见<xref linkend="sql-select">。
</para>
 </refsect1>

 <refsect1>
  <!--
<title>See Also</title>
-->
<title>又见</title>

  <simplelist type="inline">
   <member><xref linkend="sql-insert"></member>
   <member><xref linkend="sql-select"></member>
  </simplelist>
 </refsect1>
</refentry>
