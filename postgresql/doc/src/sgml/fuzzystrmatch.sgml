<!-- doc/src/sgml/fuzzystrmatch.sgml -->

<sect1 id="fuzzystrmatch" xreflabel="fuzzystrmatch">
 <title>fuzzystrmatch</title>

 <indexterm zone="fuzzystrmatch">
  <primary>fuzzystrmatch</primary>
 </indexterm>

 <!--
<para>
  The <filename>fuzzystrmatch</> module provides several
  functions to determine similarities and distance between strings.
 </para>
-->
<para>
<filename>fuzzystrmatch</>模块提供几个函数判断字符串之间的相似点和距离。
</para>

 <caution>
  <!--
<para>
   At present, the <function>soundex</>, <function>metaphone</>,
   <function>dmetaphone</>, and <function>dmetaphone_alt</> functions do
   not work well with multibyte encodings (such as UTF-8).
  </para>
-->
<para>
目前，<function>soundex</>, <function>metaphone</>, <function>dmetaphone</>, 和 
<function>dmetaphone_alt</>不适合多字节编码（如UTF-8）。
</para>
 </caution>

 <sect2>
  <title>Soundex</title>

  <!--
<para>
   The Soundex system is a method of matching similar-sounding names
   by converting them to the same code.  It was initially used by the
   United States Census in 1880, 1900, and 1910.  Note that Soundex
   is not very useful for non-English names.
  </para>
-->
<para>
Soundex 系统是一种通过转换为相同代码匹配相似发音名字的方法。
最初是在1880、1900和1910年用于美国的人口普查。注意Soundex对于非英文的名字不是很有帮助。
</para>

  <!--
<para>
   The <filename>fuzzystrmatch</> module provides two functions
   for working with Soundex codes:
  </para>
-->
<para>
<filename>fuzzystrmatch</>模块提供和Soundex代码一起使用的两个函数:
</para>

  <indexterm>
   <primary>soundex</primary>
  </indexterm>

  <indexterm>
   <!-- 
   <primary>difference</primary> 
   -->
   <primary>不同</primary>
  </indexterm>

<synopsis>
soundex(text) returns text
difference(text, text) returns int
</synopsis>

  <!--
<para>
   The <function>soundex</> function converts a string to its Soundex code.
   The <function>difference</> function converts two strings to their Soundex
   codes and then reports the number of matching code positions.  Since
   Soundex codes have four characters, the result ranges from zero to four,
   with zero being no match and four being an exact match.  (Thus, the
   function is misnamed &mdash; <function>similarity</> would have been
   a better name.)
  </para>
-->
<para>
<function>soundex</>函数转换字符串为Soundex代码。<function>difference</>
函数转换两个字符串为它们的Soundex代码然后报告匹配代码位置的数量。
因为Soundex代码有四个字符，结果范围从零到四，零表示没有匹配而四表示完全匹配。
（因此，这个函数取名不当，<function>similarity</>本是一个好名字。）
</para>

  <!--
<para>
   Here are some usage examples:
  </para>
-->
<para>
这里是一些有用的示例：
</para>

<programlisting>
SELECT soundex('hello world!');

SELECT soundex('Anne'), soundex('Ann'), difference('Anne', 'Ann');
SELECT soundex('Anne'), soundex('Andrew'), difference('Anne', 'Andrew');
SELECT soundex('Anne'), soundex('Margaret'), difference('Anne', 'Margaret');

CREATE TABLE s (nm text);

INSERT INTO s VALUES ('john');
INSERT INTO s VALUES ('joan');
INSERT INTO s VALUES ('wobbly');
INSERT INTO s VALUES ('jack');

SELECT * FROM s WHERE soundex(nm) = soundex('john');

SELECT * FROM s WHERE difference(s.nm, 'john') &gt; 2;
</programlisting>
 </sect2>

 <sect2>
  <title>Levenshtein</title>

  <!--
<para>
   This function calculates the Levenshtein distance between two strings:
  </para>
-->
<para>
这个函数计算两个字符串之间的Levenshtein距离：
</para>

  <indexterm>
   <primary>levenshtein</primary>
  </indexterm>

  <indexterm>
   <primary>levenshtein_less_equal</primary>
  </indexterm>

<synopsis>
levenshtein(text source, text target, int ins_cost, int del_cost, int sub_cost) returns int
levenshtein(text source, text target) returns int
levenshtein_less_equal(text source, text target, int ins_cost, int del_cost, int sub_cost, int max_d) returns int
levenshtein_less_equal(text source, text target, int max_d) returns int
</synopsis>

  <!--
<para>
   Both <literal>source</literal> and <literal>target</literal> can be any
   non-null string, with a maximum of 255 bytes.  The cost parameters
   specify how much to charge for a character insertion, deletion, or
   substitution, respectively.  You can omit the cost parameters, as in
   the second version of the function; in that case they all default to 1.
   <literal>levenshtein_less_equal</literal> is accelerated version of
   levenshtein function for low values of distance. If actual distance
   is less or equal then max_d, then <literal>levenshtein_less_equal</literal>
   returns accurate value of it. Otherwise this function returns value
   which is greater than max_d.
  </para>
-->
<para>
<literal>source</literal>和<literal>target</literal>都可以是任意非空字符串，最多为255字节。
cost参数声明对于一个字符插入、删除或替换分别改变多少。可以省略cost参数，
就像该函数的第二种语法；这种情况下，他们缺省都是1。<literal>levenshtein_less_equal</literal>
对于低距离是levenshtein函数的快速版本。如果实际距离小于或等于max_d，
那么<literal>levenshtein_less_equal</literal>返回实际值。否则这个函数返回大于max_d的值。
</para>

  <!--
<para>
   Examples:
  </para>
-->
<para>
示例：
</para>

<screen>
test=# SELECT levenshtein('GUMBO', 'GAMBOL');
 levenshtein
-------------
           2
(1 row)

test=# SELECT levenshtein('GUMBO', 'GAMBOL', 2,1,1);
 levenshtein
-------------
           3
(1 row)

test=# SELECT levenshtein_less_equal('extensive', 'exhaustive',2);
 levenshtein_less_equal
------------------------
                      3
(1 row)

test=# SELECT levenshtein_less_equal('extensive', 'exhaustive',4);
 levenshtein_less_equal
------------------------
                      4
(1 row)
</screen>
 </sect2>

 <sect2>
  <title>Metaphone</title>

  <!--
<para>
   Metaphone, like Soundex, is based on the idea of constructing a
   representative code for an input string.  Two strings are then
   deemed similar if they have the same codes.
  </para>
-->
<para>
Metaphone，类似于Soundex，基于为输入字符串构造一个典型的代码的想法。
如果两个字符串有相同的代码那么认为它们相似。
</para>

  <!--
<para>
   This function calculates the metaphone code of an input string:
  </para>
-->
<para>
这个函数计算输入字符串的metaphone代码：
</para>

  <indexterm>
   <primary>metaphone</primary>
  </indexterm>

<synopsis>
metaphone(text source, int max_output_length) returns text
</synopsis>

  <!--
<para>
   <literal>source</literal> has to be a non-null string with a maximum of
   255 characters.  <literal>max_output_length</literal> sets the maximum
   length of the output metaphone code; if longer, the output is truncated
   to this length.
  </para>
-->
<para>
<literal>source</literal>必须为一个非空字符串，最多为255个字符。
<literal>max_output_length</literal>设置输出metaphone代码的最大长度；
如果实际比这长，那么输出截断为这个长度。
</para>

  <!--
<para>
   Example:
  </para>
-->
<para>
示例：
</para>

<screen>
test=# SELECT metaphone('GUMBO', 4);
 metaphone
-----------
 KM
(1 row)
</screen>
 </sect2>

 <sect2>
  <title>Double Metaphone</title>

  <!--
<para>
   The Double Metaphone system computes two <quote>sounds like</> strings
   for a given input string &mdash; a <quote>primary</> and an
   <quote>alternate</>.  In most cases they are the same, but for non-English
   names especially they can be a bit different, depending on pronunciation.
   These functions compute the primary and alternate codes:
  </para>
-->
<para>
Double Metaphone系统为一个给定的输入字符串计算两个<quote>听起来像</>的字符串&mdash;
一个<quote>原先的</>和一个<quote>替换的</>。大多数情况下它们相同，
但是取决于发音它们对于非英文名有一点不同。这些函数计算原先的和替换的代码：
</para>

  <indexterm>
   <primary>dmetaphone</primary>
  </indexterm>

  <indexterm>
   <primary>dmetaphone_alt</primary>
  </indexterm>

<synopsis>
dmetaphone(text source) returns text
dmetaphone_alt(text source) returns text
</synopsis>

  <!--
<para>
   There is no length limit on the input strings.
  </para>
-->
<para>
这里对于输入字符串没有长度限制。
</para>

  <!--
<para>
   Example:
  </para>
-->
<para>
示例：
</para>

<screen>
test=# select dmetaphone('gumbo');
 dmetaphone
------------
 KMP
(1 row)
</screen>
 </sect2>

</sect1>
