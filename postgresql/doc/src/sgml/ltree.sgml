<!-- doc/src/sgml/ltree.sgml -->

<sect1 id="ltree" xreflabel="ltree">
 <title>ltree</title>

 <indexterm zone="ltree">
  <primary>ltree</primary>
 </indexterm>

 <!--
<para>
  This module implements a data type <type>ltree</> for representing
  labels of data stored in a hierarchical tree-like structure.
  Extensive facilities for searching through label trees are provided.
 </para>
-->
<para>
这个模块实现了数据类型<type>ltree</>，该类型表示存储在分层的树形结构里的数据的标签。
提供大量的工具搜索标签树。
</para>

 <sect2>
  <!--
  <title>Definitions</title>
  -->
  <title>定义</title>

  <!--
<para>
   A <firstterm>label</firstterm> is a sequence of alphanumeric characters
   and underscores (for example, in C locale the characters
   <literal>A-Za-z0-9_</> are allowed).  Labels must be less than 256 bytes
   long.
  </para>
-->
<para>
<firstterm>label</firstterm>是一个字母数字字符和下划线的序列（例如，在C语言环境，
字符<literal>A-Za-z0-9_</>是允许的）。标签长度必须少于256字节。
</para>

  <!--
<para>
   Examples: <literal>42</>, <literal>Personal_Services</>
  </para>
-->
<para>
示例：<literal>42</>, <literal>Personal_Services</>
</para>

  <!--
<para>
   A <firstterm>label path</firstterm> is a sequence of zero or more
   labels separated by dots, for example <literal>L1.L2.L3</>, representing
   a path from the root of a hierarchical tree to a particular node.  The
   length of a label path must be less than 65Kb, but keeping it under 2Kb is
   preferable.  In practice this is not a major limitation; for example,
   the longest label path in the DMOZ catalog (<ulink
   url="http://www.dmoz.org"></ulink>) is about 240 bytes.
  </para>
-->
<para>
<firstterm>label path</firstterm>是零个或多个由点分隔的标签序列，例如<literal>L1.L2.L3</>，
表示由树状结构的根节点到具体节点的路径。标签路径的长度必须少于65Kb，
但是保持在2Kb以下是最好的。实际上，这不是主要限制；例如，
在DMOZ目录中的最长标签路径(<ulink url="http://www.dmoz.org"></ulink>)大约240字节。
</para>

  <!--
<para>
   Example: <literal>Top.Countries.Europe.Russia</literal>
  </para>
-->
<para>
示例：<literal>Top.Countries.Europe.Russia</literal>
</para>

  <!--
<para>
   The <filename>ltree</> module provides several data types:
  </para>
-->
<para>
<filename>ltree</>模块提供几种数据类型：
</para>

  <itemizedlist>
   <listitem>
    <!--
<para>
     <type>ltree</type> stores a label path.
    </para>
-->
<para>
<type>ltree</type>存储标签路径。
</para>
   </listitem>

   <listitem>
    
<para>
<!--
     <type>lquery</type> represents a regular-expression-like pattern
     for matching <type>ltree</> values.  A simple word matches that
     label within a path.  A star symbol (<literal>*</>) matches zero
     or more labels.  For example:
-->
<type>lquery</type>表示一个正规表达式类似的模式以匹配<type>ltree</>值。
在一个路径中一个单词匹配那个标签。星号(<literal>*</>)匹配零个或多个标签。例如：
<!-- 
<synopsis>
foo         <lineannotation>Match the exact label path <literal>foo</></lineannotation>
*.foo.*     <lineannotation>Match any label path containing the label <literal>foo</></lineannotation>
*.foo       <lineannotation>Match any label path whose last label is <literal>foo</></lineannotation>
</synopsis> 
-->
<synopsis>
foo         <lineannotation>准确匹配标签路径 <literal>foo</></lineannotation>
*.foo.*     <lineannotation>匹配任何包含标签 <literal>foo</> 的标签路径</lineannotation>
*.foo       <lineannotation>匹配任何以 <literal>foo</> 结束的标签路径</lineannotation>
</synopsis>
    </para>

    <!--
<para>
     Star symbols can also be quantified to restrict how many labels
     they can match:
<synopsis>
*{<replaceable>n</>}        <lineannotation>Match exactly <replaceable>n</> labels</lineannotation>
*{<replaceable>n</>,}       <lineannotation>Match at least <replaceable>n</> labels</lineannotation>
*{<replaceable>n</>,<replaceable>m</>}      <lineannotation>Match at least <replaceable>n</> but not more than <replaceable>m</> labels</lineannotation>
*{,<replaceable>m</>}       <lineannotation>Match at most <replaceable>m</> labels &mdash; same as </lineannotation> *{0,<replaceable>m</>}
</synopsis>
    </para>
-->
<para>
可以量化星号来限制可以匹配多少个标签：
<synopsis>
*{<replaceable>n</>}        <lineannotation>准确匹配 <replaceable>n</> 个标签</lineannotation>
*{<replaceable>n</>,}       <lineannotation>至少匹配 <replaceable>n</> 个标签</lineannotation>
*{<replaceable>n</>,<replaceable>m</>}      <lineannotation>至少匹配 <replaceable>n</> 个但不超过 <replaceable>m</> 个标签</lineannotation>
*{,<replaceable>m</>}       <lineannotation>最多匹配 <replaceable>m</> 个标签 &mdash; 和 </lineannotation> *{0,<replaceable>m</> 相同}
</synopsis>
</para>

    <!--
<para>
     There are several modifiers that can be put at the end of a non-star
     label in <type>lquery</> to make it match more than just the exact match:
<synopsis>
@           <lineannotation>Match case-insensitively, for example <literal>a@</> matches <literal>A</></lineannotation>
*           <lineannotation>Match any label with this prefix, for example <literal>foo*</> matches <literal>foobar</></lineannotation>
%           <lineannotation>Match initial underscore-separated words</lineannotation>
</synopsis>
     The behavior of <literal>%</> is a bit complicated.  It tries to match
     words rather than the entire label.  For example
     <literal>foo_bar%</> matches <literal>foo_bar_baz</> but not
     <literal>foo_barbaz</>.  If combined with <literal>*</>, prefix
     matching applies to each word separately, for example
     <literal>foo_bar%*</> matches <literal>foo1_bar2_baz</> but
     not <literal>foo1_br2_baz</>.
    </para>
-->
<para>
有几个修饰符可以放在<type>lquery</>中非星号标签的后面，使其不只是匹配正好的那个：
<synopsis>
@           <lineannotation>匹配大小写无关，例如 <literal>a@</> 匹配 <literal>A</></lineannotation>
*           <lineannotation>匹配任何带有这个前缀的标签，例如 <literal>foo*</> 匹配 <literal>foobar</></lineannotation>
%           <lineannotation>匹配字首下划线分开的单词</lineannotation>
</synopsis>
<literal>%</>的行为稍微有点复杂。它试图匹配单词而不是整个标签。例如<literal>foo_bar%</> 匹配 
<literal>foo_bar_baz</>而不是<literal>foo_barbaz</>。如果与<literal>*</>结合，
前缀匹配分别应用到每个单词，例如<literal>foo_bar%*</>匹配<literal>foo1_bar2_baz</>
而不是not <literal>foo1_br2_baz</>。
</para>

    <!--
<para>
     Also, you can write several possibly-modified labels separated with
     <literal>|</> (OR) to match any of those labels, and you can put
     <literal>!</> (NOT) at the start to match any label that doesn't
     match any of the alternatives.
    </para>
-->
<para>
还有，可以写几个由<literal>|</> (OR)分开的标签以匹配任意这些标签，
并且可以在开始放置<literal>!</> (NOT)以匹配任何不匹配任何可选标签的标签。
</para>

    <!--
<para>
     Here's an annotated example of <type>lquery</type>:
<programlisting>
Top.*{0,2}.sport*@.!football|tennis.Russ*|Spain
a.  b.     c.      d.               e.
</programlisting>
     This query will match any label path that:
    </para>
-->
<para>
这是一个带有评注的<type>lquery</type>的例子：
<programlisting>
Top.*{0,2}.sport*@.!football|tennis.Russ*|Spain
a.  b.     c.      d.               e.
</programlisting>
这个查询将匹配任何标签路径：
</para>
    <orderedlist numeration="loweralpha">
     <listitem>
      <!--
<para>
       begins with the label <literal>Top</literal>
      </para>
-->
<para>
以标签<literal>Top</literal>开始
</para>
     </listitem>
     <listitem>
      <!--
<para>
       and next has zero to two labels before
      </para>
-->
<para>
然后有0到2个标签
</para>
     </listitem>
     <listitem>
      <!--
<para>
       a label beginning with the case-insensitive prefix <literal>sport</literal>
      </para>
-->
<para>
然后是一个带有大小写不敏感前缀<literal>sport</literal>的标签
</para>
     </listitem>
     <listitem>
      <!--
<para>
       then a label not matching <literal>football</literal> nor
       <literal>tennis</literal>
      </para>
-->
<para>
然后是一个既不匹配<literal>football</literal>也不匹配<literal>tennis</literal>的标签
</para>
     </listitem>
     <listitem>
      <!--
<para>
       and then ends with a label beginning with <literal>Russ</literal> or
       exactly matching <literal>Spain</literal>.
      </para>
-->
<para>
然后以一个带有<literal>Russ</literal>或准确匹配<literal>Spain</literal>开头的标签作为结束。
</para>
     </listitem>
    </orderedlist>
   </listitem>

   <listitem>
    <!--
<para><type>ltxtquery</type> represents a full-text-search-like
    pattern for matching <type>ltree</> values.  An
    <type>ltxtquery</type> value contains words, possibly with the
    modifiers <literal>@</>, <literal>*</>, <literal>%</> at the end;
    the modifiers have the same meanings as in <type>lquery</>.
    Words can be combined with <literal>&amp;</> (AND),
    <literal>|</> (OR), <literal>!</> (NOT), and parentheses.
    The key difference from
    <type>lquery</> is that <type>ltxtquery</type> matches words without
    regard to their position in the label path.
    </para>
-->
<para>
<type>ltxtquery</type>表示一个匹配<type>ltree</>值的全文本搜索风格模式。
<type>ltxtquery</type>值包含单词，可能在结尾带有修饰词<literal>@</>, <literal>*</>, <literal>%</>，
这些修饰词的含义和在<type>lquery</>中的含义相同。单词可以与<literal>&amp;</> (AND),
<literal>|</> (OR), <literal>!</> (NOT) 和圆括号结合。与<type>lquery</>
主要的不同是<type>ltxtquery</type>匹配单词时不考虑单词在标签路径中的位置。
</para>

    <!--
<para>
     Here's an example <type>ltxtquery</type>:
<programlisting>
Europe &amp; Russia*@ &amp; !Transportation
</programlisting>
     This will match paths that contain the label <literal>Europe</literal> and
     any label beginning with <literal>Russia</literal> (case-insensitive),
     but not paths containing the label <literal>Transportation</literal>.
     The location of these words within the path is not important.
     Also, when <literal>%</> is used, the word can be matched to any
     underscore-separated word within a label, regardless of position.
    </para>
-->
<para>
这是一个<type>ltxtquery</type>的例子：
<programlisting>
Europe &amp; Russia*@ &amp; !Transportation
</programlisting>
这将匹配包含<literal>Europe</literal>标签和以<literal>Russia</literal>
（大小写不敏感）开始的标签的路径，但是不匹配包含<literal>Transportation</literal>
标签的路径。这些单词在路径中的位置并不重要。还有，当使用了<literal>%</>时，
该单词能匹配标签中任何用下划线分隔单词，不管位置在哪。
</para>
   </listitem>

  </itemizedlist>

  <!--
<para>
   Note: <type>ltxtquery</> allows whitespace between symbols, but
   <type>ltree</> and <type>lquery</> do not.
  </para>
-->
<para>
注意：<type>ltxtquery</>允许符号之间有空格，但是<type>ltree</> 和 
<type>lquery</>不允许这样做。
</para>
 </sect2>

 <sect2>
  <!--
  <title>Operators and Functions</title>
  -->
  <title>操作符和函数</title>

  <!--
<para>
   Type <type>ltree</> has the usual comparison operators
   <literal>=</>, <literal>&lt;&gt;</literal>,
   <literal>&lt;</>, <literal>&gt;</>, <literal>&lt;=</>, <literal>&gt;=</>.
   Comparison sorts in the order of a tree traversal, with the children
   of a node sorted by label text.  In addition, the specialized
   operators shown in <xref linkend="ltree-op-table"> are available.
  </para>
-->
<para>
类型<type>ltree</>有平常的比较操作符<literal>=</>, <literal>&lt;&gt;</literal>,
<literal>&lt;</>, <literal>&gt;</>, <literal>&lt;=</>, <literal>&gt;=</>。
比较的优先级以树遍历的顺序，节点的子节点以标签文本排序。另外，
在<xref linkend="ltree-op-table">中显示的专业的操作符是可用的。
</para>

  <table id="ltree-op-table">
   <!--
   <title><type>ltree</> Operators</title>
   -->
   <title><type>ltree</> 操作符</title>

   <tgroup cols="3">
    <thead>
     <row>
      <!--
  <entry>Operator</entry>
      <entry>Returns</entry>
      <entry>Description</entry>
  -->
  <entry>操作符</entry>
      <entry>返回</entry>
      <entry>描述</entry>
     </row>
    </thead>

    <tbody>
     <row>
      <entry><type>ltree</> <literal>@&gt;</> <type>ltree</></entry>
      <entry><type>boolean</type></entry>
      <!--
  <entry>is left argument an ancestor of right (or equal)?</entry>
  -->
  <entry>左边参数是右边参数的上代 (或相等)?</entry>
     </row>

     <row>
      <entry><type>ltree</> <literal>&lt;@</> <type>ltree</></entry>
      <entry><type>boolean</type></entry>
      <!--
  <entry>is left argument a descendant of right (or equal)?</entry>
  -->
  <entry>左边参数是右边参数的后代 (或相等)?</entry>
     </row>

     <row>
      <entry><type>ltree</> <literal>~</> <type>lquery</></entry>
      <entry><type>boolean</type></entry>
      <!--
  <entry>does <type>ltree</> match <type>lquery</>?</entry>
  -->
  <entry><type>ltree</> 匹配 <type>lquery</>?</entry>
     </row>

     <row>
      <entry><type>lquery</> <literal>~</> <type>ltree</></entry>
      <entry><type>boolean</type></entry>
      <!--
  <entry>does <type>ltree</> match <type>lquery</>?</entry>
  -->
  <entry><type>ltree</> 匹配 <type>lquery</>?</entry>
     </row>

     <row>
      <entry><type>ltree</> <literal>?</> <type>lquery[]</></entry>
      <entry><type>boolean</type></entry>
      <!--
  <entry>does <type>ltree</> match any <type>lquery</> in array?</entry>
  -->
  <entry><type>ltree</> 匹配数组中的任意 <type>lquery</>?</entry>
     </row>

     <row>
      <entry><type>lquery[]</> <literal>?</> <type>ltree</></entry>
      <entry><type>boolean</type></entry>
      <!--
  <entry>does <type>ltree</> match any <type>lquery</> in array?</entry>
  -->
  <entry><type>ltree</> 匹配数组中的任意 <type>lquery</>?</entry>
     </row>

     <row>
      <entry><type>ltree</> <literal>@</> <type>ltxtquery</></entry>
      <entry><type>boolean</type></entry>
      <!--
  <entry>does <type>ltree</> match <type>ltxtquery</>?</entry>
  -->
  <entry><type>ltree</> 匹配 <type>ltxtquery</>?</entry>
     </row>

     <row>
      <entry><type>ltxtquery</> <literal>@</> <type>ltree</></entry>
      <entry><type>boolean</type></entry>
      <!--
  <entry>does <type>ltree</> match <type>ltxtquery</>?</entry>
  -->
  <entry><type>ltree</> 匹配 <type>ltxtquery</>?</entry>
     </row>

     <row>
      <entry><type>ltree</> <literal>||</> <type>ltree</></entry>
      <entry><type>ltree</type></entry>
      <!--
  <entry>concatenate <type>ltree</> paths</entry>
  -->
  <entry>连接 <type>ltree</> 路径</entry>
     </row>

     <row>
      <entry><type>ltree</> <literal>||</> <type>text</></entry>
      <entry><type>ltree</type></entry>
      <!--
  <entry>convert text to <type>ltree</> and concatenate</entry>
  -->
  <entry>将文本转化成 <type>ltree</> 并连接</entry>
     </row>

     <row>
      <entry><type>text</> <literal>||</> <type>ltree</></entry>
      <entry><type>ltree</type></entry>
      <!--
  <entry>convert text to <type>ltree</> and concatenate</entry>
  -->
  <entry>将文本转化成 <type>ltree</> 并连接</entry>
     </row>

     <row>
      <entry><type>ltree[]</> <literal>@&gt;</> <type>ltree</></entry>
      <entry><type>boolean</type></entry>
      <!--
  <entry>does array contain an ancestor of <type>ltree</>?</entry>
  -->
  <entry>数组包含 <type>ltree</> 的祖先?</entry>
     </row>

     <row>
      <entry><type>ltree</> <literal>&lt;@</> <type>ltree[]</></entry>
      <entry><type>boolean</type></entry>
      <!--
  <entry>does array contain an ancestor of <type>ltree</>?</entry>
  -->
  <entry>数组包含 <type>ltree</> 的祖先?</entry>
     </row>

     <row>
      <entry><type>ltree[]</> <literal>&lt;@</> <type>ltree</></entry>
      <entry><type>boolean</type></entry>
      <!--
  <entry>does array contain a descendant of <type>ltree</>?</entry>
  -->
  <entry>数组包含 <type>ltree</> 的后代?</entry>
     </row>

     <row>
      <entry><type>ltree</> <literal>@&gt;</> <type>ltree[]</></entry>
      <entry><type>boolean</type></entry>
      <!--
  <entry>does array contain a descendant of <type>ltree</>?</entry>
  -->
  <entry>数组包含 <type>ltree</> 的后代?</entry>
     </row>

     <row>
      <entry><type>ltree[]</> <literal>~</> <type>lquery</></entry>
      <entry><type>boolean</type></entry>
      <!--
  <entry>does array contain any path matching <type>lquery</>?</entry>
  -->
  <entry>数据包含任何匹配 <type>lquery</> 的路径?</entry>
     </row>

     <row>
      <entry><type>lquery</> <literal>~</> <type>ltree[]</></entry>
      <entry><type>boolean</type></entry>
      <!--
  <entry>does array contain any path matching <type>lquery</>?</entry>
  -->
  <entry>数据包含任何匹配 <type>lquery</> 的路径?</entry>
     </row>

     <row>
      <entry><type>ltree[]</> <literal>?</> <type>lquery[]</></entry>
      <entry><type>boolean</type></entry>
      <!-- 
  <entry>does <type>ltree</> array contain any path matching any <type>lquery</>?</entry>
  -->
  <entry><type>ltree</> 数组包含任意路径匹配任意 <type>lquery</>?</entry>
     </row>

     <row>
      <entry><type>lquery[]</> <literal>?</> <type>ltree[]</></entry>
      <entry><type>boolean</type></entry>
      <!--
  <entry>does <type>ltree</> array contain any path matching any <type>lquery</>?</entry>
  -->
  <entry><type>ltree</> 数组包含任意路径匹配任意 <type>lquery</>?</entry>
     </row>

     <row>
      <entry><type>ltree[]</> <literal>@</> <type>ltxtquery</></entry>
      <entry><type>boolean</type></entry>
      <!--
  <entry>does array contain any path matching <type>ltxtquery</>?</entry>
  -->
  <entry>数据包含任意路径匹配 <type>ltxtquery</>?</entry>
     </row>

     <row>
      <entry><type>ltxtquery</> <literal>@</> <type>ltree[]</></entry>
      <entry><type>boolean</type></entry>
      <!--
  <entry>does array contain any path matching <type>ltxtquery</>?</entry>
  -->
  <entry>数组包含任意路径匹配 <type>ltxtquery</>?</entry>
     </row>

     <row>
      <entry><type>ltree[]</> <literal>?@&gt;</> <type>ltree</></entry>
      <entry><type>ltree</type></entry>
      <!--
  <entry>first array entry that is an ancestor of <type>ltree</>; NULL if none</entry>
  -->
  <entry>第一个数组条目是 <type>ltree</> 的祖先？; 如果不是则为 NULL</entry>
     </row>

     <row>
      <entry><type>ltree[]</> <literal>?&lt;@</> <type>ltree</></entry>
      <entry><type>ltree</type></entry>
      <!--
  <entry>first array entry that is a descendant of <type>ltree</>; NULL if none</entry>
  -->
  <entry>第一个数组条目是 <type>ltree</> 的后代？; 如果不是则为 NULL</entry>
     </row>

     <row>
      <entry><type>ltree[]</> <literal>?~</> <type>lquery</></entry>
      <entry><type>ltree</type></entry>
      <!--
  <entry>first array entry that matches <type>lquery</>; NULL if none</entry>
  -->
  <entry>第一个数组条目匹配 <type>lquery</> ？; 如果不是则为 NULL</entry>
     </row>

     <row>
      <entry><type>ltree[]</> <literal>?@</> <type>ltxtquery</></entry>
      <entry><type>ltree</type></entry>
      <!-- 
  <entry>first array entry that matches <type>ltxtquery</>; NULL if none</entry>
  -->
  <entry>第一个数组条目匹配 <type>ltxtquery</> ？; 如果不是则为 NULL</entry>
     </row>

    </tbody>
   </tgroup>
  </table>

  <!--
<para>
   The operators <literal>&lt;@</literal>, <literal>@&gt;</literal>,
   <literal>@</literal> and <literal>~</literal> have analogues
   <literal>^&lt;@</>, <literal>^@&gt;</>, <literal>^@</>,
   <literal>^~</literal>, which are the same except they do not use
   indexes.  These are useful only for testing purposes.
  </para>
-->
<para>
操作符 <literal>&lt;@</literal>, <literal>@&gt;</literal>,
   <literal>@</literal> 和 <literal>~</literal> 类似
   <literal>^&lt;@</>, <literal>^@&gt;</>, <literal>^@</>,
   <literal>^~</literal>，除了不用索引之外都相同。这些只是对于测试目的有用。
</para>

  <!--
<para>
   The available functions are shown in <xref linkend="ltree-func-table">.
  </para>
-->
<para>
可用的函数显示在 <xref linkend="ltree-func-table"> 中。
</para>

  <table id="ltree-func-table">
   <!--
   <title><type>ltree</> Functions</title>
   -->
   <title><type>ltree</> 函数</title>

   <tgroup cols="5">
    <thead>
     <row>
      <!--
  <entry>Function</entry>
      <entry>Return Type</entry>
      <entry>Description</entry>
      <entry>Example</entry>
      <entry>Result</entry>
  -->
  <entry>函数</entry>
      <entry>返回类型</entry>
      <entry>描述</entry>
      <entry>示例</entry>
      <entry>结果</entry>
     </row>
    </thead>

    <tbody>
     <row>
      <entry><function>subltree(ltree, int start, int end)</function><indexterm><primary>subltree</primary></indexterm></entry>
      <entry><type>ltree</type></entry>
      <!--
  <entry>subpath of <type>ltree</> from position <parameter>start</> to
       position <parameter>end</>-1 (counting from 0)</entry>
   -->
   <entry><type>ltree</>的子路径，从位置 <parameter>start</> 到位置 
   <parameter>end</>-1 (从0开始计算)</entry>
      <entry><literal>subltree('Top.Child1.Child2',1,2)</literal></entry>
      <entry><literal>Child1</literal></entry>
     </row>

     <row>
      <entry><function>subpath(ltree, int offset, int len)</function><indexterm><primary>subpath</primary></indexterm></entry>
      <entry><type>ltree</type></entry>
      <!--
  <entry>subpath of <type>ltree</> starting at position
       <parameter>offset</>, length <parameter>len</>.
       If <parameter>offset</> is negative, subpath starts that far from the
       end of the path.  If <parameter>len</> is negative, leaves that many
       labels off the end of the path.</entry>
   -->
   <entry><type>ltree</> 的子路径，从位置 <parameter>offset</> 开始，长度为 <parameter>len</>。
       如果 <parameter>offset</> 为负值，子路径从路径的结尾开始。如果 <parameter>len</> 是负值，
   那么距离路径的结尾多少个标签。</entry>
      <entry><literal>subpath('Top.Child1.Child2',0,2)</literal></entry>
      <entry><literal>Top.Child1</literal></entry>
     </row>

     <row>
      <entry><function>subpath(ltree, int offset)</function></entry>
      <entry><type>ltree</type></entry>
      <!-- 
  <entry>subpath of <type>ltree</> starting at position
       <parameter>offset</>, extending to end of path.
       If <parameter>offset</> is negative, subpath starts that far from the
       end of the path.</entry>
   -->
   <entry><type>ltree</> 的子路径，从位置 <parameter>offset</> 开始，一直到路径的结束。
       如果 <parameter>offset</> 为负值，那么子路径从路径的结尾开始。</entry>
      <entry><literal>subpath('Top.Child1.Child2',1)</literal></entry>
      <entry><literal>Child1.Child2</literal></entry>
     </row>

     <row>
      <entry><function>nlevel(ltree)</function><indexterm><primary>nlevel</primary></indexterm></entry>
      <entry><type>integer</type></entry>
      <!--
  <entry>number of labels in path</entry>
  -->
  <entry>路径中的标签的个数</entry>
      <entry><literal>nlevel('Top.Child1.Child2')</literal></entry>
      <entry><literal>3</literal></entry>
     </row>

     <row>
      <entry><function>index(ltree a, ltree b)</function><indexterm><primary>index</primary></indexterm></entry>
      <entry><type>integer</type></entry>
      <!--
  <entry>position of first occurrence of <parameter>b</> in
       <parameter>a</>; -1 if not found</entry>
   -->
   <entry><parameter>b</> 在 <parameter>a</> 中第一次出现的位置；如果没有发现则为 -1</entry>
      <entry><literal>index('0.1.2.3.5.4.5.6.8.5.6.8','5.6')</literal></entry>
      <entry><literal>6</literal></entry>
     </row>

     <row>
      <entry><function>index(ltree a, ltree b, int offset)</function></entry>
      <entry><type>integer</type></entry>
      <!--
  <entry>position of first occurrence of <parameter>b</> in
       <parameter>a</>, searching starting at <parameter>offset</>;
       negative <parameter>offset</> means start <parameter>-offset</>
       labels from the end of the path</entry>
   -->
   <entry><parameter>b</> 在 <parameter>a</> 中第一次出现的位置，从 <parameter>offset</>
   开始搜索；负的 <parameter>offset</> 意味从路径结尾开始 <parameter>-offset</> 个标签</entry>
      <entry><literal>index('0.1.2.3.5.4.5.6.8.5.6.8','5.6',-4)</literal></entry>
      <entry><literal>9</literal></entry>
     </row>

     <row>
      <entry><function>text2ltree(text)</function><indexterm><primary>text2ltree</primary></indexterm></entry>
      <entry><type>ltree</type></entry>
      <!--
  <entry>cast <type>text</> to <type>ltree</></entry>
  -->
  <entry>将 <type>text</> 转换为 <type>ltree</></entry>
      <entry><literal></literal></entry>
      <entry><literal></literal></entry>
     </row>

     <row>
      <entry><function>ltree2text(ltree)</function><indexterm><primary>ltree2text</primary></indexterm></entry>
      <entry><type>text</type></entry>
      <!--
  <entry>cast <type>ltree</> to <type>text</></entry>
  -->
  <entry>将 <type>ltree</> 转换为 <type>text</></entry>
      <entry><literal></literal></entry>
      <entry><literal></literal></entry>
     </row>

     <row>
      <entry><function>lca(ltree, ltree, ...)</function><indexterm><primary>lca</primary></indexterm></entry>
      <entry><type>ltree</type></entry>
      <!--
  <entry>lowest common ancestor, i.e., longest common prefix of paths
       (up to 8 arguments supported)</entry>
   -->
   <entry>最低的公共祖先，也就是，路径的最长公共前缀（支持多达 8 个参数）</entry>
      <entry><literal>lca('1.2.2.3','1.2.3.4.5.6')</literal></entry>
      <entry><literal>1.2</literal></entry>
     </row>

     <row>
      <entry><function>lca(ltree[])</function></entry>
      <entry><type>ltree</type></entry>
      <!--
  <entry>lowest common ancestor, i.e., longest common prefix of paths</entry>
  -->
  <entry>最低的公共祖先，也就是，路径的最长公共前缀</entry>
      <entry><literal>lca(array['1.2.2.3'::ltree,'1.2.3'])</literal></entry>
      <entry><literal>1.2</literal></entry>
     </row>

    </tbody>
   </tgroup>
  </table>
 </sect2>

 <sect2>
  <!--
  <title>Indexes</title>
  -->
  <title>索引</title>
  <!--
<para>
   <filename>ltree</> supports several types of indexes that can speed
   up the indicated operators:
  </para>
-->
<para>
<filename>ltree</> 支持索引的几个类型，可以加速指出的操作符：
</para>

  <itemizedlist>
   <listitem>
    <!--
<para>
     B-tree index over <type>ltree</>:
     <literal>&lt;</>, <literal>&lt;=</>, <literal>=</>,
     <literal>&gt;=</>, <literal>&gt;</literal>
    </para>
-->
<para>
<type>ltree</> 上的 B-tree 索引：
<literal>&lt;</>, <literal>&lt;=</>, <literal>=</>,
<literal>&gt;=</>, <literal>&gt;</literal>
</para>
   </listitem>
   <listitem>
    <!--
<para>
     GiST index over <type>ltree</>:
     <literal>&lt;</>, <literal>&lt;=</>, <literal>=</>,
     <literal>&gt;=</>, <literal>&gt;</>,
     <literal>@&gt;</>, <literal>&lt;@</>,
     <literal>@</>, <literal>~</>, <literal>?</literal>
    </para>
-->
<para>
<type>ltree</> 上的 GiST 索引：
<literal>&lt;</>, <literal>&lt;=</>, <literal>=</>,
<literal>&gt;=</>, <literal>&gt;</>,
<literal>@&gt;</>, <literal>&lt;@</>,
<literal>@</>, <literal>~</>, <literal>?</literal>
</para>
    <!--
<para>
     Example of creating such an index:
    </para>
-->
<para>
创建这样一个索引的列子：
</para>
<programlisting>
CREATE INDEX path_gist_idx ON test USING GIST (path);
</programlisting>
   </listitem>
   <listitem>
    <!--
<para>
     GiST index over <type>ltree[]</>:
     <literal>ltree[] &lt;@ ltree</>, <literal>ltree @&gt; ltree[]</>,
     <literal>@</>, <literal>~</>, <literal>?</literal>
    </para>
-->
<para>
<type>ltree[]</> 上的 GiST 索引：
<literal>ltree[] &lt;@ ltree</>, <literal>ltree @&gt; ltree[]</>,
<literal>@</>, <literal>~</>, <literal>?</literal>
</para>
    <!--
<para>
     Example of creating such an index:
    </para>
-->
<para>
创建这样一个索引的例子：
</para>
<programlisting>
CREATE INDEX path_gist_idx ON test USING GIST (array_path);
</programlisting>
    <!--
<para>
     Note: This index type is lossy.
    </para>
-->
<para>
注意：这种索引类型损耗很大。
</para>
   </listitem>
  </itemizedlist>
 </sect2>

 <sect2>
  <!--
  <title>Example</title>
  -->
  <title>示例</title>

  <!--
<para>
   This example uses the following data (also available in file
   <filename>contrib/ltree/ltreetest.sql</> in the source distribution):
  </para>
-->
<para>
这个示例使用下列的数据（在源代码发布中的<filename>contrib/ltree/ltreetest.sql</>文件中也可用）：
</para>

<programlisting>
CREATE TABLE test (path ltree);
INSERT INTO test VALUES ('Top');
INSERT INTO test VALUES ('Top.Science');
INSERT INTO test VALUES ('Top.Science.Astronomy');
INSERT INTO test VALUES ('Top.Science.Astronomy.Astrophysics');
INSERT INTO test VALUES ('Top.Science.Astronomy.Cosmology');
INSERT INTO test VALUES ('Top.Hobbies');
INSERT INTO test VALUES ('Top.Hobbies.Amateurs_Astronomy');
INSERT INTO test VALUES ('Top.Collections');
INSERT INTO test VALUES ('Top.Collections.Pictures');
INSERT INTO test VALUES ('Top.Collections.Pictures.Astronomy');
INSERT INTO test VALUES ('Top.Collections.Pictures.Astronomy.Stars');
INSERT INTO test VALUES ('Top.Collections.Pictures.Astronomy.Galaxies');
INSERT INTO test VALUES ('Top.Collections.Pictures.Astronomy.Astronauts');
CREATE INDEX path_gist_idx ON test USING gist(path);
CREATE INDEX path_idx ON test USING btree(path);
</programlisting>

  <!--
<para>
   Now, we have a table <structname>test</> populated with data describing
   the hierarchy shown below:
  </para>
-->
<para>
现在，我们有一个表<structname>test</>，由下面显示的数据描述层级构成：
</para>

<literallayout class="monospaced">
                        Top
                     /   |  \
             Science Hobbies Collections
                 /       |              \
        Astronomy   Amateurs_Astronomy Pictures
           /  \                            |
Astrophysics  Cosmology                Astronomy
                                        /  |    \
                                 Galaxies Stars Astronauts
</literallayout>

<para>
   <!--
   We can do inheritance:
   -->
   现在我们可以做继承：
<screen>
ltreetest=&gt; SELECT path FROM test WHERE path &lt;@ 'Top.Science';
                path
------------------------------------
 Top.Science
 Top.Science.Astronomy
 Top.Science.Astronomy.Astrophysics
 Top.Science.Astronomy.Cosmology
(4 rows)
</screen>
  </para>

<para>
   <!--
   Here are some examples of path matching:
   -->
   这里是一些路径匹配的例子：
<screen>
ltreetest=&gt; SELECT path FROM test WHERE path ~ '*.Astronomy.*';
                     path
-----------------------------------------------
 Top.Science.Astronomy
 Top.Science.Astronomy.Astrophysics
 Top.Science.Astronomy.Cosmology
 Top.Collections.Pictures.Astronomy
 Top.Collections.Pictures.Astronomy.Stars
 Top.Collections.Pictures.Astronomy.Galaxies
 Top.Collections.Pictures.Astronomy.Astronauts
(7 rows)

ltreetest=&gt; SELECT path FROM test WHERE path ~ '*.!pictures@.*.Astronomy.*';
                path
------------------------------------
 Top.Science.Astronomy
 Top.Science.Astronomy.Astrophysics
 Top.Science.Astronomy.Cosmology
(3 rows)
</screen>
  </para>

<para>
   <!--
   Here are some examples of full text search:
   -->
   这里是一些全文本搜索的例子：
<screen>
ltreetest=&gt; SELECT path FROM test WHERE path @ 'Astro*% &amp; !pictures@';
                path
------------------------------------
 Top.Science.Astronomy
 Top.Science.Astronomy.Astrophysics
 Top.Science.Astronomy.Cosmology
 Top.Hobbies.Amateurs_Astronomy
(4 rows)

ltreetest=&gt; SELECT path FROM test WHERE path @ 'Astro* &amp; !pictures@';
                path
------------------------------------
 Top.Science.Astronomy
 Top.Science.Astronomy.Astrophysics
 Top.Science.Astronomy.Cosmology
(3 rows)
</screen>
  </para>

<para>
   <!--
   Path construction using functions:
   -->
   路径建造使用函数：
<screen>
ltreetest=&gt; SELECT subpath(path,0,2)||'Space'||subpath(path,2) FROM test WHERE path &lt;@ 'Top.Science.Astronomy';
                 ?column?
------------------------------------------
 Top.Science.Space.Astronomy
 Top.Science.Space.Astronomy.Astrophysics
 Top.Science.Space.Astronomy.Cosmology
(3 rows)
</screen>
  </para>

<para>
   <!--
   We could simplify this by creating a SQL function that inserts a label
   at a specified position in a path:
   -->
   我们可以通过创建一个SQL函数来简化，该函数在路径中的指定位置插入一个标签：
<screen>
CREATE FUNCTION ins_label(ltree, int, text) RETURNS ltree
    AS 'select subpath($1,0,$2) || $3 || subpath($1,$2);'
    LANGUAGE SQL IMMUTABLE;

ltreetest=&gt; SELECT ins_label(path,2,'Space') FROM test WHERE path &lt;@ 'Top.Science.Astronomy';
                ins_label
------------------------------------------
 Top.Science.Space.Astronomy
 Top.Science.Space.Astronomy.Astrophysics
 Top.Science.Space.Astronomy.Cosmology
(3 rows)
</screen>
  </para>
 </sect2>

 <sect2>
  <!--
  <title>Authors</title>
  -->
  <title>作者</title>

  <!--
<para>
   All work was done by Teodor Sigaev (<email>teodor@stack.net</email>) and
   Oleg Bartunov (<email>oleg@sai.msu.su</email>). See
   <ulink url="http://www.sai.msu.su/~megera/postgres/gist/"></ulink> for
   additional information. Authors would like to thank Eugeny Rodichev for
   helpful discussions. Comments and bug reports are welcome.
  </para>
-->
<para>
所有工作都是 Teodor Sigaev (<email>teodor@stack.net</email>) 和 
Oleg Bartunov (<email>oleg@sai.msu.su</email>)做的。参阅
<ulink url="http://www.sai.msu.su/~megera/postgres/gist/"></ulink>获取额外的信息。
作者感谢 Eugeny Rodichev 的有帮助的讨论。欢迎评论和报告bug。
</para>
 </sect2>

</sect1>
