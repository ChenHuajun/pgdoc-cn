<!-- doc/src/sgml/pgstatstatements.sgml -->

<sect1 id="pgstatstatements" xreflabel="pg_stat_statements">
 <title>pg_stat_statements</title>

 <indexterm zone="pgstatstatements">
  <primary>pg_stat_statements</primary>
 </indexterm>

 <!--
<para>
  The <filename>pg_stat_statements</filename> module provides a means for
  tracking execution statistics of all SQL statements executed by a server.
 </para>
-->
<para>
<filename>pg_stat_statements</filename>模块提供一种跟踪执行统计服务器执行的所有SQL语句的手段。
</para>

 <!--
<para>
  The module must be loaded by adding <literal>pg_stat_statements</> to
  <xref linkend="guc-shared-preload-libraries"> in
  <filename>postgresql.conf</>, because it requires additional shared memory.
  This means that a server restart is needed to add or remove the module.
 </para>
-->
<para>
该模块必须通过在<filename>postgresql.conf</>中添加<literal>pg_stat_statements</>
到<xref linkend="guc-shared-preload-libraries">来加载，因为它需要额外的共享内存。
这意味着添加或删除这个模块都需要重启服务器。
</para>

 <sect2>
  <!--
  <title>The <structname>pg_stat_statements</structname> View</title>
  -->
  <title><structname>pg_stat_statements</structname> 视图</title>

  <!--
<para>
   The statistics gathered by the module are made available via a system view
   named <structname>pg_stat_statements</>.  This view contains one row for
   each distinct query, database ID, and user ID (up to the maximum
   number of distinct statements that the module can track).  The columns
   of the view are shown in <xref linkend="pgstatstatements-columns">.
  </para>
-->
<para>
该模块聚集的统计通过一个名为<structname>pg_stat_statements</>的系统视图使其可用。
这个模块为每个不同的查询、数据库ID和用户ID（取决于该模块可以追踪的不同语句的最大值）
包含一行。视图的字段显示在<xref linkend="pgstatstatements-columns">中。
</para>

  <table id="pgstatstatements-columns">
   <!-- 
   <title><structname>pg_stat_statements</> Columns</title>
   -->
   <title><structname>pg_stat_statements</> 字段</title>

   <tgroup cols="4">
    <thead>
     <row>
      <!-- 
  <entry>Name</entry>
      <entry>Type</entry>
      <entry>References</entry>
      <entry>Description</entry>
  -->
  <entry>名字</entry>
      <entry>类型</entry>
      <entry>参考</entry>
      <entry>描述</entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry><structfield>userid</structfield></entry>
      <entry><type>oid</type></entry>
      <entry><literal><link linkend="catalog-pg-authid"><structname>pg_authid</structname></link>.oid</literal></entry>
      <!--
  <entry>OID of user who executed the statement</entry>
  -->
  <entry>执行该语句的用户的OID</entry>
     </row>

     <row>
      <entry><structfield>dbid</structfield></entry>
      <entry><type>oid</type></entry>
      <entry><literal><link linkend="catalog-pg-database"><structname>pg_database</structname></link>.oid</literal></entry>
      <!--
  <entry>OID of database in which the statement was executed</entry>
  -->
  <entry>执行该语句的数据库的OID</entry>
     </row>

    <row>
      <entry><structfield>query</structfield></entry>
      <entry><type>text</type></entry>
      <entry></entry>
      <!--
  <entry>Text of a representative statement (up to <xref linkend="guc-track-activity-query-size"> bytes)</entry>
  -->
  <entry>有代表性的语句的文本 (多达 <xref linkend="guc-track-activity-query-size"> 字节)</entry>
     </row>

     <row>
      <entry><structfield>calls</structfield></entry>
      <entry><type>bigint</type></entry>
      <entry></entry>
      <!--
  <entry>Number of times executed</entry>
  -->
  <entry>执行的次数</entry>
     </row>

     <row>
      <entry><structfield>total_time</structfield></entry>
      <entry><type>double precision</type></entry>
      <entry></entry>
      <!--
  <entry>Total time spent in the statement, in milliseconds</entry>
  -->
  <entry>该语句花费的总时间，以毫秒计</entry>
     </row>

     <row>
      <entry><structfield>rows</structfield></entry>
      <entry><type>bigint</type></entry>
      <entry></entry>
      <!--
  <entry>Total number of rows retrieved or affected by the statement</entry>
  -->
  <entry>该语句恢复或影响的行的总数</entry>
     </row>

     <row>
      <entry><structfield>shared_blks_hit</structfield></entry>
      <entry><type>bigint</type></entry>
      <entry></entry>
      <!--
  <entry>Total number of shared block cache hits by the statement</entry>
  -->
  <entry>该语句命中的共享块缓存的总数</entry>
     </row>

     <row>
      <entry><structfield>shared_blks_read</structfield></entry>
      <entry><type>bigint</type></entry>
      <entry></entry>
      <!--
  <entry>Total number of shared blocks read by the statement</entry>
  -->
  <entry>该语句读取的共享块的总数</entry>
     </row>

     <row>
      <entry><structfield>shared_blks_dirtied</structfield></entry>
      <entry><type>bigint</type></entry>
      <entry></entry>
      <!--
  <entry>Total number of shared blocks dirtied by the statement</entry>
  -->
  <entry>该语句弄脏的共享块的总数</entry>
     </row>

     <row>
      <entry><structfield>shared_blks_written</structfield></entry>
      <entry><type>bigint</type></entry>
      <entry></entry>
      <!-- 
  <entry>Total number of shared blocks written by the statement</entry>
  -->
  <entry>该语句写入的共享块的总数</entry>
     </row>

     <row>
      <entry><structfield>local_blks_hit</structfield></entry>
      <entry><type>bigint</type></entry>
      <entry></entry>
      <!--
  <entry>Total number of local block cache hits by the statement</entry>
  -->
  <entry>该语句命中的本地块缓存的总数</entry>
     </row>

     <row>
      <entry><structfield>local_blks_read</structfield></entry>
      <entry><type>bigint</type></entry>
      <entry></entry>
      <!--
  <entry>Total number of local blocks read by the statement</entry>
  -->
  <entry>该语句读取的本地块的总数</entry>
     </row>

     <row>
      <entry><structfield>local_blks_dirtied</structfield></entry>
      <entry><type>bigint</type></entry>
      <entry></entry>
      <!--
  <entry>Total number of local blocks dirtied by the statement</entry>
  -->
  <entry>该语句弄脏的本地块的总数</entry>
     </row>

     <row>
      <entry><structfield>local_blks_written</structfield></entry>
      <entry><type>bigint</type></entry>
      <entry></entry>
      <!--
  <entry>Total number of local blocks written by the statement</entry>
  -->
  <entry>该语句写入的本地块的总数</entry>
     </row>

     <row>
      <entry><structfield>temp_blks_read</structfield></entry>
      <entry><type>bigint</type></entry>
      <entry></entry>
      <!--
  <entry>Total number of temp blocks read by the statement</entry>
  -->
  <entry>该语句读取的临时块的总数</entry>
     </row>

     <row>
      <entry><structfield>temp_blks_written</structfield></entry>
      <entry><type>bigint</type></entry>
      <entry></entry>
      <!--
  <entry>Total number of temp blocks written by the statement</entry>
  -->
 <entry>该语句写入的临时块的总数</entry>
     </row>

     <row>
      <entry><structfield>blk_read_time</structfield></entry>
      <entry><type>double precision</type></entry>
      <entry></entry>
      <entry>
        <!--
Total time the statement spent reading blocks, in milliseconds
        (if <xref linkend="guc-track-io-timing"> is enabled, otherwise zero)
-->
该语句读取块花费的总时间，以毫秒计
（如果启用了<xref linkend="guc-track-io-timing">，否则为0）
      </entry>
     </row>

     <row>
      <entry><structfield>blk_write_time</structfield></entry>
      <entry><type>double precision</type></entry>
      <entry></entry>
      <entry>
        <!--
Total time the statement spent writing blocks, in milliseconds
        (if <xref linkend="guc-track-io-timing"> is enabled, otherwise zero)
-->
该语句写入块花费的总时间，以毫秒计
（如果启用了<xref linkend="guc-track-io-timing">，否则为0）
      </entry>
     </row>

    </tbody>
   </tgroup>
  </table>

  <!--
<para>
   This view, and the function <function>pg_stat_statements_reset</>,
   are available only in databases they have been specifically installed into
   by installing the <literal>pg_stat_statements</> extension.
   However, statistics are tracked across all databases of the server
   whenever the <filename>pg_stat_statements</filename> module is loaded
   into the server, regardless of presence of the view.
  </para>
-->
<para>
这个视图和函数<function>pg_stat_statements_reset</>，只有在通过安装
<literal>pg_stat_statements</>扩展特别安装到的数据库中可用。
不过，当<filename>pg_stat_statements</filename>模块加载到服务器中时，
统计跟踪该服务器中的所有数据库，不管该视图是否存在。
</para>

  <!--
<para>
   For security reasons, non-superusers are not allowed to see the text of
   queries executed by other users.  They can see the statistics, however,
   if the view has been installed in their database.
  </para>
-->
<para>
为了安全起见，不允许非超级用户查看其它用户执行的查询的文本。不过，
如果视图已经安装到他们的数据库中，那么他们可以看到统计。
</para>

  <!--
<para>
   Plannable queries (that is, <command>SELECT</>, <command>INSERT</>,
   <command>UPDATE</>, and <command>DELETE</>) are combined into a single
   <structname>pg_stat_statements</> entry whenever they have identical query
   structures according to an internal hash calculation.  Typically, two
   queries will be considered the same for this purpose if they are
   semantically equivalent except for the values of literal constants
   appearing in the query.  Utility commands (that is, all other commands)
   are compared strictly on the basis of their textual query strings, however.
  </para>
-->
<para>
可计划的查询（也就是，<command>SELECT</>, <command>INSERT</>,
   <command>UPDATE</>, 和 <command>DELETE</>）组合成为一个<structname>pg_stat_statements</>，
当它们根据一个内部哈希计算有相同的查询结构时。典型的，如果两个查询语义上相等，
除了查询中字面常量的值之外，我们认为这两个查询相同。工具命令（也就是，所有其他命令）
是直接基于它们的文本查询字符串比较的。
</para>

  <!--
<para>
   When a constant's value has been ignored for purposes of matching the
   query to other queries, the constant is replaced by <literal>?</literal>
   in the <structname>pg_stat_statements</> display.  The rest of the query
   text is that of the first query that had the particular hash value
   associated with the <structname>pg_stat_statements</> entry.
  </para>
-->
<para>
当一个常量的值为了匹配其他查询而忽略时，该常量在<structname>pg_stat_statements</>
的显示中被<literal>?</literal>替代。查询文本的剩余部分是第一个查询特定散列值与
<structname>pg_stat_statements</>相关条目。
</para>

  <!--
<para>
   In some cases, queries with visibly different texts might get merged into a
   single <structname>pg_stat_statements</> entry.  Normally this will happen
   only for semantically equivalent queries, but there is a small chance of
   hash collisions causing unrelated queries to be merged into one entry.
   (This cannot happen for queries belonging to different users or databases,
   however.)
  </para>
-->
<para>
在一些情况下，带有明显不同文本的查询可能合并到一个<structname>pg_stat_statements</>。
通常这只在语义相等的查询上发生，但是有很小的可能哈希冲突导致不相关的查询被合并到一个条目。
（不过，这对于属于不同用户或数据库的查询来说是不会发生的。）
</para>

  <!--
<para>
   Since the hash value is computed on the post-parse-analysis representation
   of the queries, the opposite is also possible: queries with identical texts
   might appear as separate entries, if they have different meanings as a
   result of factors such as different <varname>search_path</> settings.
  </para>
-->
<para>
因为哈希值是基于分析查询的表示法之后来计算的，相反的也是可能的：
带有相同文本的查询可能表现为单独的条目，如果它们因为一个因素的结果有不同的含义，
比如不同的<varname>search_path</>设置。
</para>
 </sect2>

 <sect2>
  <!--
  <title>Functions</title>
  -->
  <title>函数</title>

  <variablelist>
   <varlistentry>
   <indexterm>
    <primary>pg_stat_statements_reset</primary>
   </indexterm>

    <term>
     <function>pg_stat_statements_reset() returns void</function>
    </term>

    <listitem>
     <!--
<para>
      <function>pg_stat_statements_reset</function> discards all statistics
      gathered so far by <filename>pg_stat_statements</>.
      By default, this function can only be executed by superusers.
     </para>
-->
<para>
<function>pg_stat_statements_reset</function>抛弃所有<filename>pg_stat_statements</>
到目前为止收集的统计。缺省的，这个函数只能被超级用户执行。
</para>
    </listitem>
   </varlistentry>

  </variablelist>
 </sect2>

 <sect2>
  <!--
  <title>Configuration Parameters</title>
  -->
  <title>配置参数</title>

  <variablelist>
   <varlistentry>
    <term>
     <varname>pg_stat_statements.max</varname> (<type>integer</type>)
    </term>

    <listitem>
     <!--
<para>
      <varname>pg_stat_statements.max</varname> is the maximum number of
      statements tracked by the module (i.e., the maximum number of rows
      in the <structname>pg_stat_statements</> view).  If more distinct
      statements than that are observed, information about the least-executed
      statements is discarded.
      The default value is 1000.
      This parameter can only be set at server start.
     </para>
-->
<para>
<varname>pg_stat_statements.max</varname>是该模块追踪语句的最大值
（也就是，<structname>pg_stat_statements</>视图中的最大行数）。
如果观察了比这更多的不同的语句，则会抛弃执行最少的语句的信息。
缺省值是1000。这个参数只能在服务器启动时设置。
</para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term>
     <varname>pg_stat_statements.track</varname> (<type>enum</type>)
    </term>

    <listitem>
     <!--
<para>
      <varname>pg_stat_statements.track</varname> controls which statements
      are counted by the module.
      Specify <literal>top</> to track top-level statements (those issued
      directly by clients), <literal>all</> to also track nested statements
      (such as statements invoked within functions), or <literal>none</> to
      disable statement statistics collection.
      The default value is <literal>top</>.
      Only superusers can change this setting.
     </para>
-->
<para>
<varname>pg_stat_statements.track</varname>控制哪个语句可以被该模块计数。
声明<literal>top</>来跟踪顶级的语句（直接通过客户端发出的语句）。<literal>all</>
也跟踪嵌套的语句（比如包含在函数中的语句），或<literal>none</>禁用语句状态收集。
缺省值是<literal>top</>。只有超级用户可以更改这个设置。
</para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term>
     <varname>pg_stat_statements.track_utility</varname> (<type>boolean</type>)
    </term>

    <listitem>
     <!--
<para>
      <varname>pg_stat_statements.track_utility</varname> controls whether
      utility commands are tracked by the module.  Utility commands are
      all those other than <command>SELECT</>, <command>INSERT</>,
      <command>UPDATE</> and <command>DELETE</>.
      The default value is <literal>on</>.
      Only superusers can change this setting.
     </para>
-->
<para>
<varname>pg_stat_statements.track_utility</varname>控制该模块是否追踪工具命令。
工具命令是除了<command>SELECT</>, <command>INSERT</>, <command>UPDATE</> 和 
<command>DELETE</>的所有命令。缺省值是<literal>on</>。只有超级用户可以更改这个设置。
</para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term>
     <varname>pg_stat_statements.save</varname> (<type>boolean</type>)
    </term>

    <listitem>
     <!--
<para>
      <varname>pg_stat_statements.save</varname> specifies whether to
      save statement statistics across server shutdowns.
      If it is <literal>off</> then statistics are not saved at
      shutdown nor reloaded at server start.
      The default value is <literal>on</>.
      This parameter can only be set in the <filename>postgresql.conf</>
      file or on the server command line.
     </para>
-->
<para>
<varname>pg_stat_statements.save</varname>指定在服务器关闭时是否保存语句状态。
如果是<literal>off</>，那么在服务器关闭时不保存状态，在服务器启动时也不重新加载。
缺省值是<literal>on</>。这个参数只可以在<filename>postgresql.conf</>
文件中或者服务器命令行中设置。
</para>
    </listitem>
   </varlistentry>
  </variablelist>

  <!--
<para>
   The module requires additional shared memory amounting to about
   <varname>pg_stat_statements.max</varname> <literal>*</>
   <xref linkend="guc-track-activity-query-size"> bytes.  Note that this
   memory is consumed whenever the module is loaded, even if
   <varname>pg_stat_statements.track</> is set to <literal>none</>.
  </para>
-->
<para>
该模块需要额外的共享内存总计大约为
<varname>pg_stat_statements.max</varname> <literal>*</>
   <xref linkend="guc-track-activity-query-size">字节。请注意，
这个内存在该模块加载时被消耗，即使<varname>pg_stat_statements.track</>
设置为<literal>none</>。
</para>

<para>
   <!-- 
   These parameters must be set in <filename>postgresql.conf</>.
   Typical usage might be: 
   -->
   这些参数必须在<filename>postgresql.conf</>中设置。典型的用法是：

<programlisting>
# postgresql.conf
shared_preload_libraries = 'pg_stat_statements'

pg_stat_statements.max = 10000
pg_stat_statements.track = all
</programlisting>
  </para>
 </sect2>

 <sect2>
  <!--
  <title>Sample Output</title>
  -->
  <title>示例输出</title>

<screen>
bench=# SELECT pg_stat_statements_reset();

$ pgbench -i bench
$ pgbench -c10 -t300 bench

bench=# \x
bench=# SELECT query, calls, total_time, rows, 100.0 * shared_blks_hit /
               nullif(shared_blks_hit + shared_blks_read, 0) AS hit_percent
          FROM pg_stat_statements ORDER BY total_time DESC LIMIT 5;
-[ RECORD 1 ]---------------------------------------------------------------------
query       | UPDATE pgbench_branches SET bbalance = bbalance + ? WHERE bid = ?;
calls       | 3000
total_time  | 9609.00100000002
rows        | 2836
hit_percent | 99.9778970000200936
-[ RECORD 2 ]---------------------------------------------------------------------
query       | UPDATE pgbench_tellers SET tbalance = tbalance + ? WHERE tid = ?;
calls       | 3000
total_time  | 8015.156
rows        | 2990
hit_percent | 99.9731126579631345
-[ RECORD 3 ]---------------------------------------------------------------------
query       | copy pgbench_accounts from stdin
calls       | 1
total_time  | 310.624
rows        | 100000
hit_percent | 0.30395136778115501520
-[ RECORD 4 ]---------------------------------------------------------------------
query       | UPDATE pgbench_accounts SET abalance = abalance + ? WHERE aid = ?;
calls       | 3000
total_time  | 271.741999999997
rows        | 3000
hit_percent | 93.7968855088209426
-[ RECORD 5 ]---------------------------------------------------------------------
query       | alter table pgbench_accounts add primary key (aid)
calls       | 1
total_time  | 81.42
rows        | 0
hit_percent | 34.4947735191637631
</screen>
 </sect2>

 <sect2>
  <!--
  <title>Authors</title>
  -->
  <title>作者</title>

  <!--
<para>
   Takahiro Itagaki <email>itagaki.takahiro@oss.ntt.co.jp</email>.
   Query normalization added by Peter Geoghegan <email>peter@2ndquadrant.com</email>.
  </para>
-->
<para>
Takahiro Itagaki <email>itagaki.takahiro@oss.ntt.co.jp</email>。
Peter Geoghegan <email>peter@2ndquadrant.com</email>添加了查询正常化。
</para>
 </sect2>

</sect1>
