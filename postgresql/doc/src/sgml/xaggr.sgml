<!-- doc/src/sgml/xaggr.sgml -->

 <sect1 id="xaggr">
  <!-- <title>User-defined Aggregates</title> -->
<title>用户定义聚集</title>
  <indexterm zone="xaggr">
   <primary>aggregate function</primary>
   <secondary>user-defined</secondary>
  </indexterm>

<!-- 
  <para>
   Aggregate functions  in <productname>PostgreSQL</productname>
   are expressed in terms of <firstterm>state values</firstterm>
   and <firstterm>state transition functions</firstterm>.
   That is, an aggregate operates using a state value that is updated
   as each successive input row is processed.
   To define a new aggregate
   function, one selects a data type for the state value,
   an initial value for the state, and a state transition
   function.  The state transition function is just an
   ordinary function that could also be used outside the
   context of the aggregate.  A <firstterm>final function</firstterm>
   can also be specified, in case the desired result of the aggregate
   is different from the data that needs to be kept in the running
   state value.
  </para> 
-->
<para>
在<productname>PostgreSQL</productname>里的聚集是用<firstterm>状态值</firstterm>
和<firstterm>状态转换函数</firstterm>表达的。
也就是说，聚集操作使用一个随着每个输入行被处理而变化的状态值。
要定义一个新的聚集函数，就要选择表示状态值的数据类型、状态初始值、状态转换函数。
该状态转换函数只是一个普通函数，也可以用于聚集的环境之外。
还可以声明一个<firstterm>最终处理函数</firstterm>，
用于对付期望的聚集结果不同于需要保留在状态值中数据的情况。
</para>
<!-- 
  <para>
   Thus, in addition to the argument and result data types seen by a user
   of the aggregate, there is an internal state-value data type that
   might be different from both the argument and result types.
  </para> 
-->
<para>
因此，除了被聚集用户看到的参数和结果数据类型外，还有一种内部状态值数据类型，
这种类型可能与参数和结果类型都不一样。
</para>
  <para>
<!-- 
   If we define an aggregate that does not use a final function,
   we have an aggregate that computes a running function of
   the column values from each row.  <function>sum</>  is  an
   example  of  this  kind  of aggregate.  <function>sum</> starts at
   zero and always adds the current  row's  value  to
   its  running  total.  For example, if we want to make a <function>sum</>
   aggregate to work on a data type for complex numbers,
   we only need the addition function for that data type.
   The aggregate definition would be: 
-->
如果定义了一个不使用最终处理函数的聚集，那么聚集就是对每条记录的字段值进行函数计算。
<function>sum</>(求和)是这类聚集的例子。它从零开始，
依次向"总和"状态值追加当前的记录值。比如，如果要把<function>sum</>聚集用于复数，
只需要该数据类型的加法函数就行了。该聚集可以这样定义：
<screen>
CREATE AGGREGATE sum (complex)
(
    sfunc = complex_add,
    stype = complex,
    initcond = '(0,0)'
);

SELECT sum(a) FROM test_complex;

   sum
-----------
 (34,53.9)
</screen>

<!-- 
   (Notice that we are relying on function overloading: there is more than
    one aggregate named <function>sum</>, but
   <productname>PostgreSQL</productname> can figure out which kind
   of sum applies to a column of type <type>complex</type>.) 
-->
请注意，上述依赖于函数重载：有多个名为<function>sum</>的聚集函数，
但是<productname>PostgreSQL</productname>能够正确选出作用于<type>complex</type>列类型的那个。
  </para>

<!-- 
  <para>
   The above definition of <function>sum</function> will return zero (the initial
   state condition) if there are no nonnull input values.
   Perhaps we want to return null in that case instead &mdash; the SQL standard
   expects <function>sum</function> to behave that way.  We can do this simply by
   omitting the <literal>initcond</literal> phrase, so that the initial state
   condition is null.  Ordinarily this would mean that the <literal>sfunc</literal>
   would need to check for a null state-condition input.  But for
   <function>sum</function> and some other simple aggregates like
   <function>max</> and <function>min</>,
   it is sufficient to insert the first nonnull input value into
   the state variable and then start applying the transition function
   at the second nonnull input value.  <productname>PostgreSQL</productname>
   will do that automatically if the initial condition is null and
   the transition function is marked <quote>strict</> (i.e., not to be called
   for null inputs).
  </para> 
-->
<para>
如果不存在非 NULL 输入值，上面的<function>sum</function>定义将返回零值(初始状态条件)。
要按照 SQL 标准的要求返回 NULL 只需忽略<literal>initcond</literal>
段就可以实现(这样初始状态条件将变为 NULL)。
通常这也意味着<literal>sfunc</literal>需要检查 NULL 状态条件输入，不过对于<function>sum</function>，
<function>max</>，<function>min</>这类的简单聚集来说，把第一个非空输入插入到状态值里面，
然后从第二个非空输入状态值开始使用转换函数就足够了。
如果初始条件是 NULL 并且转换函数被标记为<quote>strict</>(不能对 NULL 输入调用)，
<productname>PostgreSQL</productname>就会自动处理这些内容。
</para>
<!-- 
  <para>
   Another bit of default behavior for a <quote>strict</> transition function
   is that the previous state value is retained unchanged whenever a
   null input value is encountered.  Thus, null values are ignored.  If you
   need some other behavior for null inputs, do not declare your
   transition function as strict; instead code it to test for null inputs and
   do whatever is needed.
  </para> 
-->
<para>
另外一个<quote>strict</>转换函数的缺省特性是：当碰到一个 NULL 输入的时候，
前面一个状态值会被保留下来不做改动。这样，就忽略了 NULL 。
如果你希望对 NULL 输入进行其它处理，只需要别把你的转换函数定义为"strict"，
并在编写代码的时候测试 NULL 并做相应处理即可。
</para>
  <para>
<!-- 
   <function>avg</> (average) is a more complex example of an aggregate.
   It requires
   two pieces of running state: the sum of the inputs and the count
   of the number of inputs.  The final result is obtained by dividing
   these quantities.  Average is typically implemented by using an
   array as the state value.  For example,
   the built-in implementation of <function>avg(float8)</function>
   looks like: 
-->
<function>avg</>(平均)是聚集更复杂一点的例子。它需要两个运行时状态：
输入的总和以及输入的数量。最终结果是通过把两者相除得到的。
平均的典型实现是用一个数组做状态值。比如，内建的<function>avg(float8)</function>实现是这样的：
<programlisting>
CREATE AGGREGATE avg (float8)
(
    sfunc = float8_accum,
    stype = float8[],
    finalfunc = float8_avg,
    initcond = '{0,0,0}'
);
</programlisting>

<!-- 
   (<function>float8_accum</> requires a three-element array, not just
   two elements, because it accumulates the sum of squares as well as
   the sum and count of the inputs.  This is so that it can be used for
   some other aggregates besides <function>avg</>.) 
-->
（<function>float8_accum</>要求一个三元素数组，而不是两元素，
因为它累积平方和和输入的总和和计数。这样它就可以在一些除了<function>avg</>
之外的聚集中使用了。）
  </para>

  <para>
<!-- 
   Aggregate functions can use polymorphic
   state transition functions or final functions, so that the same functions
   can be used to implement multiple aggregates.
   See <xref linkend="extend-types-polymorphic">
   for an explanation of polymorphic functions.
   Going a step further, the aggregate function itself can be specified
   with polymorphic input type(s) and state type, allowing a single
   aggregate definition to serve for multiple input data types.
   Here is an example of a polymorphic aggregate: 
-->
聚集函数可以使用多态转换函数或者最终处理函数，这样，同一个函数就可以用于实现多个聚集。
参阅<xref linkend="extend-types-polymorphic">获取多态函数的解释。再进一步，
聚集函数本身可以用多态的基本类型和状态类型来声明，
这样就允许一个聚集定义用于多种输入数据类型。下面是一个多态聚集的例子：
<programlisting>
CREATE AGGREGATE array_accum (anyelement)
(
    sfunc = array_append,
    stype = anyarray,
    initcond = '{}'
);
</programlisting>

<!-- 
   Here, the actual state type for any aggregate call is the array type
   having the actual input type as elements.  The behavior of the aggregate
   is to concatenate all the inputs into an array of that type.
   (Note: the built-in aggregate <function>array_agg</> provides similar
   functionality, with better performance than this definition would have.) 
-->
这里，任意聚集调用的实际状态类型是和元素输入类型相同的数组类型。
聚集的特征是连接所有的输入到那个类型的数组里。（注意：
内建的聚集<function>array_agg</>支持相同的功能，并且有比这个定义更好的性能。）
  </para>

  <para>
   <!-- 
   Here's the output using two different actual data types as arguments: 
   -->
下面的例子使用两个不同实际数据类型作为参数输出：
<programlisting>
SELECT attrelid::regclass, array_accum(attname)
    FROM pg_attribute
    WHERE attnum &gt; 0 AND attrelid = 'pg_tablespace'::regclass
    GROUP BY attrelid;

   attrelid    |              array_accum              
---------------+---------------------------------------
 pg_tablespace | {spcname,spcowner,spcacl,spcoptions}
(1 row)

SELECT attrelid::regclass, array_accum(atttypid::regtype)
    FROM pg_attribute
    WHERE attnum &gt; 0 AND attrelid = 'pg_tablespace'::regclass
    GROUP BY attrelid;

   attrelid    |        array_accum        
---------------+---------------------------
 pg_tablespace | {name,oid,aclitem[],text[]}
(1 row)
</programlisting>
  </para>

  <para>
<!-- 
   A function written in C can detect that it is being called as an
   aggregate transition or final function by calling
   <function>AggCheckCallContext</>, for example:
-->
一个用 C 写的函数可以判断它是被当作一个聚集转换函数调用还是通过调用<function>AggCheckCallContext</>
作为最终的函数，例如：
<programlisting>
if (AggCheckCallContext(fcinfo, NULL))
</programlisting>
<!-- 
   One reason for checking this is that when it is true for a transition
   function, the first input
   must be a temporary transition value and can therefore safely be modified
   in-place rather than allocating a new copy.
   See <literal>int8inc()</> for an example.
   (This is the <emphasis>only</>
   case where it is safe for a function to modify a pass-by-reference input.
   In particular, aggregate final functions should not modify their inputs in
   any case, because in some cases they will be re-executed on the same
   final transition value.) 
-->
检查这个的一个原因是，在它对于一个转换函数为真的时候，左边的输入必须是一个临时的转换值，
因此可以安全地现场修改，而不用分配新的拷贝。参阅<literal>int8inc()</>的例子。
（这是函数里<emphasis>唯一</>可以修改输入的传递引用的地方。特别的，
聚集最终的函数不应该在任何情况下修改他们的输入，
因为在某些情况下它们将在相同的最终转换值下重复执行。）
  </para>

<!-- 
  <para>
   For further details see the
   <xref linkend="sql-createaggregate">
   command.
  </para> 
-->
<para>
更详细的信息请参考<xref linkend="sql-createaggregate">命令。
</para>
 </sect1>
