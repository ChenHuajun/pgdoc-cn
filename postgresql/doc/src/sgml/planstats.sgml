<!-- doc/src/sgml/planstats.sgml -->

<chapter id="planner-stats-details">
<!--
 <title>How the Planner Uses Statistics</title>
-->
  <title>规划器如何使用统计信息</title>

  <!-- 
<para>
   This chapter builds on the material covered in <xref
   linkend="using-explain"> and <xref linkend="planner-stats"> to show some
   additional details about how the planner uses the
   system statistics to estimate the number of rows each part of a query might
   return. This is a significant part of the planning process,
   providing much of the raw material for cost calculation.
  </para>
-->
<para>
  本章建立在
  <xref linkend="using-explain">和<xref linkend="planner-stats">
  里面讨论的材料上，
  显示了关于规划器如何使用的额外的详细信息。
  系统统计信息来预计一个查询运行的各个阶段可能返回的行数。
  这是规划过程中的一个重要的部分，
  因为它提供了开销计算中的大部分原始材料。
</para>

  <!--
<para>
   The intent of this chapter is not to document the code in detail,
   but to present an overview of how it works.
   This will perhaps ease the learning curve for someone who subsequently
   wishes to read the code.
  </para>
-->
<para>
  本章的目的不是在细节上给代码写文档(代码本身就是文档)，
  而是给出一个规划器如何使用统计信息的概述。
  这样可能可以降低那些想以后阅读这部份代码的人的学习难度。
</para>

 <sect1 id="row-estimation-examples">
 <!--
  <title>Row Estimation Examples</title>
  -->
  <title>行预期的例子</title>

  <indexterm zone="row-estimation-examples">
   <primary>row estimation</primary>
   <secondary>planner</secondary>
  </indexterm>

  <!--
<para>
   The examples shown below use tables in the <productname>PostgreSQL</>
   regression test database.
   The outputs shown are taken from version 8.3.
   The behavior of earlier (or later) versions might vary.
   Note also that since <command>ANALYZE</> uses random sampling
   while producing statistics, the results will change slightly after
   any new <command>ANALYZE</>.
  </para>
-->
<para>
   下面的例子使用的<productname>PostgreSQL</>回归测试数据库中的表。
   输出结果是从8.3版获得的。之前或之后版本的动作可能会有所变化。
   同时需要注意的是，在产生统计信息时，<command>ANALYZE</>使用的是随机采样，
   在使用一次新的<command>ANALYZE</>之后，结果可能会发生轻微的改变。
</para>

  
<para>
   <!--
   Let's start with a very simple query:
   -->
   让我们以一个很简单的查询开始：
<programlisting>
EXPLAIN SELECT * FROM tenk1;

                         QUERY PLAN
-------------------------------------------------------------
 Seq Scan on tenk1  (cost=0.00..458.00 rows=10000 width=244)
</programlisting>
   <!--
   How the planner determines the cardinality of <structname>tenk1</structname>
   is covered in <xref linkend="planner-stats">, but is repeated here for
   completeness. The number of pages and rows is looked up in
   <structname>pg_class</structname>:
   -->
   规划器如何判断<structname>tenk1</structname>里面行的基数
   在<xref linkend="planner-stats">里面介绍，
   为了完整，在这里重复一下。行数或页数是从<structname>pg_class</structname>里面查出来的：
   
<programlisting>
SELECT relpages, reltuples FROM pg_class WHERE relname = 'tenk1';

 relpages | reltuples
----------+-----------
      358 |     10000
</programlisting>
    <!--
    These numbers are current as of the last <command>VACUUM</> or
    <command>ANALYZE</> on the table.  The planner then fetches the
    actual current number of pages in the table (this is a cheap operation,
    not requiring a table scan).  If that is different from
    <structfield>relpages</structfield> then
    <structfield>reltuples</structfield> is scaled accordingly to
    arrive at a current number-of-rows estimate.  In this case the value of
    <structfield>relpages</structfield> is up-to-date so the rows estimate is
    the same as <structfield>reltuples</structfield>.
-->
这些数字表示表中当前最新的<command>VACUUM</>或者<command>ANALYZE</>。
之后，规划器取出表中当前实际的块号
（这个操作的开销很小，不需要扫描全表）。 
如果与<structfield>relpages</structfield>不同，那么根据达到的一个当前函数估计值，
<structfield>reltuples</structfield>会进行一定的缩放。
在这种情况下，<structfield>relpages</structfield>的值是最新的，
因此估计的行与<structfield>reltuples</structfield>相同。 
  </para>

  
<para>
   <!--
   Let's move on to an example with a range condition in its
   <literal>WHERE</literal> clause:
   -->
   换一个在WHERE子句里面带有范围条件的例子：
<programlisting>
EXPLAIN SELECT * FROM tenk1 WHERE unique1 &lt; 1000;

                                   QUERY PLAN
--------------------------------------------------------------------------------
 Bitmap Heap Scan on tenk1  (cost=24.06..394.64 rows=1007 width=244)
   Recheck Cond: (unique1 &lt; 1000)
   -&gt;  Bitmap Index Scan on tenk1_unique1  (cost=0.00..23.80 rows=1007 width=0)
         Index Cond: (unique1 &lt; 1000)
</programlisting>
   <!--
   The planner examines the <literal>WHERE</literal> clause condition
   and looks up the selectivity function for the operator
   <literal>&lt;</literal> in <structname>pg_operator</structname>.
   This is held in the column <structfield>oprrest</structfield>,
   and the entry in this case is <function>scalarltsel</function>.
   The <function>scalarltsel</function> function retrieves the histogram for
   <structfield>unique1</structfield> from
   <structname>pg_statistics</structname>.  For manual queries it is more
   convenient to look in the simpler <structname>pg_stats</structname>
   view:
   -->
   规划器检查<literal>WHERE</literal>子句条件，
   并为<structname>pg_operator</structname>中的<literal>&lt;</literal>执行器查找可选函数。
   将保持在<structfield>oprrest</structfield>列中， 
   并且在这个例子中的条目是<function>scalarltsel</function>。 
   <function>scalarltsel</function>函数从<structfield>unique1</structfield>为
   <structfield>unique1</structfield>检索直方图。 
   对于手工查询来说，这样做可以更方便，更直观的查看<structname>pg_stats</structname>视图：
<programlisting>
SELECT histogram_bounds FROM pg_stats
WHERE tablename='tenk1' AND attname='unique1';

                   histogram_bounds
------------------------------------------------------
 {0,993,1997,3050,4040,5036,5957,7057,8029,9016,9995}
</programlisting>
   <!--
   Next the fraction of the histogram occupied by <quote>&lt; 1000</quote>
   is worked out. This is the selectivity. The histogram divides the range
   into equal frequency buckets, so all we have to do is locate the bucket
   that our value is in and count <emphasis>part</emphasis> of it and
   <emphasis>all</emphasis> of the ones before. The value 1000 is clearly in
   the second bucket (993-1997).  Assuming a linear distribution of
   values inside each bucket, we can calculate the selectivity as:
   -->
   然后，把直方图里面包含<quote>&lt; 1000</quote>的部分找出来。这就是选择性。
   直方图把范围分隔成相同频率的段， 所以要做的只是把的数值所在的段找出来，
   然后计算它里面占的<emphasis>部分</emphasis>以及<emphasis>所有</emphasis>该值之前的部分。 
   值1000很明显在第二个段(993-1997)里，因此，假设每个段里面的分布是线性的，
   那么就可以计算出选择性：
   
<programlisting>
selectivity = (1 + (1000 - bucket[2].min)/(bucket[2].max - bucket[2].min))/num_buckets
            = (1 + (1000 - 993)/(1997 - 993))/10
            = 0.100697
</programlisting>
   <!--
   that is, one whole bucket plus a linear fraction of the second, divided by
   the number of buckets. The estimated number of rows can now be calculated as
   the product of the selectivity and the cardinality of
   <structname>tenk1</structname>:
   -->
   也就是一个段加上第二个段的线性部分，除以总段数。
   那么估计的行数现在可以用选择性和<structname>tenk1</structname>的基数之积计算：
   
<programlisting>
rows = rel_cardinality * selectivity
     = 10000 * 0.100697
     = 1007  (rounding off)
</programlisting>
  </para>

  
<para>
   <!--
   Next let's consider an example with an equality condition in its
   <literal>WHERE</literal> clause:
   -->
   然后考虑一个<literal>WHERE</literal>子句里等于条件的例子：
<programlisting>
EXPLAIN SELECT * FROM tenk1 WHERE stringu1 = 'CRAAAA';

                        QUERY PLAN
----------------------------------------------------------
 Seq Scan on tenk1  (cost=0.00..483.00 rows=30 width=244)
   Filter: (stringu1 = 'CRAAAA'::name)
</programlisting>
   <!--
   Again the planner examines the <literal>WHERE</literal> clause condition
   and looks up the selectivity function for <literal>=</literal>, which is
   <function>eqsel</function>.  For equality estimation the histogram is
   not useful; instead the list of <firstterm>most
   common values</> (<acronym>MCV</acronym>s) is used to determine the
   selectivity. Let's have a look at the MCVs, with some additional columns
   that will be useful later:
   -->
   规划器再次检查<literal>WHERE</literal>子句条件，并为<literal>=</literal>（是<function>eqsel</function>）查找可选函数。 
   对于等价估计而言，直方图并不是有用的；相反，
   <firstterm>最常见的值</>(<acronym>MCV</acronym>)列表可以用来决定可选项。
   让我们来看一下MCV，带有一些额外的列会很有效：
   
<programlisting>
SELECT null_frac, n_distinct, most_common_vals, most_common_freqs FROM pg_stats
WHERE tablename='tenk1' AND attname='stringu1';

null_frac         | 0
n_distinct        | 676
most_common_vals  | {EJAAAA,BBAAAA,CRAAAA,FCAAAA,FEAAAA,GSAAAA,JOAAAA,MCAAAA,NAAAAA,WGAAAA}
most_common_freqs | {0.00333333,0.003,0.003,0.003,0.003,0.003,0.003,0.003,0.003,0.003}

</programlisting>
   <!--
   Since <literal>CRAAAA</> appears in the list of MCVs, the selectivity is
   merely the corresponding entry in the list of most common frequencies
   (<acronym>MCF</acronym>s):
   -->
   因为MCV中有<literal>CRAAAA</>，那么可选项只是<acronym>MCF</acronym>列表中的一个相关条目：
<programlisting>
selectivity = mcf[3]
            = 0.003
</programlisting>
   <!--
   As before, the estimated number of rows is just the product of this with the
   cardinality of <structname>tenk1</structname>:
   -->
   像之前一样，行的估计数只是和前面一样用<structname>tenk1</structname>的基数乘以选择性：
<programlisting>
rows = 10000 * 0.003
     = 30
</programlisting>
  </para>


  
<para>
   <!--
   Now consider the same query, but with a constant that is not in the
   <acronym>MCV</acronym> list:
   -->
   现在看看同样的查询，但是字符串常量是不在<acronym>MCV</acronym>列表里的:
<programlisting>
EXPLAIN SELECT * FROM tenk1 WHERE stringu1 = 'xxx';

                        QUERY PLAN
----------------------------------------------------------
 Seq Scan on tenk1  (cost=0.00..483.00 rows=15 width=244)
   Filter: (stringu1 = 'xxx'::name)
</programlisting>
   <!--
   This is quite a different problem: how to estimate the selectivity when the
   value is <emphasis>not</emphasis> in the <acronym>MCV</acronym> list.
   The approach is to use the fact that the value is not in the list,
   combined with the knowledge of the frequencies for all of the
   <acronym>MCV</acronym>s:
   -->
   这个时候的问题是完全不同的一个：在数据值<emphasis>不在</emphasis> <acronym>MCV</acronym>列表里面时，
   如何估计选择性就是完全另外一个问题了。解决方法是利用该值不在列表里头的事实，
   结合已知的所有<acronym>MCV</acronym>出现的频率，用减法得出：
   
<programlisting>
selectivity = (1 - sum(mvf))/(num_distinct - num_mcv)
            = (1 - (0.00333333 + 0.003 + 0.003 + 0.003 + 0.003 + 0.003 +
                    0.003 + 0.003 + 0.003 + 0.003))/(676 - 10)
            = 0.0014559
</programlisting>
   <!--
   That is, add up all the frequencies for the <acronym>MCV</acronym>s and
   subtract them from one, then
   divide by the number of <emphasis>other</emphasis> distinct values.
   This amounts to assuming that the fraction of the column that is not any
   of the MCVs is evenly distributed among all the other distinct values.
   Notice that there are no null values so we don't have to worry about those
   (otherwise we'd subtract the null fraction from the numerator as well).
   The estimated number of rows is then calculated as usual:
    -->
也就是，为<acronym>MCV</acronym>增加所有的频率，并且从1减去，
然后用<emphasis>其它</emphasis>无重复值的个数来分开。
这相当于假设不是MCV中的列的分数巨晕的分布在所有其他不同值中。
需要注意的是，没有NULL值，因此不需要担心这些（否则需要从分子中减去NULL分数）。
估算的行数然后照例计算：

<programlisting>
rows = 10000 * 0.0014559
     = 15  (rounding off)
</programlisting>
  </para>
  
  
<para>
   <!--
   The previous example with <literal>unique1 &lt; 1000</> was an
   oversimplification of what <function>scalarltsel</function> really does;
   now that we have seen an example of the use of MCVs, we can fill in some
   more detail.  The example was correct as far as it went, because since
   <structfield>unique1</> is a unique column it has no MCVs (obviously, no
   value is any more common than any other value).  For a non-unique
   column, there will normally be both a histogram and an MCV list, and
   <emphasis>the histogram does not include the portion of the column
   population represented by the MCVs</>.  We do things this way because
   it allows more precise estimation.  In this situation
   <function>scalarltsel</function> directly applies the condition (e.g.,
   <quote>&lt; 1000</>) to each value of the MCV list, and adds up the
   frequencies of the MCVs for which the condition is true.  This gives
   an exact estimate of the selectivity within the portion of the table
   that is MCVs.  The histogram is then used in the same way as above
   to estimate the selectivity in the portion of the table that is not
   MCVs, and then the two numbers are combined to estimate the overall
   selectivity.  For example, consider
   -->
   
   之前带有<literal>unique1 &lt; 1000</>的例子是<function>scalarltsel</function>实际执行的简单化。
   现在已经看过了使用MCV的例子，可以增加一些具体细节了。
   这个例子这样子是正确的，因为<structfield>unique1</>是一个唯一属性列，
   那么它没有MCV（显然，没有一个值能比其它值更通用）。
   对一个非唯一属性列而言，通常会有直方图和MCV列表，
   并且直方图不包括MCV表示的列总体那部分。在这种情况下，
   <function>scalarltsel</function>直接应用条件到每个 MCV列表的值上（如<quote>&lt; 1000</>），
   并且增加那些条件判断为真的MCV的频率。这给出准确的是MCV表的部分的选择的准确估计。
   然后直方图使用与上述方式相同的估计选择表的部分，其不是MCV，
   那么组合这两个数字来估计总的选择性。例如，考虑
   
   
<programlisting>
EXPLAIN SELECT * FROM tenk1 WHERE stringu1 &lt; 'IAAAAA';

                         QUERY PLAN
------------------------------------------------------------
 Seq Scan on tenk1  (cost=0.00..483.00 rows=3077 width=244)
   Filter: (stringu1 &lt; 'IAAAAA'::name)
</programlisting>
   <!--
   We already saw the MCV information for <structfield>stringu1</>,
   and here is its histogram:
   -->
   我们已看到关于stringu1的MCV信息，这里是它的直方图：
<programlisting>
SELECT histogram_bounds FROM pg_stats
WHERE tablename='tenk1' AND attname='stringu1';

                                histogram_bounds
--------------------------------------------------------------------------------
 {AAAAAA,CQAAAA,FRAAAA,IBAAAA,KRAAAA,NFAAAA,PSAAAA,SGAAAA,VAAAAA,XLAAAA,ZZAAAA}
</programlisting>
   
   <!--
   Checking the MCV list, we find that the condition <literal>stringu1 &lt;
   'IAAAAA'</> is satisfied by the first six entries and not the last four,
   so the selectivity within the MCV part of the population is
   -->
   检查MCV列表，我们发现前6项满足条件<literal>stringu1 &lt;'IAAAAA'</>，而不是最后4项，
   所以最常见的部分MCV选择性是
   
<programlisting>
selectivity = sum(relevant mvfs)
            = 0.00333333 + 0.003 + 0.003 + 0.003 + 0.003 + 0.003
            = 0.01833333
</programlisting>
   <!--
   Summing all the MCFs also tells us that the total fraction of the
   population represented by MCVs is 0.03033333, and therefore the
   fraction represented by the histogram is 0.96966667 (again, there
   are no nulls, else we'd have to exclude them here).  We can see
   that the value <literal>IAAAAA</> falls nearly at the end of the
   third histogram bucket.  Using some rather cheesy assumptions
   about the frequency of different characters, the planner arrives
   at the estimate 0.298387 for the portion of the histogram population
   that is less than <literal>IAAAAA</>.  We then combine the estimates
   for the MCV and non-MCV populations:
   -->
   累加所有的MCF，也告诉我们由 MCVs表示的常见的总比例是0.03033333，
   而且因此由直方图表示的 比例是0.96966667。
   （再次,没有NULL，否则这里我们排斥它们）我们可以看到<literal>IAAAAA</>值落在第三段直方图的结尾部分。
   关于不同字符串的频率使用些较普通的假设，规划器达到估计0.298387为 
   直方图中小于<literal>IAAAAA</>的部分。我们然后组合估计值为MCV和非MCV常见:
   
<programlisting>
selectivity = mcv_selectivity + histogram_selectivity * histogram_fraction
            = 0.01833333 + 0.298387 * 0.96966667
            = 0.307669

rows        = 10000 * 0.307669
            = 3077  (rounding off)
</programlisting>
   <!--
   In this particular example, the correction from the MCV list is fairly
   small, because the column distribution is actually quite flat (the
   statistics showing these particular values as being more common than
   others are mostly due to sampling error).  In a more typical case where
   some values are significantly more common than others, this complicated
   process gives a useful improvement in accuracy because the selectivity
   for the most common values is found exactly.
   -->
   尤其是在这个例子中，MCV列表的纠正很小，因为列分布实际上很平坦。
   （统计分析显示这些特殊值往往比其它的更常见大部分由于抽样误差）
   在更典型的情况下这里有些值显著的比其它的更常见，这复杂的处理过程，
   有用的提高了精度，因为选择性对于那些最常见的值来说，查找准确。
   
  </para>

  
<para>
   <!--
   Now let's consider a case with more than one
   condition in the <literal>WHERE</literal> clause:
   -->
   现在考虑一个<literal>WHERE</literal>子句中带有多个条件的情况：
<programlisting>
EXPLAIN SELECT * FROM tenk1 WHERE unique1 &lt; 1000 AND stringu1 = 'xxx';

                                   QUERY PLAN
--------------------------------------------------------------------------------
 Bitmap Heap Scan on tenk1  (cost=23.80..396.91 rows=1 width=244)
   Recheck Cond: (unique1 &lt; 1000)
   Filter: (stringu1 = 'xxx'::name)
   -&gt;  Bitmap Index Scan on tenk1_unique1  (cost=0.00..23.80 rows=1007 width=0)
         Index Cond: (unique1 &lt; 1000)
</programlisting>
   <!--
   The planner assumes that the two conditions are independent, so that
   the individual selectivities of the clauses can be multiplied together:
   -->
   规划器认为这两个条件是独立的，因此可以同时执行语句的独立查询：
<programlisting>
selectivity = selectivity(unique1 &lt; 1000) * selectivity(stringu1 = 'xxx')
            = 0.100697 * 0.0014559
            = 0.0001466

rows        = 10000 * 0.0001466
            = 1  (rounding off)
</programlisting>
   <!--
   Notice that the number of rows estimated to be returned from the bitmap
   index scan reflects only the condition used with the index; this is
   important since it affects the cost estimate for the subsequent heap
   fetches.
   -->
   需要注意的是，从位图索引扫描中返回的估计行数值影响索引使用的条件；
   这一点很重要，因为它会影响之后的堆栈抓取估计开销。
   
  </para>

  
<para>
   <!--
   Finally we will examine a query that involves a join:
   -->
   最后检查一个包含连接的查找：
<programlisting>
EXPLAIN SELECT * FROM tenk1 t1, tenk2 t2
WHERE t1.unique1 &lt; 50 AND t1.unique2 = t2.unique2;

                                      QUERY PLAN
--------------------------------------------------------------------------------------
 Nested Loop  (cost=4.64..456.23 rows=50 width=488)
   -&gt;  Bitmap Heap Scan on tenk1 t1  (cost=4.64..142.17 rows=50 width=244)
         Recheck Cond: (unique1 &lt; 50)
         -&gt;  Bitmap Index Scan on tenk1_unique1  (cost=0.00..4.63 rows=50 width=0)
               Index Cond: (unique1 &lt; 50)
   -&gt;  Index Scan using tenk2_unique2 on tenk2 t2  (cost=0.00..6.27 rows=1 width=244)
         Index Cond: (unique2 = t1.unique2)
</programlisting>
   <!--
   The restriction on <structname>tenk1</structname>,
   <literal>unique1 &lt; 50</literal>,
   is evaluated before the nested-loop join.
   This is handled analogously to the previous range example.  This time the
   value 50 falls into the first bucket of the
   <structfield>unique1</structfield> histogram:
   -->
   在<structname>tenk1</structname>上的<literal>unique1 &lt; 50</literal>限制在嵌套循环连接之前计算。
   这个条件是用类似上面的那个范围例子的方法处理的。
   但是这次数值50落在<structfield>unique1</structfield>的直方图表的第一个段内：
   
<programlisting>
selectivity = (0 + (50 - bucket[1].min)/(bucket[1].max - bucket[1].min))/num_buckets
            = (0 + (50 - 0)/(993 - 0))/10
            = 0.005035

rows        = 10000 * 0.005035
            = 50  (rounding off)
</programlisting>
   <!--
   The restriction for the join is <literal>t2.unique2 = t1.unique2</>.
   The operator is just
   our familiar <literal>=</literal>, however the selectivity function is
   obtained from the <structfield>oprjoin</structfield> column of
   <structname>pg_operator</structname>, and is <function>eqjoinsel</function>.
   <function>eqjoinsel</function> looks up the statistical information for both
   <structname>tenk2</structname> and <structname>tenk1</structname>:
   -->
   此链接的限制是<literal>t2.unique2 = t1.unique2</>。操作符是我们熟悉的<literal>=</literal>，
   然而可选函数是从<structname>pg_operator</structname>的<structfield>oprjoin</structfield>字段获得的，
   并且是<function>eqjoinsel</function>。
   <function>eqjoinsel</function>为<structname>tenk2</structname>和
   <structname>tenk1</structname>查找统计信息：
   
<programlisting>
SELECT tablename, null_frac,n_distinct, most_common_vals FROM pg_stats
WHERE tablename IN ('tenk1', 'tenk2') AND attname='unique2';

tablename  | null_frac | n_distinct | most_common_vals
-----------+-----------+------------+------------------
 tenk1     |         0 |         -1 |
 tenk2     |         0 |         -1 |
</programlisting>
   <!--
   In this case there is no <acronym>MCV</acronym> information for
   <structfield>unique2</structfield> because all the values appear to be
   unique, so we use an algorithm that relies only on the number of
   distinct values for both relations together with their null fractions:
   -->
   在这个例子里，没有<structfield>unique2</structfield>的<acronym>MCV</acronym>信息，
   因为所有数值看上去都是唯一的，
   因此可以使用一个只依赖唯一数值数目和NULL数目百分比的算法来给两个表计算(选择性)：
   
<programlisting>
selectivity = (1 - null_frac1) * (1 - null_frac2) * min(1/num_distinct1, 1/num_distinct2)
            = (1 - 0) * (1 - 0) / max(10000, 10000)
            = 0.0001
</programlisting>
   <!--
   This is, subtract the null fraction from one for each of the relations,
   and divide by the maximum of the numbers of distinct values.
   The number of rows
   that the join is likely to emit is calculated as the cardinality of the
   Cartesian product of the two inputs, multiplied by the
   selectivity:
   -->
   也就是说，把每个表都减去一里面NULL的比例，然后除以数值的最大值。
   连接可能选出来的行数是以嵌套循环里的两个输入值的笛卡尔积的总行数，
   乘以选择性计算出来的：
   
<programlisting>
rows = (outer_cardinality * inner_cardinality) * selectivity
     = (50 * 10000) * 0.0001
     = 50
</programlisting>
  </para>

  <!--
<para>
   Had there been MCV lists for the two columns,
   <function>eqjoinsel</function> would have used direct comparison of the MCV
   lists to determine the join selectivity within the part of the column
   populations represented by the MCVs.  The estimate for the remainder of the
   populations follows the same approach shown here.
  </para>
-->
<para>
   这里有两列的MCV列表，
   <function>eqjoinsel</function>将直接使用MCV列表比较来决定连接由MCV表示的常见列部分的选择。
   下面常见的剩下的估计值跟显示这里的方法相同。
</para>

  <!--
<para>
   Notice that we showed <literal>inner_cardinality</> as 10000, that is,
   the unmodified size of <structname>tenk2</>.  It might appear from
   inspection of the <command>EXPLAIN</> output that the estimate of
   join rows comes from 50 * 1, that is, the number of outer rows times
   the estimated number of rows obtained by each inner index scan on
   <structname>tenk2</>.  But this is not the case: the join relation size
   is estimated before any particular join plan has been considered.  If
   everything is working well then the two ways of estimating the join
   size will produce about the same answer, but due to round-off error and
   other factors they sometimes diverge significantly.
  </para>
-->
<para>
  需要注意的是，<literal>inner_cardinality</>表示为10000，也就是未修改的<structname>tenk2</>大小。
  它可能出现从检查<command>EXPLAIN</>输出，其连接行的估计值来自50 * 1，就是，
  由外部行数乘以由每个内部索引扫描的<structname>tenk2</>获取的估计行数。但是这不是那种情况：
  估计连接关系的大小在考虑任何特定的连接计划之前。如果任何事情工作很好，
  那么两种方式估计的连接大小将产生相关的同样的答案，
  但是由于四舍五入误差和其它因素它们有时差异较明显。
</para>

  <!--
<para>
   For those interested in further details, estimation of the size of
   a table (before any <literal>WHERE</> clauses) is done in
   <filename>src/backend/optimizer/util/plancat.c</filename>. The generic
   logic for clause selectivities is in
   <filename>src/backend/optimizer/path/clausesel.c</filename>.  The
   operator-specific selectivity functions are mostly found
   in <filename>src/backend/utils/adt/selfuncs.c</filename>.
  </para>
-->
<para>
   在<filename>src/backend/optimizer/util/plancat.c</filename>中有对一个表大小的估计
   （在任何<literal>WHERE</>字句之前）。 
   在<filename>src/backend/optimizer/path/clausesel.c</filename>中有对字句选择性的通用逻辑。
   在<filename>src/backend/utils/adt/selfuncs.c</filename>中有特定操作符的可选函数。
</para>

 </sect1>

</chapter>
