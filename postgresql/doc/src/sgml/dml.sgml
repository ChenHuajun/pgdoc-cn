<!-- doc/src/sgml/dml.sgml -->

<chapter id="dml">
 <!-- <title>Data Manipulation</title> -->
<title>数据操作</title>
<!-- 
 <remark>
  This chapter is still quite incomplete.
 </remark> 
 -->
<remark>
本章仍然是不完整的。 
</remark> 
 <!--
<para>
  The previous chapter discussed how to create tables and other
  structures to hold your data.  Now it is time to fill the tables
  with data.  This chapter covers how to insert, update, and delete
  table data.  The chapter
  after this will finally explain how to extract your long-lost data
  from the database.
 </para>
-->
<para>
前面的章节讨论了如何创建存储数据的表和其它结构。现在来讲用数据填充表。
本章将介绍如何插入、更新、删除数据。
在下一章将最终解释如何把你丢失已久的数据从数据库中抽取出来。
</para>

 <sect1 id="dml-insert">
  <!-- <title>Inserting Data</title> -->
<title>插入数据</title>
  <indexterm zone="dml-insert">
   <primary>inserting</primary>
  </indexterm>

  <indexterm zone="dml-insert">
   <primary>INSERT</primary>
  </indexterm>

  <!--
<para>
   When a table is created, it contains no data.  The first thing to
   do before a database can be of much use is to insert data.  Data is
   conceptually inserted one row at a time.  Of course you can also
   insert more than one row, but there is no way to insert less than
   one row.  Even if you know only some column values, a
   complete row must be created.
  </para>
-->
<para>
在创建完一个表的时候，它里面没有数据。
在数据库可以有点用处之前要做的第一件事就是向里面插入数据。
数据在概念上是每次插入一行。我们当然可以每次插入多行，
但是确实没有办法插入少于一行的数据。即使你只知道几个字段的数值，
那么你也必须创建一个完整的行。
</para>


<para>
<!-- 
   To create a new row, use the <xref linkend="sql-insert">
   command.  The command requires the
   table name and column values.  For
   example, consider the products table from <xref linkend="ddl">: 
-->
使用<xref linkend="sql-insert">命令创建一个新行。
这条命令要求提供表名字以及字段值。比如，
考虑来自<xref linkend="ddl">的产品表：
<programlisting>
CREATE TABLE products (
    product_no integer,
    name text,
    price numeric
);
</programlisting>
<!-- 
   An example command to insert a row would be: 
-->
下面是一个向表中插入一行的例子：
<programlisting>
INSERT INTO products VALUES (1, 'Cheese', 9.99);
</programlisting>
<!-- 
   The data values are listed in the order in which the columns appear
   in the table, separated by commas.  Usually, the data values will
   be literals (constants), but scalar expressions are also allowed. 
-->
数据值是按照这些字段在表中出现的顺序列出的，并且用逗号分隔。通常，
数据值是文本(常量)，但也允许使用标量表达式。
  </para>

<para>
<!--
   The above syntax has the drawback that you need to know the order
   of the columns in the table.  To avoid this you can also list the
   columns explicitly.  For example, both of the following commands
   have the same effect as the one above:
-->
上述语法的缺点是你必须知道表中字段的顺序。
你也可以明确地列出字段以避免这个问题。比如，
下面的两条命令都和上面的那条命令效果相同：
<programlisting>
INSERT INTO products (product_no, name, price) VALUES (1, 'Cheese', 9.99);
INSERT INTO products (name, price, product_no) VALUES ('Cheese', 9.99, 1);
</programlisting>
<!-- 
   Many users consider it good practice to always list the column
   names. 
-->
许多用户认为明确列出字段名是个好习惯。
  </para>
<!--
<para>
   If you don't have values for all the columns, you can omit some of
   them.  In that case, the columns will be filled with their default
   values.  For example:
<programlisting>
INSERT INTO products (product_no, name) VALUES (1, 'Cheese');
INSERT INTO products VALUES (1, 'Cheese');
</programlisting>
   The second form is a <productname>PostgreSQL</productname>
   extension.  It fills the columns from the left with as many values
   as are given, and the rest will be defaulted.
  </para>
-->
<para>
如果你不知道所有字段的数值，那么可以省略其中的一些。这时候，
这些未知字段将被填充为它们的缺省值。比如：
<programlisting>
INSERT INTO products (product_no, name) VALUES (1, 'Cheese');
INSERT INTO products VALUES (1, 'Cheese');
</programlisting>
第二种形式是<productname>PostgreSQL</productname>的一个扩展。
它从左向右用给定的值尽可能多的填充字段，剩余的填充缺省值。
</para>

  <!--
<para>
   For clarity, you can also request default values explicitly, for
   individual columns or for the entire row:
<programlisting>
INSERT INTO products (product_no, name, price) VALUES (1, 'Cheese', DEFAULT);
INSERT INTO products DEFAULT VALUES;
</programlisting>
  </para>
-->
<para>
为了保持清晰，你也可以对独立的字段或者整个行明确使用缺省值：
<programlisting>
INSERT INTO products (product_no, name, price) VALUES (1, 'Cheese', DEFAULT);
INSERT INTO products DEFAULT VALUES;
</programlisting>
</para>

  <!--
<para>
   You can insert multiple rows in a single command:
<programlisting>
INSERT INTO products (product_no, name, price) VALUES
    (1, 'Cheese', 9.99),
    (2, 'Bread', 1.99),
    (3, 'Milk', 2.99);
</programlisting>
  </para>
-->
<para>
你可以在一条命令中插入多行：
<programlisting>
INSERT INTO products (product_no, name, price) VALUES
    (1, 'Cheese', 9.99),
    (2, 'Bread', 1.99),
    (3, 'Milk', 2.99);
</programlisting>
</para>

  <tip>
   <!--
<para>
    When inserting a lot of data at the same time, considering using
    the <xref linkend="sql-copy"> command.
    It is not as flexible as the <xref linkend="sql-insert">
    command, but is more efficient. Refer
    to <xref linkend="populate"> for more information on improving
    bulk loading performance.
   </para>
-->
<para>
要一次插入大量数据，可以看看<xref linkend="sql-copy">命令。
它不像<xref linkend="sql-insert">命令那么灵活，但是更高效。
参考<xref linkend="populate">获取更多有关装载海量数据的信息。
</para>
  </tip>
 </sect1>

 <sect1 id="dml-update">
  <!-- <title>Updating Data</title> -->
<title>更新数据</title>
  <indexterm zone="dml-update">
   <primary>updating</primary>
  </indexterm>

  <indexterm zone="dml-update">
   <primary>UPDATE</primary>
  </indexterm>

  <!--
<para>
   The modification of data that is already in the database is
   referred to as updating.  You can update individual rows, all the
   rows in a table, or a subset of all rows.  Each column can be
   updated separately; the other columns are not affected.
  </para>
-->
<para>
修改已经存储在数据库中的数据的行为叫做更新。你可以更新单独的一行，
也可以更新表中所有的行，还可以更新其中的一部分行。我们可以独立地更新每个字段，
而其它的字段则不受影响。
</para>

<para>
<!-- 
   To update existing rows, use the <xref linkend="sql-update">
   command.  This requires
   three pieces of information: 
-->
要更新现有的行，使用<xref linkend="sql-update">命令。这需要三种信息：
   <orderedlist spacing="compact">
    <listitem>
     <!-- 
 <para>The name of the table and column to update</para> 
 -->
 <para>表的名字和要更新的字段名</para>
    </listitem>

    <listitem>
     <!--
<para>The new value of the column</para>
-->
<para>
字段的新值
</para>
    </listitem>

    <listitem>
     <!--
<para>Which row(s) to update</para>
-->
<para>
要更新哪些行
</para>
    </listitem>
   </orderedlist>
  </para>

  <!--
<para>
   Recall from <xref linkend="ddl"> that SQL does not, in general,
   provide a unique identifier for rows.  Therefore it is not
   always possible to directly specify which row to update.
   Instead, you specify which conditions a row must meet in order to
   be updated.  Only if you have a primary key in the table (independent of
   whether you declared it or not) can you reliably address individual rows
   by choosing a condition that matches the primary key.
   Graphical database access tools rely on this fact to allow you to
   update rows individually.
  </para>
-->
<para>
我们在<xref linkend="ddl">里说过，SQL 通常并不为数据行提供唯一标识。
因此我们无法直接声明需要更新哪一行。但是，我们可以通过声明一个被更新的行必须满足的条件。
只有在表里存在主键的时候 (不依赖于你叫它什么)，我们才能通过选取主键可靠地指定一个独立的行。
图形化的数据库访问工具依赖这个东西来让我们可以独立地更新某些行。
</para>

  <!--
<para>
   For example, this command updates all products that have a price of
   5 to have a price of 10:
<programlisting>
UPDATE products SET price = 10 WHERE price = 5;
</programlisting>
    This might cause zero, one, or many rows to be updated.  It is not
    an error to attempt an update that does not match any rows.
  </para>
-->
<para>
比如，这条命令将所有价格为 5 的产品重定价为 10 ：
<programlisting>
UPDATE products SET price = 10 WHERE price = 5;
</programlisting>
这样做可能导致零行、一行或多行数据被更新。
如果我们试图执行一个不匹配任何行的更新，那也不算错。
</para>


<para>
  <!--
   Let's look at that command in detail. First is the key word
   <literal>UPDATE</literal> followed by the table name.  As usual,
   the table name can be schema-qualified, otherwise it is looked up
   in the path.  Next is the key word <literal>SET</literal> followed
   by the column name, an equal sign, and the new column value.  The
   new column value can be any scalar expression, not just a constant.
   For example, if you want to raise the price of all products by 10%
   you could use:
-->  
让我们仔细看看这个命令。首先是关键字<literal>UPDATE</literal>跟着表名字。
和平常一样，表名字也可以是用模式修饰的，否则就会从模式路径中把它找出来。
然后是关键字<literal>SET</literal>跟着字段名与一个等号以及新的字段值。
新的字段值可以是任意标量表达式，而不仅仅是常量。比如，
如果你想把所有产品的价格提高 10% ，可以用： 
<programlisting>
UPDATE products SET price = price * 1.10;
</programlisting>
<!-- 
   As you see, the expression for the new value can refer to the existing
   value(s) in the row.  We also left out the <literal>WHERE</literal> clause.
   If it is omitted, it means that all rows in the table are updated.
   If it is present, only those rows that match the
   <literal>WHERE</literal> condition are updated.  Note that the equals
   sign in the <literal>SET</literal> clause is an assignment while
   the one in the <literal>WHERE</literal> clause is a comparison, but
   this does not create any ambiguity.  Of course, the
   <literal>WHERE</literal> condition does
   not have to be an equality test.  Many other operators are
   available (see <xref linkend="functions">).  But the expression
   needs to evaluate to a Boolean result. 
-->
如你所见，新值的表达式也可以引用行中现有的数值。我们还忽略了<literal>WHERE</literal>
子句。如果我们忽略了这个子句，那么表中所有的行都要被更新。
如果出现了<literal>WHERE</literal>子句，那么只有匹配其条件的行才会被更新。
请注意在<literal>SET</literal>子句中的等号是一个赋值，而在<literal>WHERE</literal>
子句中的等号是比较，不过这样并不会导致任何歧义。当然<literal>WHERE</literal>
条件不一定非得是相等测试。许多其它操作符也都可以使用(参阅<xref linkend="functions">)。
但是表达式必须得出一个布尔结果。
  </para>

  <!--
<para>
   You can update more than one column in an
   <command>UPDATE</command> command by listing more than one
   assignment in the <literal>SET</literal> clause.  For example:
<programlisting>
UPDATE mytable SET a = 5, b = 3, c = 1 WHERE a &gt; 0;
</programlisting>
  </para>
-->
<para>
你还可以在一个<command>UPDATE</command>命令中更新更多的字段，
方法是在<literal>SET</literal>子句中列出更多赋值。比如：
<programlisting>
UPDATE mytable SET a = 5, b = 3, c = 1 WHERE a &gt; 0;
</programlisting>
</para>
 </sect1>

 <sect1 id="dml-delete">
  <!-- <title>Deleting Data</title> -->
<title>删除数据</title>
  <indexterm zone="dml-delete">
   <primary>deleting</primary>
  </indexterm>

  <indexterm zone="dml-delete">
   <primary>DELETE</primary>
  </indexterm>

  <!--
<para>
   So far we have explained how to add data to tables and how to
   change data.  What remains is to discuss how to remove data that is
   no longer needed.  Just as adding data is only possible in whole
   rows, you can only remove entire rows from a table.  In the
   previous section we explained that SQL does not provide a way to
   directly address individual rows.  Therefore, removing rows can
   only be done by specifying conditions that the rows to be removed
   have to match.  If you have a primary key in the table then you can
   specify the exact row.  But you can also remove groups of rows
   matching a condition, or you can remove all rows in the table at
   once.
  </para>
-->
<para>
到目前为止我们已经解释了如何向表中增加数据以及如何改变数据。
剩下的是讨论如何删除不再需要的数据。和前面增加数据一样，
删除数据也必须是从表中整行整行地删除。
在上一节里我们提到了 SQL 不提供直接访问独立行的方法。因此，
删除行只能是通过声明被删除行必须匹配的条件进行。如果你在表上有一个主键，
那么你可以声明准确的行。当然，你也可以删除匹配条件的一组行，
或者一次删除表中的所有行。
</para>

  <!--
<para>
   You use the <xref linkend="sql-delete">
   command to remove rows; the syntax is very similar to the
   <command>UPDATE</command> command.  For instance, to remove all
   rows from the products table that have a price of 10, use:
<programlisting>
DELETE FROM products WHERE price = 10;
</programlisting>
  </para>
-->
<para>
我们使用<xref linkend="sql-delete">命令删除行。它的语法和<command>UPDATE</command>
命令非常类似。比如，要从产品表中删除所有价格为 10 的产品，用：
<programlisting>
DELETE FROM products WHERE price = 10;
</programlisting>
</para>

  <!--
<para>
   If you simply write:
<programlisting>
DELETE FROM products;
</programlisting>
   then all rows in the table will be deleted!  Caveat programmer.
  </para>
-->
<para>
如果你只是写：
<programlisting>
DELETE FROM products;
</programlisting>
那么表中所有行都会被删除！程序员一定要注意。
</para>
 </sect1>
</chapter>
